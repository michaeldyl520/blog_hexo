[{"title":"Rabbitmq 一些有用的用法","date":"2024-08-13T02:29:42.000Z","path":"2024/08/13/rabbitmq/","text":"Docker 安装rabbitmqmanagement的意思是带有UI的rabbitmq，如果需要web gui，安装带-management的版本，然后通过浏览器访问http://localhost:15672即可访问web gui，访问密钥默认是guest/guest. 1docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.12-management","tags":[{"name":"docker","slug":"docker","permalink":"http://www.jiliuke.com/tags/docker/"},{"name":"rabbitmq","slug":"rabbitmq","permalink":"http://www.jiliuke.com/tags/rabbitmq/"}]},{"title":"Linux debian 系统一些小技巧","date":"2024-08-07T02:49:14.000Z","path":"2024/08/07/debian-tips/","text":"Debian buster生命周期已结束， 可离线打包本地的包安装 dpkg-repack 工具： 12sudo apt-get updatesudo apt-get install dpkg-repack 列出已安装的软件包：你可以使用 dpkg -l 命令列出系统上已安装的软件包，找到你想要重新打包的软件包名称。 1dpkg -l | grep &lt;package-name&gt; 使用 dpkg-repack 重新打包：运行以下命令，将 替换为你想要重新打包的软件包名称： 1sudo dpkg-repack &lt;package-name&gt; deb.sury.org 不再提供包，本地打包以便后续继续使用 1dpkg -l|grep php8.2 | awk &#x27;/^ii/ &#123;print $2&#125;&#x27;| xargs -I &#123;&#125; sudo dpkg-repack &#123;&#125;","tags":[{"name":"deepin","slug":"deepin","permalink":"http://www.jiliuke.com/tags/deepin/"},{"name":"debian","slug":"debian","permalink":"http://www.jiliuke.com/tags/debian/"},{"name":"buster","slug":"buster","permalink":"http://www.jiliuke.com/tags/buster/"},{"name":"php","slug":"php","permalink":"http://www.jiliuke.com/tags/php/"}]},{"title":"docker使用小技巧","date":"2024-08-02T02:13:03.000Z","path":"2024/08/02/docker-tips/","text":"如果 docker ps -a 中太多，一次性删除方法 1docker rm `docker ps -a -q --filter &#x27;status=exited&#x27;` debian apparmor linux内核安全模块影响docker运行，本地操作系统可以直接移除此包1sudo apt-get purge apparmor docker使用代理获取镜像 某些原因docker被封禁，使用以下方法可以绕过123456789101112131415161718192021222324252627282930修改 daemon.json 文件sudo vi /etc/docker/daemon.json添加如下内容，使用官方镜像&#123; &quot;registry-mirrors&quot;: [ &quot;https://hub.docker.com/&quot;]&#125;新建 proxy.conf 文件mkdir -p /etc/systemd/system/docker.service.dcd /etc/systemd/system/docker.service.dtouch proxy.confsudi vi /etc/systemd/system/docker.service.d/proxy.conf添加如下内容：[Service]Environment=&quot;HTTP_PROXY=http://127.0.0.1:8889&quot;Environment=&quot;HTTPS_PROXY=http://127.0.0.1:8889&quot;重启 docker 服务#加载变更的配置systemctl daemon-reload#重启docker服务systemctl restart docker查看配置是否生效systemctl show --property=Environment docker","tags":[{"name":"docker","slug":"docker","permalink":"http://www.jiliuke.com/tags/docker/"}]},{"title":"Linux 系统远程开机(WOL)","date":"2024-04-11T01:45:26.000Z","path":"2024/04/11/wakeonlan/","text":"局域网远程开机(WOL)前置条件，主板需要支持wakonlan，Deepin 20.9 为例 1.查看lan网卡是否开启WOL1sudo ethtool enp3s0 如果 Wake-on: d 表示未开启 2.设置 wake-on: g 开启WOL1sudo ethtool -s enp3s0 wol g 3.设置开机自启动添加rc.local文件sudo vim /etc/rc.local 1234567891011121314151617#!/bin/bash## rc.local## This script is executed at the end of each multiuser runlevel.# Make sure that the script will &quot;exit 0&quot; on success or any other# value on error.## In order to enable or disable this script just change the execution# bits.## By default this script does nothing./usr/sbin/ethtool -s enp3s0 wol gexit 0 12sudo chmod +x /etc/rc.localsudo systemctl enable rc-local 然后重启计算机 4.另外一台局域网电脑安装wakeonlan1sudo apt-get install etherwake 5.发送数据包到上面配置的电脑的MAC地址启动1wakeonlan &#123;MAC Address&#125;","tags":[{"name":"deepin","slug":"deepin","permalink":"http://www.jiliuke.com/tags/deepin/"},{"name":"wakeonlan","slug":"wakeonlan","permalink":"http://www.jiliuke.com/tags/wakeonlan/"},{"name":"wol","slug":"wol","permalink":"http://www.jiliuke.com/tags/wol/"}]},{"title":"magento2 单元测试","date":"2024-03-29T10:42:45.000Z","path":"2024/03/29/magento2-unit-test/","text":"1.PHP Unit Testing12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;?phpnamespace DYL\\Test\\Test\\Unit\\Plugin\\Framework\\DB;use PHPUnit\\Framework\\TestCase;use DYL\\Test\\Plugin\\Framework\\DB\\FieldDataConverter;use Magento\\Framework\\DB\\Query\\BatchRangeIteratorFactory;class FieldDataConverterTest extends TestCase&#123; public function setUp(): void &#123; $test1 = $this-&gt;createMock(\\DYL\\Test\\Model\\Test1::class); $selectFactory = $this-&gt;createMock(\\Magento\\Framework\\DB\\SelectFactory::class); $test2 = $this-&gt;createMock(\\DYL\\Test\\Helper\\Test2::class); $batchRangeIteratorFactory = $this-&gt;createMock(BatchRangeIteratorFactory::class); $this-&gt;fieldDataConverter = new FieldDataConverter( $test1, $selectFactory, $test2, $batchRangeIteratorFactory ); &#125; /** * @dataProvider getExampleKeys * @return void */ public function testGetExampleKey($key, $expected) &#123; $result = $this-&gt;fieldDataConverter-&gt;getExampleKey($key); $this-&gt;assertEquals($expected, $result); &#125; /** * Get example values * @return array[] */ public function getExampleKeys() &#123; return [ [&#x27;test1-test2-test3&#x27;, &#x27;test3&#x27;], ]; &#125;&#125; 2.JavaScript testing首先需要进入项目目录使用最新的package.json 12cp package.json.sample package.jsonnpm install 启动testing，添加参数-v可以看到更多调试信息 1node /home/dyl/.config/nvm/versions/node/v20.12.1/bin/grunt spec:luma --file=&quot;dev/tests/js/jasmine/tests/app/code/Magento/Ui/base/js/grid/columns/actions.test.js&quot; 调试启动 1node --inspect-brk /home/dyl/.config/nvm/versions/node/v20.12.1/bin/grunt spec:luma --file=&quot;dev/tests/js/jasmine/tests/app/code/Magento/Ui/base/js/grid/columns/actions.test.js&quot; chrome浏览器输入chrome://inspect，应该能看到监听的node请求","tags":[{"name":"magento2","slug":"magento2","permalink":"http://www.jiliuke.com/tags/magento2/"},{"name":"phpunit testing","slug":"phpunit-testing","permalink":"http://www.jiliuke.com/tags/phpunit-testing/"},{"name":"javascript testing","slug":"javascript-testing","permalink":"http://www.jiliuke.com/tags/javascript-testing/"}]},{"title":"Magento 同步生产数据的一些问题","date":"2024-03-07T07:14:29.000Z","path":"2024/03/07/magento2-sync-block-page/","text":"1.同步生产站点的静态内容数据例如首页幻灯片，contact-us页面内容等,需要同步的表如下 12345678cms_blockcms_block_storecms_pagecms_page_storesequence_cms_blocksequence_cms_pagestaging_updateflag //其中的staging的值必须在staging_update中存在","tags":[{"name":"Magento2","slug":"Magento2","permalink":"http://www.jiliuke.com/tags/Magento2/"},{"name":"cms_page","slug":"cms-page","permalink":"http://www.jiliuke.com/tags/cms-page/"},{"name":"cms_block","slug":"cms-block","permalink":"http://www.jiliuke.com/tags/cms-block/"}]},{"title":"Magento2 Frontend Tips","date":"2023-11-14T02:21:40.000Z","path":"2023/11/14/magento2-frontend-tips/","text":"1.在自定义dom上显示数据loading状态define 引用 loader 组件并初始化为loader变量，接着设置加载icon，然后调用show显示加载中，调用hide隐藏加载中。 12345678910111213define([ ... &#x27;loader&#x27;, ...],function(...,loader,...)&#123; let overviewContent = $(this).parent().find(&#x27;.overview-content&#x27;); overviewContent.loader(&#123;icon: self.options.loadingImg&#125;); overviewContent.loader(&#x27;show&#x27;);//显示loader ... overviewContent.loader(&#x27;hide&#x27;);//数据加载完成后隐藏loader&#125;) 参考链接https://developer.adobe.com/commerce/frontend-core/javascript/jquery-widgets/loader/ 2.在Magento2 Js 中再加载js组件1234567define([ ... &#x27;mage/apply/main&#x27;, ...],function(...,main,...)&#123; main.applyFor(&#x27;.content-card&#x27;,&#x27;&#123;&#125;&#x27;,&#x27;swiperOverviewImages&#x27;);&#125;) 参考链接https://fishpig.co.uk/magento/tutorials/manually-load-js-component-magento-2/","tags":[{"name":"magento2","slug":"magento2","permalink":"http://www.jiliuke.com/tags/magento2/"},{"name":"modal","slug":"modal","permalink":"http://www.jiliuke.com/tags/modal/"}]},{"title":"Xhgui Tips","date":"2023-10-16T10:24:10.000Z","path":"2023/10/16/xhgui-tips/","text":"最新的 XHGUI 用法https://github.com/michaeldyl520/xhgui 最新的自修改xhgui搭配mongodb用法如下 在程序入口index.php添加以下代码即可开始分析12345require_once &#x27;/path/to/xhgui/vendor/perftools/php-profiler/autoload.php&#x27;;$config = require_once &#x27;/path/to/xhgui/config/config.php&#x27;;$profiler = new \\Xhgui\\Profiler\\Profiler($config);$profiler-&gt;start(); 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;?php/** * Default configuration for PHP Profiler. * * config.php * To change these, create a file called `config.php` file in the same directory * and return an array from there with your overriding settings. */use Xhgui\\Profiler\\Profiler;use Xhgui\\Profiler\\ProfilingFlags;return array( &#x27;save.handler&#x27; =&gt; Profiler::SAVER_STACK, &#x27;save.handler.stack&#x27; =&gt; array( &#x27;savers&#x27; =&gt; array( Profiler::SAVER_UPLOAD ), &#x27;saveAll&#x27; =&gt; false, ), &#x27;save.handler.upload&#x27; =&gt; array( &#x27;url&#x27; =&gt; &#x27;https://www.xhgui.local/run/import&#x27;, // The timeout option is in seconds and defaults to 3 if unspecified. &#x27;timeout&#x27; =&gt; 3, // the token must match &#x27;upload.token&#x27; config in XHGui &#x27;token&#x27; =&gt; &#x27;&#x27;, ), &#x27;profiler.enable&#x27; =&gt; function () &#123; return true; &#125;, &#x27;profiler.flags&#x27; =&gt; array( ProfilingFlags::CPU, ProfilingFlags::MEMORY, ProfilingFlags::NO_BUILTINS, ProfilingFlags::NO_SPANS, ), &#x27;profiler.options&#x27; =&gt; array(), &#x27;profiler.exclude-env&#x27; =&gt; array(), &#x27;profiler.simple_url&#x27; =&gt; function ($url) &#123; return preg_replace(&#x27;/=\\d+/&#x27;, &#x27;&#x27;, $url); &#125;, &#x27;profiler.replace_url&#x27; =&gt; null,);","tags":[{"name":"xhgui","slug":"xhgui","permalink":"http://www.jiliuke.com/tags/xhgui/"}]},{"title":"composer tips","date":"2023-10-09T05:22:34.000Z","path":"2023/10/09/composer-tips/","text":"Composer 小技巧1. 自定义安装包的方法adobe 官方已不支持stripe-payment 3.2.8,需要用composer 自定义的方式安装包composer配置方法 1234567891011121314151617181920212223242526272829&#123; ...... &quot;repositories&quot;: &#123; &quot;0&quot;:&#123; &quot;type&quot;: &quot;composer&quot;, &quot;url&quot;: &quot;https://repo.magento.com/&quot; &#125;, &quot;1&quot;: &#123; &quot;type&quot;: &quot;package&quot;, &quot;package&quot;: &#123; &quot;name&quot;: &quot;stripe/module-payments&quot;, &quot;version&quot;: &quot;3.2.8&quot;, &quot;dist&quot;: &#123; &quot;url&quot;: &quot;https://github.com/stripe/stripe-magento2-releases/raw/master/stripe-magento2-3.2.8.tgz&quot;, &quot;type&quot;: &quot;tar&quot; &#125;, &quot;autoload&quot;:&#123; &quot;files&quot;: [ &quot;code/StripeIntegration/Payments/registration.php&quot; ], &quot;psr-4&quot;: &#123; &quot;StripeIntegration\\\\Payments\\\\&quot;: &quot;code/StripeIntegration/Payments/&quot; &#125; &#125; &#125; &#125; &#125;, ......&#125; 然后终端中在项目目录下使用 composer require stripe/module-payments:3.2.8 安装。 2.自定义文件夹方式安装的方法composer 配置方法 1234567891011121314151617&#123; ...... &quot;repositories&quot;: &#123; &quot;0&quot;:&#123; &quot;type&quot;: &quot;composer&quot;, &quot;url&quot;: &quot;https://repo.magento.com/&quot; &#125;, &quot;1&quot;: &#123; &quot;type&quot;: &quot;path&quot;, &quot;url&quot;: &quot;app/vendor/*/*&quot;, &quot;options&quot;: &#123; &quot;symlink&quot;: true &#125; &#125; &#125;, ......&#125;","tags":[{"name":"composer","slug":"composer","permalink":"http://www.jiliuke.com/tags/composer/"}]},{"title":"magento2 代码规范设置方法","date":"2023-03-24T05:19:28.000Z","path":"2023/03/24/magento-coding-standard/","text":"安装代码标准使用magento2官方的代码标准，如果需要在开发工具中提示代码规范的问题，需要在安装magento2后执行以下shell 1vendor/bin/phpcs --config-set installed_paths vendor/magento/magento-coding-standard,vendor/phpcompatibility/php-compatibility/PHPCompatibility PhpStorm 自动格式化的一些配置自动对齐的问题高版本PhpStorm Function如果有多个变量并换行，会自动两边对齐属性，不符合代码规范，需要在Settings&gt;Editor&gt;Code Style&gt;PHP-&gt;Wrapping and Braces-&gt;Function declaration parameters中去掉Align when multiline的勾选框且勾选Keep &#39;)&#39; and &#39;&#123;&#39; on one line 强制限定类型的提示问题Magento2 PHP不需要做强制类型限定参照图去掉以下两个复选框。 去掉js相等警告 eslint 搭法 phpcs搭法如果最新的vendor如果没有包含phpcs等检测工具，我们可以间接使用默认的2.4.5-p1中的phpcs进行项目的检测 右键phpcs添加方法","tags":[{"name":"magento2","slug":"magento2","permalink":"http://www.jiliuke.com/tags/magento2/"},{"name":"phpcs","slug":"phpcs","permalink":"http://www.jiliuke.com/tags/phpcs/"},{"name":"phpstorm","slug":"phpstorm","permalink":"http://www.jiliuke.com/tags/phpstorm/"}]},{"title":"postman自动为当前envirionment设置token","date":"2023-03-01T07:36:39.000Z","path":"2023/03/01/postman-tips/","text":"自动设置token为了简化操作，有时候需要postman在请求接口后自动设置token，方法如下打开postman，在一个请求下面点击Tests，输入以下代码 12var responseData = responseBody;pm.environment.set(&quot;token&quot;, responseData.replace(/\\&quot;/g,&#x27;&#x27;));","tags":[{"name":"postman","slug":"postman","permalink":"http://www.jiliuke.com/tags/postman/"},{"name":"token","slug":"token","permalink":"http://www.jiliuke.com/tags/token/"}]},{"title":"ssd-tips","date":"2023-02-14T02:13:06.000Z","path":"2023/02/14/ssd-tips/","text":"在debian查看SSD寿命 查看Wear_Leveling_Count和SSD_Life_Left1sudo smartctl -a /dev/sdb 不同的SSD使用smartctl展示不同 wear leveling count是 磨损均衡计数（WLC）的意思，当前值代表的剩余耐力，以百分比表示，意味着它从100开始减少。 SSD_Life_Left代表着SSD的生命周期还剩下多少 查看 Percentage Used Endurance Indicator1sudo smartctl -l devstat /dev/sdb 最重要和直观Percentage Used Endurance Indicator，单位是百分比，新的是0%","tags":[{"name":"linux","slug":"linux","permalink":"http://www.jiliuke.com/tags/linux/"},{"name":"ssd","slug":"ssd","permalink":"http://www.jiliuke.com/tags/ssd/"}]},{"title":"使用mysqldump备份文件后删除日志数据","date":"2022-06-30T01:58:31.000Z","path":"2022/06/30/reduce-size-after-mysqldump/","text":"实际应用中会出现需要减少导出的备份体积，然后在本地导入再开发，可以大幅缩短导入等待时间,方法如下 1sed &#x27;/INSERT INTO `tablelog1`/d&#x27; xxxx.sql | sed &#x27;/INSERT INTO `tablelog2`/d&#x27; | sed &#x27;/INSERT INTO `tablelog3`/d&#x27; | sed &#x27;/INSERT INTO `tablelog4`/d&#x27; | sed &#x27;/INSERT INTO `tablelog5`/d&#x27; &gt; reduced.sql","tags":[{"name":"mysql","slug":"mysql","permalink":"http://www.jiliuke.com/tags/mysql/"},{"name":"mysqldump","slug":"mysqldump","permalink":"http://www.jiliuke.com/tags/mysqldump/"},{"name":"reduce","slug":"reduce","permalink":"http://www.jiliuke.com/tags/reduce/"}]},{"title":"MYSQL Tips","date":"2022-05-16T02:24:37.000Z","path":"2022/05/16/mysql-tips/","text":"一些有用mysql tips 12345678#统计所有数据库从大到小排列select TABLE_SCHEMA,round(SUM(DATA_LENGTH + INDEX_LENGTH)/1024/1024,2) as data from information_schema.tables GROUP BY TABLE_SCHEMA order by data desc;#统计数据库大小select round(SUM(DATA_LENGTH + INDEX_LENGTH)/1024/1024,2) as data from information_schema.tables where TABLE_SCHEMA=&quot;xxxxxx&quot;;#统计数据表大小select table_name,round(SUM(DATA_LENGTH + INDEX_LENGTH)/1024/1024,2) as data from information_schema.tables where TABLE_SCHEMA=&quot;xxxxxx&quot; GROUP BY table_name order by data desc;#批量修改域名UPDATE core_config_data SET value = replace (value,&#x27;xxx.xxx.com&#x27;,&#x27;xxx.xxx.local&#x27;) WHERE value LIKE &#x27;%xxx.xxx.com%&#x27;;","tags":[{"name":"mysql","slug":"mysql","permalink":"http://www.jiliuke.com/tags/mysql/"},{"name":"统计","slug":"统计","permalink":"http://www.jiliuke.com/tags/%E7%BB%9F%E8%AE%A1/"}]},{"title":"Linux使用logrotate自动切割magento2日志","date":"2022-01-13T06:29:53.000Z","path":"2022/01/13/logrotate-magento2/","text":"需求 magento2 在运行的时候会不断在项目中var/log中记录日志，时间久后就会产生巨大的log日志，所以有必要每天切割日志保存，利于日志分析和减少磁盘开销。 方法 (仅对于linux) 1.首先确定当前的项目名称（magento2）和项目路径(/var/www/magento2),项目执行用户www 2.sudo vim /etc/logrotate.d/magento2 3.拷贝以下内容到/etc/logrotate.d/magento2 1234567891011121314151617181920212223242526 &#123; daily missingok rotate 365 maxage 365 compress copytruncate prerotate # logrotate fails if the .1 file already exists, which only # ever happens if the last copytruncate failed, or during the # first run after delaycompress is disabled. When this script # runs, older logs have already been rotated, so it&#x27;s safe to # rotate an unexpected log.1 file into log.2.gz. Sometimes the # argument already has a .1 suffix, so strip it. [ -e &quot;$&#123;1%.1&#125;.1&quot; ] &amp;&amp; sudo -u -g bash -c &quot;gzip --best &lt; \\&quot;$&#123;1%.1&#125;.1\\&quot; &gt; \\&quot;$&#123;1%.1&#125;.2.gz\\&quot;&quot; &amp;&amp; rm &quot;$&#123;1%.1&#125;.1&quot; true endscript notifempty create 0640 www www su www www lastaction chown www:www -R /var/www/magento2/var/log/*.log # fix files with broken permissions chown www:www -R /var/www/magento2/var/log/*.log.[0-9]*.gz 2&gt;/dev/null || true endscript&#125;4.测试 1234#强制执行sudo logrotate -f /etc/logrotate.d/magento2#调试模式sudo logrotate -d /etc/logrotate.d/magento2","tags":[{"name":"magento2","slug":"magento2","permalink":"http://www.jiliuke.com/tags/magento2/"},{"name":"linux","slug":"linux","permalink":"http://www.jiliuke.com/tags/linux/"},{"name":"logrotate","slug":"logrotate","permalink":"http://www.jiliuke.com/tags/logrotate/"}]},{"title":"curl https error","date":"2021-11-26T03:13:50.000Z","path":"2021/11/26/curl-https-error/","text":"当服务器中curl访问https站点出现以下问题时1234567curl: (60) SSL certificate problem: certificate has expiredMore details here: https://curl.haxx.se/docs/sslcerts.htmlcurl failed to verify the legitimacy of the server and therefore could notestablish a secure connection to it. To learn more about this situation and how to fix it, please visit the web page mentioned above. 问题原因由于服务器curl证书问题导致无法正确访问https站点 解决办法123456#红帽系系统yum install ca-certificates opensslcurl -k https://curl.se/ca/cacert.pem &gt; cacert.pemopenssl x509 -outform der -in cacert.pem -out cacert.crtupdate-ca-trustls -l /etc/pki/tls/certs/ 参考连接 https://curl.se/docs/sslcerts.html https://curl.se/docs/caextract.html","tags":[{"name":"curl","slug":"curl","permalink":"http://www.jiliuke.com/tags/curl/"},{"name":"https","slug":"https","permalink":"http://www.jiliuke.com/tags/https/"}]},{"title":"在Deepin linux中安装nvidia独立显卡","date":"2021-11-01T01:36:59.000Z","path":"2021/11/01/nvidia-driver-install-in-deepin/","text":"在deepin linux中安装nvidia官方驱动的方法首先，到nvdia官网下载对应显卡的linux驱动https://www.nvidia.com/Download/index.aspx?lang=en-us一般对应的下载文件会在~/Downloads下,将它重新命令nvidia.sh便于后面引用。 接下来请按照以下步骤执行。 卸载nvidia开源驱动和闭源驱动 1sudo apt autoremove nvidia-* 禁止nouveau驱动 1sudo dedit /etc/modprobe.d/blacklist.conf 执行以上代码打开blacklist.conf文件后复制以下内容并保存关闭 12345blacklist nouveaublacklist lbm-nouveauoptions nouveau modeset=0alias nouveau offalias lbm-nouveau off 给blacklist.conf添加执行权限 1sudo chmod +x /etc/modprobe.d/blacklist.conf blacklist nouveau是禁用nouveau第三方驱动，之后不需要改回来，由于nouveau是构建在内核中的，所以要执行下面代码集成到内核中 1sudo update-initramfs -u 好了，到现在为止，前期工作已经完成。 重启可以运行以下命令 1reboot 重启后查看nouveau有没有运行，没有输出则代表禁用生效 1lsmod | grep nouveau 同时按住ctrl+alt+F2键，进入tty2。输入当前用户名点击enter然后再输入密码点击enter进入。 导航到Downloads目录，为nvidia.sh添加执行权限。 1cd ~/Downloads &amp;&amp; chmod +x nvidia.sh 关闭图形界面 1sudo systemctl stop lightdm 安装显卡驱动 1sudo sh nvidia.sh 请注意接下来的步骤，一定要完成相同，否则将造成无法登陆图形界面 注意英文字母中出现大写的“DKMS”选择Yes 注意英文中出现“32-bit”选择Yes 注意英文中出现“nvidia-xconfig”一定要选择No 输入reboot重启电脑，安装完成 参考视频 https://www.ixigua.com/7024358143215960590","tags":[{"name":"nvidia linux","slug":"nvidia-linux","permalink":"http://www.jiliuke.com/tags/nvidia-linux/"},{"name":"deepin","slug":"deepin","permalink":"http://www.jiliuke.com/tags/deepin/"},{"name":"独立显卡 安装","slug":"独立显卡-安装","permalink":"http://www.jiliuke.com/tags/%E7%8B%AC%E7%AB%8B%E6%98%BE%E5%8D%A1-%E5%AE%89%E8%A3%85/"}]},{"title":"数据库shell备份与超时自动删除","date":"2021-10-19T02:38:24.000Z","path":"2021/10/19/dbbackshell/","text":"12345678910111213#!/bin/bash id=&quot;user&quot;pwd=&quot;password&quot;$db=&quot;db&quot;backuppath=&quot;/app/&quot;$user&quot;/var/dbbackup&quot;day=15[ ! -d $backuppath ] &amp;&amp; mkdir -p $backuppathcd $backuppathdbname=$db&#x27;_&#x27;backupname=$dbname`date +%Y%m%d%H%M%S`mysqldump -h127.0.0.1 -u$id -p$pwd $db --single-transaction --triggers --skip-tz-utc --ignore-table-data=$db.quote_id_mask | gzip -&gt; $backupname.sql.gzfind $backuppath -name $dbname&quot;*.sql.gz&quot; -type f -mtime +$day -exec rm -rf &#123;&#125; \\;","tags":[]},{"title":"Magento2 Zend_Http_Client 使用 http_proxy代理","date":"2021-07-16T07:00:23.000Z","path":"2021/07/16/magento2-Zend-Http-Client-use-proxy/","text":"开发中，如果遇到某种特殊情况下，无法访问外网，则可以设置代理12345678910111213141516//file vendor/magento/framework/HTTP/Adapter/Curl.php after line 26 /** * Parameters array * * @var array */protected $_config = [ &#x27;protocols&#x27; =&gt; (CURLPROTO_HTTP | CURLPROTO_HTTPS | CURLPROTO_FTP | CURLPROTO_FTPS ), &#x27;verifypeer&#x27; =&gt; true, &#x27;verifyhost&#x27; =&gt; 2, &#x27;proxy&#x27; =&gt; &quot;http://127.0.0.1:8888&quot;//add http proxy here]; 123456//file vendor/magento/zendframework1/library/Zend/Http/Client.php after line 1089$response = $this-&gt;adapter-&gt;read();//remove extra response afteradd proxyif (false !== stripos($response, &quot;HTTP/1.1 200 Connection established\\r\\n\\r\\n&quot;)) &#123; $response = str_ireplace(&quot;HTTP/1.1 200 Connection established\\r\\n\\r\\n&quot;, &#x27;&#x27;, $response);&#125;","tags":[{"name":"magento2","slug":"magento2","permalink":"http://www.jiliuke.com/tags/magento2/"},{"name":"http_proxy","slug":"http-proxy","permalink":"http://www.jiliuke.com/tags/http-proxy/"},{"name":"Zend_Http_Client","slug":"Zend-Http-Client","permalink":"http://www.jiliuke.com/tags/Zend-Http-Client/"}]},{"title":"deepin中打包出现的问题汇总","date":"2021-07-01T03:11:05.000Z","path":"2021/07/01/package-deb-tips/","text":"问题打包后安装出现双图标 解决办法desktop中添加StartupWMClass=xxxxxx通过终端中执行xprop WM_CLASS点击应用程序获取。","tags":[]},{"title":"一些 deepin-wine 事例","date":"2021-03-17T10:42:58.000Z","path":"2021/03/17/wine/","text":"使用MIDI游戏问题123456789101112131415WINEPREFIX=~/.deepinwine/apps/XXX_1 WINEDEBUG=+seh deepin-wine5-stable ~/.deepinwine/apps/XXX_1/drive_c/Program\\ Files/XXXX/XXX5/LinLink5.exe#调试字体WINEPREFIX=/data/home/dyl/.deepinwine/apps/XXX_1 WINEDEBUG=+font,+tid deepin-wine5-stable /data/home/dyl/.deepinwine/apps/XXX_1/drive_c/Program\\ Files/XXXX/XXX5/LinLink5.exe &amp;&gt; /data/home/dyl/fonts.logWINEPREFIX=/data/home/dyl/.deepinwine/apps/XXX_1 WINEDEBUG=+seh deepin-wine5-stable /data/home/dyl/.deepinwine/apps/XXX_1/drive_c/Program\\ Files/XXXX/XXX5/LinLink5.exe#解决midi声音问题sudo apt-get install timiditytimidity -iAD -B2,8 -Os1l -s 44100WINE=/usr/bin/deepin-wine5-stable WINEPREFIX=/home/dyl/.deepinwine/apps/XXX_1 winetricks -q directmusic gmdls 解决dotnet40安装卡死问题123LC_ALL=en_US.UTF-8 WINEPREFIX=/home/dyl/.deepinwine/apps/XXXXXX_1 WINEDEBUG=+seh deepin-wine5-stable /home/dyl/.deepinwine/apps/XXXXXX_1/drive_c/yscq_tanwan/Update.exeWINE=/usr/bin/deepin-wine5-stable WINEPREFIX=/home/dyl/.deepinwine/apps/XXXXXX_1 winetricks -q dotnet40 gdiplus","tags":[]},{"title":"debian系统多版本PHP安装多版本xdebug","date":"2021-02-09T08:12:43.000Z","path":"2021/02/09/multiple-pecl-php-xdebug/","text":"多版本PHP共存的Debian系统中，特定版本的xdebug支持特定PHP版本，所以需要安装不同的版本的xdebug前提条件： Debian系统 已安装php7.3-dev php7.4-dev 123456789101112131415#设定默认php环境变量为7.3sudo update-alternatives --set php /usr/bin/php7.3sudo update-alternatives --set phpize /usr/bin/phpize7.3sudo update-alternatives --set php-config /usr/bin/php-config7.3#安装xdebug 2.9.8sudo pecl -d php_suffix=7.3 install http://pecl.php.net/get/xdebug-2.9.8.tgzsudo pecl uninstall xdebug#设定默认php环境变量为7.4sudo update-alternatives --set php /usr/bin/php7.4sudo update-alternatives --set phpize /usr/bin/phpize7.4sudo update-alternatives --set php-config /usr/bin/php-config7.4#安装xdebug 3.0.2sudo proxychains pecl -d php_suffix=7.4 install http://pecl.php.net/get/xdebug-3.0.2.tgzsudo pecl uninstall xdebug 配置Xdebug 3安装完成后进入php.ini配置文件，在Dynamic Extensions下添加以下代码，方便开发和调试 12zend_extension=xdebug.soxdebug.mode=develop,debug","tags":[]},{"title":"关于国内使用flatpak","date":"2021-01-18T02:26:07.000Z","path":"2021/01/18/flatpak-tips/","text":"国内用户可以使用上海交通大学的flatpak源，修改代码如下： 1sudo flatpak remote-modify flathub --url=https://mirror.sjtu.edu.cn/flathub","tags":[]},{"title":"crossover 20 安装Photoshop CS6","date":"2020-12-24T02:20:59.000Z","path":"2020/12/24/crossover-ps/","text":"CrossOver 安装 PhotoShop CS6已在crossover 20版本测试通过，使用原版PhotoShop CS6安装镜像安装，只需要在安装的时候同时安装微软XML解析器(MSXML) 3.0即可安装成功。","tags":[{"name":"crossover","slug":"crossover","permalink":"http://www.jiliuke.com/tags/crossover/"},{"name":"Adobe Photoshop CS6","slug":"Adobe-Photoshop-CS6","permalink":"http://www.jiliuke.com/tags/Adobe-Photoshop-CS6/"}]},{"title":"nginx-ssl","date":"2020-01-10T02:45:28.000Z","path":"2020/01/10/nginx-ssl/","text":"Nginx https 证书自己生成(debian系系统为例)1.切换到/etc/nginx 目录下执行1sudo openssl req -new -x509 -nodes -out server.crt -keyout server.key 2.配置站点nginx(/etc/nginx/sites-enabled/test)1234567891011121314151617181920212223242526272829303132333435363738394041424344upstream php5.6-fpm &#123; server unix:/var/run/php/php5.6-fpm.sock;&#125;server &#123; listen 443 ssl; listen [::]:443 ssl; server_name www.test.local; ssl on; ssl_certificate /etc/nginx/server.crt; ssl_certificate_key /etc/nginx/server.key; ssl_session_cache shared:SSL:1m; root /home/dyl/website/test; location / &#123; try_files $uri $uri/ /index.php$is_args$args; &#125; index index.php index.html; location ~ \\.php$ &#123; # 设置php-fpm fastcgi_pass php5.6-fpm; # 设置nginx的默认首页文件(上面已经设置过了，可以删除) fastcgi_index index.php; # 设置脚本文件请求的路径 fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; # 引入fastcgi的配置文件 include fastcgi_params; &#125; # deny access to .htaccess files, if Apache&#x27;s document root # concurs with nginx&#x27;s one # location ~ /\\.ht &#123; deny all; &#125;&#125; 3.重启nginx服务1sudo systemctl restart nginx","tags":[{"name":"nginx","slug":"nginx","permalink":"http://www.jiliuke.com/tags/nginx/"},{"name":"ssl","slug":"ssl","permalink":"http://www.jiliuke.com/tags/ssl/"}]},{"title":"大批量文件删除操作","date":"2019-12-28T02:06:31.000Z","path":"2019/12/28/bulk-delete-operation/","text":"百万级文件删除使用rm删除会十分缓慢，大量删除操作需要用到rsync同步命令。例如需要删除文件夹/home/dyl/test/ 首先新建一个空文件夹 /tmp/test/。 然后使用以下命令删除 1rsync --delete-before -a -H -v /tmp/test/ /home/dyl/test/ 如果不想看到日志，参数换成-d. 1rsync --delete-before -d /tmp/test/ /home/dyl/test/","tags":[{"name":"文件删除","slug":"文件删除","permalink":"http://www.jiliuke.com/tags/%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4/"}]},{"title":"ssh 配置不同key对应不同的git仓库","date":"2019-08-19T02:11:03.000Z","path":"2019/08/19/about-ssh-config/","text":"需求我们有很多仓库账号，每个仓库的登录用户又不同，这个时候就需要使用多个ssh keys配置不同的仓库，否则将会出现权限问题 步骤1.首先生成ssh key，参见生成ssk key.2.配置config(~/.ssh/config) 123456789Host git.us.magento.cloud Hostname git.us.magento.cloud IdentityFile ~/.ssh/id_rsa_mage_cloud IdentitiesOnly yesHost michaeldyl520.github.com Hostname ssh.github.com IdentityFile ~/.ssh/id_rsa_michaeldyl520 IdentitiesOnly yes User git 如果都是使用github，建议别名项目仓库Host避免冲突，例如git@michaeldyl520.github.com:xxxx/xxxx.git","tags":[{"name":"ssh","slug":"ssh","permalink":"http://www.jiliuke.com/tags/ssh/"},{"name":"git","slug":"git","permalink":"http://www.jiliuke.com/tags/git/"}]},{"title":"apache使用php-fpm配置多版本","date":"2019-08-19T01:31:38.000Z","path":"2019/08/19/apache-php-fpm/","text":"需求有时候我们需要在同一台服务器配置多个php版本利于开发测试，我们可以直接使用他人做好的包直接安装配置，以deepin示例。 步骤 首先加入多版本php源 1234sudo apt-get -y install apt-transport-https lsb-release ca-certificatessudo wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpgsudo sh -c &#x27;echo &quot;deb https://packages.sury.org/php/ $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/php.list&#x27;sudo apt-get update https://packages.sury.org/php/README.txt 安装apache和多版本php-fpm 1sudo apt-get install apache2 php5.6-fpm php7.0-fpm php7.1-fpm 打开apache headers和proxy_fcgi模块 1sudo a2enmod headers proxy_fcgi apache和php-fpm建议运行用户配置成当前登录账号，避免出现权限问题 配置虚拟域名 12345678910111213141516&lt;VirtualHost *:80&gt; ServerName m1.mycoolcell.local ServerAlias m1.mycoolcell.local ServerAdmin webmaster@localhost DocumentRoot /home/dyl/website/mycoolcell_m1 SetEnv MAGE_RUN_CODE wholesale SetEnv MAGE_RUN_TYPE website &lt;FilesMatch &quot;\\.php$&quot;&gt; &lt;If &quot;-f %&#123;REQUEST_FILENAME&#125;&quot;&gt; SetHandler &quot;proxy:unix:/run/php/php5.6-fpm.sock|fcgi://localhost/&quot; &lt;/If&gt; &lt;/FilesMatch&gt; ErrorLog $&#123;APACHE_LOG_DIR&#125;/m1.mycoolcell.local.error.log CustomLog $&#123;APACHE_LOG_DIR&#125;/m1.mycoolcell.local.access.log combined&lt;/VirtualHost&gt; 如果需要其他版本，将上面的php5.6-fpm.sock配置成php7.1-fpm.sock即可。","tags":[{"name":"apache","slug":"apache","permalink":"http://www.jiliuke.com/tags/apache/"},{"name":"php-fpm","slug":"php-fpm","permalink":"http://www.jiliuke.com/tags/php-fpm/"}]},{"title":"elasticsearch-tips","date":"2019-03-25T02:14:24.000Z","path":"2019/03/25/elasticsearch-tips/","text":"Tips12345678#show elasticsearch databasecurl localhost:9200/_cat/indices?v#delete elasticsearch databasecurl -XDELETE localhost:9200/xxxxxxx?pretty#set limit variablecurl -XPUT localhost:9200/_template/template_name -d &#x27;&#123;&quot;template&quot;: &quot;*&quot;, &quot;order&quot;: 0, &quot;settings&quot;: &#123;&quot;index&quot;: &#123;&quot;mapping&quot;: &#123;&quot;total_fields&quot;: &#123;&quot;limit&quot;: 10000&#125;&#125;&#125;&#125;, &quot;version&quot;: 1&#125;&#x27;#show use percent of elasticsearchcurl http://localhost:9200/_nodes/stats?pretty&amp;human -s |grep heap_used 本地开发减少docker elasticsearch的内存占用 123456docker cp elasticsearch7177:/usr/share/elasticsearch/config/jvm.options ~/cd ~sed -i &#x27;s/-Xms6g/-Xms1g/g&#x27; ~/jvm.optionssed -i &#x27;s/-Xmx6g/-Xmx1g/g&#x27; ~/jvm.optionsdocker cp ~/jvm.options elasticsearch7177:/usr/share/elasticsearch/configrm ~/jvm.options","tags":[{"name":"elasticsearch","slug":"elasticsearch","permalink":"http://www.jiliuke.com/tags/elasticsearch/"}]},{"title":"ssh 必须使用账号密码登录方法","date":"2018-06-20T06:14:16.000Z","path":"2018/06/20/ssh-must-be-logged-in-with-an-account-password/","text":"问题当我们本地有很多私钥的时候，直接使用ssh xxx@xx.xx.xx.xx方式登录的时候会出现 Too many authentication failures for xxx Authentication failed.的错误，所以当我们存在大量的私钥时，为了方便，可以使用免密登录（不在此文讨论范围），还可以必须使用账号密码登录。 解决办法配置ssh配置文件，如debian配置文件在/etc/ssh/ssh_config中，加入PubkeyAuthentication no到文件中即可。","tags":[{"name":"ssh","slug":"ssh","permalink":"http://www.jiliuke.com/tags/ssh/"},{"name":"linux","slug":"linux","permalink":"http://www.jiliuke.com/tags/linux/"},{"name":"debian","slug":"debian","permalink":"http://www.jiliuke.com/tags/debian/"}]},{"title":"magento2使用PayPal Payflow测试账号","date":"2018-06-06T06:14:03.000Z","path":"2018/06/06/PayPal-PayFlow-test-method/","text":"访问开发文档搜索并点击Create a test-only Payflow Gateway account，继续点击Payflow Services开始创建账号，根据需要的类型选择支付处理公司，除了邮件其他随意填继续下一步到结束。完成后会有成功注册信息发送到邮箱。 根据邮件登录信息登录登录paypal payflow后台, 点击Service Setting-&gt;Set Up-&gt;Payment Confirmation中，修改Show confirmation pagew为On my website，修改Return URL Method为Post。转到Security Options，修改Enable Secure Token为Yes，保存; 导航到Service Setting-&gt;Customize-&gt;Choose a layout and color，选择Layout C,然后保存发布（Save and Publish）; 导航到Account Administration-&gt;Manage Security-&gt;Transaction Settings，修改Allow reference transactions为Yes，保存（Confirm）; magento2后台配置paypal payflow后即可使用测试信用卡测试。","tags":[{"name":"magento2","slug":"magento2","permalink":"http://www.jiliuke.com/tags/magento2/"},{"name":"PayPal","slug":"PayPal","permalink":"http://www.jiliuke.com/tags/PayPal/"}]},{"title":"关于magento-cloud新项目无法pull代码的问题","date":"2018-06-06T06:13:49.000Z","path":"2018/06/06/about-magento-cloud-connect-git-failed/","text":"问题magento-cloud新项目添加magento-cloud ssh-key:add后仍然无法pull代码， 处理解决方法如下： 1.需要配置~/.ssh/config文件，例如： gedit ~/.ssh/config, 拷贝以下到~/.ssh/config中 1234Host git.us-3.magento.cloud Hostname git.us-3.magento.cloud User tajmoznp6wqkq IdentityFile /home/dyl/.ssh/id_rsa.2 2.获取公钥写入到~/.ssh/known_hosts中，终端执行以下命令： 1ssh-keyscan -H git.us-3.magento.cloud &gt;&gt; ~/.ssh/known_hosts","tags":[{"name":"magento2","slug":"magento2","permalink":"http://www.jiliuke.com/tags/magento2/"},{"name":"magento-cloud","slug":"magento-cloud","permalink":"http://www.jiliuke.com/tags/magento-cloud/"}]},{"title":"magento2后台修改eav属性对应的模板","date":"2018-04-18T06:13:42.000Z","path":"2018/04/18/magento2-alter-eav-template/","text":"简介很多情况下我们需要修改后台eav属性对应的模板文件。以下是通过修改模板文件让客户无法在后台修改multiple select，也就是disable multiple select。 代码12345678910111213141516&lt;!--Silk/AdvancedEstimatedShippingDate/etc/adminhtml/di.xml --&gt;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:ObjectManager/etc/config.xsd&quot;&gt; &lt;virtualType name=&quot;Magento\\Catalog\\Ui\\DataProvider\\Product\\Form\\Modifier\\Pool&quot; type=&quot;Magento\\Ui\\DataProvider\\Modifier\\Pool&quot;&gt; &lt;arguments&gt; &lt;argument name=&quot;modifiers&quot; xsi:type=&quot;array&quot;&gt; &lt;item name=&quot;esd&quot; xsi:type=&quot;array&quot;&gt; &lt;item name=&quot;class&quot; xsi:type=&quot;string&quot;&gt;Silk\\AdvancedEstimatedShippingDate\\Ui\\DataProvider\\Product\\Form\\Modifier\\esd&lt;/item&gt; &lt;item name=&quot;sortOrder&quot; xsi:type=&quot;number&quot;&gt;10&lt;/item&gt; &lt;/item&gt; &lt;/argument&gt; &lt;/arguments&gt; &lt;/virtualType&gt;&lt;/config&gt; 接下来修改modifyMeta 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889//Silk\\AdvancedEstimatedShippingDate\\Ui\\DataProvider\\Product\\Form\\Modifier\\esd&lt;?php/** * Created by PhpStorm. * User: dyl * Date: 18-4-17 * Time: 下午4:31 */namespace Silk\\AdvancedEstimatedShippingDate\\Ui\\DataProvider\\Product\\Form\\Modifier;use Magento\\Framework\\Stdlib\\ArrayManager;class esd implements \\Magento\\Ui\\DataProvider\\Modifier\\ModifierInterface&#123; /** * Container fieldset prefix */ const CONTAINER_PREFIX = &#x27;container_&#x27;; /** * @var ArrayManager */ protected $arrayManager; /** * esd constructor. * @param ArrayManager $arrayManager */ public function __construct(ArrayManager $arrayManager) &#123; $this-&gt;arrayManager = $arrayManager; &#125; /** * @param array $data * @return array */ public function modifyData(array $data) &#123; return $data; &#125; /** * @param array $meta * @return array */ public function modifyMeta(array $meta) &#123; $fieldCode = &#x27;esd&#x27;; $elementPath = $this-&gt;arrayManager-&gt;findPath($fieldCode, $meta, null, &#x27;children&#x27;); $containerPath = $this-&gt;arrayManager-&gt;findPath(static::CONTAINER_PREFIX . $fieldCode, $meta, null, &#x27;children&#x27;); if (!$elementPath) &#123; return $meta; &#125; $meta = $this-&gt;arrayManager-&gt;merge( $containerPath, $meta, [ &#x27;arguments&#x27; =&gt; [ &#x27;data&#x27; =&gt; [ &#x27;config&#x27; =&gt; [ &#x27;formElement&#x27; =&gt; &#x27;container&#x27;, &#x27;componentType&#x27; =&gt; &#x27;container&#x27;, &#x27;breakLine&#x27; =&gt; false, &#x27;label&#x27; =&gt; __(&#x27;ESD&#x27;), &#x27;required&#x27; =&gt; 0, &#x27;sortOrder&#x27; =&gt; 320, &#x27;scopeLabel&#x27; =&gt; __(&#x27;[STORE VIEW]&#x27;), ], ], ], &#x27;children&#x27; =&gt; [ $fieldCode =&gt; [ &#x27;arguments&#x27; =&gt; [ &#x27;data&#x27; =&gt; [ &#x27;config&#x27; =&gt; [ &#x27;dataType&#x27; =&gt; &#x27;multiselect&#x27;, &#x27;formElement&#x27; =&gt; &#x27;multiselect&#x27;, &#x27;elementTmpl&#x27; =&gt; &#x27;Silk_AdvancedEstimatedShippingDate/ui/form/element/multiselect&#x27; ], ], ], ], ] ] ); return $meta; &#125;&#125; 最后加上template文件 12345678910111213141516171819202122232425&lt;!-- Silk/AdvancedEstimatedShippingDate/view/base/web/template/ui/form/element/multiselect.html--&gt;&lt;!--/** * Copyright © 2013-2017 Magento, Inc. All rights reserved. * See COPYING.txt for license details. */--&gt;&lt;select multiple class=&quot;admin__control-multiselect&quot; data-bind=&quot; attr: &#123; name: inputName, id: uid, size: size ? size : &#x27;6&#x27;, disabled: true, &#x27;aria-describedby&#x27;: noticeId, placeholder: placeholder &#125;, hasFocus: focused, optgroup: options, selectedOptions: value, optionsValue: &#x27;value&#x27;, optionsText: &#x27;label&#x27;&quot;/&gt;","tags":[{"name":"magento2","slug":"magento2","permalink":"http://www.jiliuke.com/tags/magento2/"}]},{"title":"在Ubuntu下如何获取超级用户权限","date":"2015-08-11T01:59:52.000Z","path":"2015/08/11/e5-9c-a8ubuntu-e4-b8-8b-e5-a6-82-e4-bd-95-e8-8e-b7-e5-8f-96-e8-b6-85-e7-ba-a7-e7-94-a8-e6-88-b7-e6-9d-83-e9-99-90/","text":"由于 Ubuntu 是基于 Debian 的 linux 操作系统，在默认的情况下，是没有超级用户（superuser， root）的，但有些系统操作必须有超级用户的权限才能进行，如手动释放内存等。 在其他 linux 操作系统（如 fedora）下，可以使用 su 切换到超级用户。 当输入 su 命令后，系统会要求输入 root 的密码。 可是，在 Ubuntu 下我们根本不知道 root 的密码是什么。 这样，在 Ubuntu 下切换到超级用户需要使用其他方法，主要有两种： 1） sudo -i sudo 是 su 的加强版，意思是 do something as the supervisor。不需要密码就可以得到 root 的权限。 但是它也有很多限制，比如，在默认的情况下，只能在 5 分钟之内使用 root 权限。 2）如果想一直使用 root 权限，还是要使用 su，还是要得到 root 密码的。 用 sudo passwd root 可以设置 root 的密码。 之后就可以自由使用 su 命令啦。","tags":[]},{"title":"探讨PHP函数ip2long转换IP时数值太大产生负数的解决方法","date":"2015-08-11T01:58:56.000Z","path":"2015/08/11/e6-8e-a2-e8-ae-a8php-e5-87-bd-e6-95-b0ip2long-e8-bd-ac-e6-8d-a2ip-e6-97-b6-e6-95-b0-e5-80-bc-e5-a4-aa-e5-a4-a7-e4-ba-a7-e7-94-9f-e8-b4-9f-e6-95-b0-e7-9a-84-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95/","text":"本篇文章是对PHP函数ip2long转换IP时数值太大产生负数的解决方法进行了详细的分析介绍，需要的朋友参考下 【造成原因】：Because PHP’s integer type is signed, and many IP addresses will result in negative integers. 【解决办法】：其官方手册中提到，可以“you need to use the “%u” formatter of sprintf() or printf() to get the string representation of the unsigned IP address” 即，printf( ‘%u’,ip2long(‘IP地址’ ) ); 或者将其先转换为二进制然后在转换为十进制，bindec(decbinip2long( ‘IP地址’ ) ) ); 【测试】 $strIp = &#39;182.118.0.0&#39;; echo ip2long($strIp); //此时输出的-1233780736 echo &#39;br/&#39;; echo bindec( decbin( ip2long( $strIp ) ) ); // 输出3061186560，与MySQL函数输出一致~ 【注】： number bindec ( string $binary_string ); //二进制转换为十进制 string decbin ( int $number ); //十进制转换为二进制","tags":[{"name":"PHP","slug":"PHP","permalink":"http://www.jiliuke.com/tags/PHP/"},{"name":"ip2long","slug":"ip2long","permalink":"http://www.jiliuke.com/tags/ip2long/"}]},{"title":"xunsearch同义词管理","date":"2015-08-11T01:58:09.000Z","path":"2015/08/11/xunsearch-e5-90-8c-e4-b9-89-e8-af-8d-e7-ae-a1-e7-90-86/","text":"Indexer.php 添加同义词 添加同义词通过带参数的选项 --add-synonym 来实现，参数值为单条或多条同义词记录，每条记录之间用冒号(:) 分隔原词和同义词，多条记录之间用逗号分割。您可以对同一个“原词”增加多个不同的“同义词”， 如果库内已存在完全一致的记录，则指令不起作用也不会报错。用法如下： # 给 search 增加同义词 findutil/Indexer.php demo –add-synonym search:find # 再给 search 增加另一个同义词 seekutil/Indexer.php demo –add-synonym search:seek # 给 “搜索” 增加 “检索” “查找” 两个同义词util/Indexer.php demo -add-synonym 搜索:检索,搜索:查找 # 给 “Hello world” 增加同义词 “你好”，参数含空格请用引号包围util/Indexer.php demo –add-synonym “Hello world:你好” 删除同义词删除同义词作法和添加同义词很相似，只不过采用选项 --del-synonym，同时参数中的同义词可以 省略表示删除该“原词”的所有同义词记录。用法如下： # 删除 search 的全部同义词、同时删除 “搜索” 的同义词 “检索”util/Indexer.php demo –del-synonym search,搜索:检索","tags":[{"name":"PHP","slug":"PHP","permalink":"http://www.jiliuke.com/tags/PHP/"},{"name":"xunsearch","slug":"xunsearch","permalink":"http://www.jiliuke.com/tags/xunsearch/"}]},{"title":"Android中invalidate() 函数详解(结合Android 4.0.4 最新源码)","date":"2015-08-11T01:57:13.000Z","path":"2015/08/11/android-e4-b8-adinvalidate-e5-87-bd-e6-95-b0-e8-af-a6-e8-a7-a3-e7-bb-93-e5-90-88android-4-0-4-e6-9c-80-e6-96-b0-e6-ba-90-e7-a0-81/","text":"invalidate()函数的主要作用是请求View树进行重绘，该函数可以由应用程序调用，或者由系统函数间接调用，例如setEnable(), setSelected(), setVisiblity()都会间接调用到invalidate()来请求View树重绘，更新View树的显示。 注：requestLayout()和requestFocus()函数也会引起视图重绘 下面我们通过源码来了解invalidate()函数的工作原理，首先我们来看View类中invalidate()的实现过程： [java] view plaincopy /** * Invalidate the whole view. If the view is visible, * {@link #onDraw(android.graphics.Canvas)} will be called at some point in * the future. This must be called from a UI thread. To call from a non-UI thread, * call {@link #postInvalidate()}. */ public void invalidate() { invalidate(true); } invalidate()函数会转而调用invalidate(true)，继续往下看： [java] view plaincopy /** * This is where the invalidate() work actually happens. A full invalidate() * causes the drawing cache to be invalidated, but this function can be called with * invalidateCache set to false to skip that invalidation step for cases that do not * need it (for example, a component that remains at the same dimensions with the same * content). * * @param invalidateCache Whether the drawing cache for this view should be invalidated as * well. This is usually true for a full invalidate, but may be set to false if the * View’s contents or dimensions have not changed. */ void invalidate(boolean invalidateCache) { if (ViewDebug.TRACE_HIERARCHY) { ViewDebug.trace(this, ViewDebug.HierarchyTraceType.INVALIDATE); } if (skipInvalidate()) { return; } if ((mPrivateFlags &amp; (DRAWN | HAS_BOUNDS)) == (DRAWN | HAS_BOUNDS) || (invalidateCache &amp;&amp; (mPrivateFlags &amp; DRAWING_CACHE_VALID) == DRAWING_CACHE_VALID) || (mPrivateFlags &amp; INVALIDATED) != INVALIDATED || isOpaque() != mLastIsOpaque) { mLastIsOpaque = isOpaque(); mPrivateFlags &amp;= ~DRAWN; mPrivateFlags |= DIRTY; if (invalidateCache) { mPrivateFlags |= INVALIDATED; mPrivateFlags &amp;= ~DRAWING_CACHE_VALID; } final AttachInfo ai = mAttachInfo; final ViewParent p = mParent; //noinspection PointlessBooleanExpression,ConstantConditions if (!HardwareRenderer.RENDER_DIRTY_REGIONS) { if (p != null &amp;&amp; ai != null &amp;&amp; ai.mHardwareAccelerated) { // fast-track for GL-enabled applications; just invalidate the whole hierarchy // with a null dirty rect, which tells the ViewAncestor to redraw everything p.invalidateChild(this, null); return; } } if (p != null &amp;&amp; ai != null) { final Rect r = ai.mTmpInvalRect; r.set(0, 0, mRight - mLeft, mBottom - mTop); // Don’t call invalidate – we don’t want to internally scroll // our own bounds p.invalidateChild(this, r); } } } 下面我们来具体进行分析invalidate(true)函数的执行流程： 1、首先调用skipInvalidate()，该函数主要判断该View是否不需要重绘，如果不许要重绘则直接返回，不需要重绘的条件是该View不可见并且未进行动画 2、接下来的if语句是来进一步判断View是否需要绘制，其中表达式 (mPrivateFlags &amp; (DRAWN | HAS_BOUNDS)) == (DRAWN | HAS_BOUNDS)的意思指的是如果View需要重绘并且其大小不为0，其余几个本人也未完全理解，还望高手指点～～如果需要重绘，则处理相关标志位 3、对于开启硬件加速的应用程序，则调用父视图的invalidateChild函数绘制整个区域，否则只绘制dirty区域（r变量所指的区域），这是一个向上回溯的过程，每一层的父View都将自己的显示区域与传入的刷新Rect做交集。 接下来看invalidateChild()的 实现过程： [java] view plaincopy public final void invalidateChild(View child, final Rect dirty) { if (ViewDebug.TRACE_HIERARCHY) { ViewDebug.trace(this, ViewDebug.HierarchyTraceType.INVALIDATE_CHILD); } ViewParent parent = this; final AttachInfo attachInfo = mAttachInfo; if (attachInfo != null) { // If the child is drawing an animation, we want to copy this flag onto // ourselves and the parent to make sure the invalidate request goes // through final boolean drawAnimation = (child.mPrivateFlags &amp; DRAW_ANIMATION) == DRAW_ANIMATION; if (dirty == null) { if (child.mLayerType != LAYER_TYPE_NONE) { mPrivateFlags |= INVALIDATED; mPrivateFlags &amp;= ~DRAWING_CACHE_VALID; child.mLocalDirtyRect.setEmpty(); } do { View view = null; if (parent instanceof View) { view = (View) parent; if (view.mLayerType != LAYER_TYPE_NONE) { view.mLocalDirtyRect.setEmpty(); if (view.getParent() instanceof View) { final View grandParent = (View) view.getParent(); grandParent.mPrivateFlags |= INVALIDATED; grandParent.mPrivateFlags &amp;= ~DRAWING_CACHE_VALID; } } if ((view.mPrivateFlags &amp; DIRTY_MASK) != 0) { // already marked dirty - we’re done break; } } if (drawAnimation) { if (view != null) { view.mPrivateFlags |= DRAW_ANIMATION; } else if (parent instanceof ViewRootImpl) { ((ViewRootImpl) parent).mIsAnimating = true; } } if (parent instanceof ViewRootImpl) { ((ViewRootImpl) parent).invalidate(); parent = null; } else if (view != null) { if ((view.mPrivateFlags &amp; DRAWN) == DRAWN || (view.mPrivateFlags &amp; DRAWING_CACHE_VALID) == DRAWING_CACHE_VALID) { view.mPrivateFlags &amp;= ~DRAWING_CACHE_VALID; view.mPrivateFlags |= DIRTY; parent = view.mParent; } else { parent = null; } } } while (parent != null); } else { // Check whether the child that requests the invalidate is fully opaque final boolean isOpaque = child.isOpaque() &amp;&amp; !drawAnimation &amp;&amp; child.getAnimation() == null; // Mark the child as dirty, using the appropriate flag // Make sure we do not set both flags at the same time int opaqueFlag = isOpaque ? DIRTY_OPAQUE : DIRTY; if (child.mLayerType != LAYER_TYPE_NONE) { mPrivateFlags |= INVALIDATED; mPrivateFlags &amp;= ~DRAWING_CACHE_VALID; child.mLocalDirtyRect.union(dirty); } final int[] location = attachInfo.mInvalidateChildLocation; location[CHILD_LEFT_INDEX] = child.mLeft; location[CHILD_TOP_INDEX] = child.mTop; Matrix childMatrix = child.getMatrix(); if (!childMatrix.isIdentity()) { RectF boundingRect = attachInfo.mTmpTransformRect; boundingRect.set(dirty); //boundingRect.inset(-0.5f, -0.5f); childMatrix.mapRect(boundingRect); dirty.set((int) (boundingRect.left - 0.5f), (int) (boundingRect.top - 0.5f), (int) (boundingRect.right + 0.5f), (int) (boundingRect.bottom + 0.5f)); } do { View view = null; if (parent instanceof View) { view = (View) parent; if (view.mLayerType != LAYER_TYPE_NONE &amp;&amp; view.getParent() instanceof View) { final View grandParent = (View) view.getParent(); grandParent.mPrivateFlags |= INVALIDATED; grandParent.mPrivateFlags &amp;= ~DRAWING_CACHE_VALID; } } if (drawAnimation) { if (view != null) { view.mPrivateFlags |= DRAW_ANIMATION; } else if (parent instanceof ViewRootImpl) { ((ViewRootImpl) parent).mIsAnimating = true; } } // If the parent is dirty opaque or not dirty, mark it dirty with the opaque // flag coming from the child that initiated the invalidate if (view != null) { if ((view.mViewFlags &amp; FADING_EDGE_MASK) != 0 &amp;&amp; view.getSolidColor() == 0) { opaqueFlag = DIRTY; } if ((view.mPrivateFlags &amp; DIRTY_MASK) != DIRTY) { view.mPrivateFlags = (view.mPrivateFlags &amp; ~DIRTY_MASK) | opaqueFlag; } } parent = parent.invalidateChildInParent(location, dirty); if (view != null) { // Account for transform on current parent Matrix m = view.getMatrix(); if (!m.isIdentity()) { RectF boundingRect = attachInfo.mTmpTransformRect; boundingRect.set(dirty); m.mapRect(boundingRect); dirty.set((int) boundingRect.left, (int) boundingRect.top, (int) (boundingRect.right + 0.5f), (int) (boundingRect.bottom + 0.5f)); } } } while (parent != null); } } } 大概流程如下，我们主要关注dirty区域不是null（非硬件加速）的情况： 1、判断子视图是否是不透明的（不透明的条件是isOpaque()返回true，视图未进行动画以及child.getAnimation() == null），并将判断结果保存到变量isOpaque中，如果不透明则将变量opaqueFlag设置为DIRTY_OPAQUE，否则设置为DIRTY。 2、定义location保存子视图的左上角坐标 3、如果子视图正在动画，那么父视图也要添加动画标志，如果父视图是ViewGroup，那么给mPrivateFlags添加DRAW_ANIMATION标识，如果父视图是ViewRoot，则给其内部变量mIsAnimating赋值为true 4、设置dirty标识，如果子视图是不透明的，则父视图设置为DIRTY_OPAQUE，否则设置为DIRTY 5、调用parent.invalidateChildInparent()，这里的parent有可能是ViewGroup，也有可能是ViewRoot（最后一次while循环），首先来看ViewGroup, ViewGroup中该函数的主要作用是对dirty区域进行计算 以上过程的主体是一个do{}while{}循环，不断的将子视图的dirty区域与父视图做运算来确定最终要重绘的dirty区域，最终循环到ViewRoot（ViewRoot的parent为null）为止，并将dirty区域保存到ViewRoot的mDirty变量中 [java] view plaincopy /** * Don’t call or override this method. It is used for the implementation of * the view hierarchy. * * This implementation returns null if this ViewGroup does not have a parent, * if this ViewGroup is already fully invalidated or if the dirty rectangle * does not intersect with this ViewGroup’s bounds. */ public ViewParent invalidateChildInParent(final int[] location, final Rect dirty) { if (ViewDebug.TRACE_HIERARCHY) { ViewDebug.trace(this, ViewDebug.HierarchyTraceType.INVALIDATE_CHILD_IN_PARENT); } if ((mPrivateFlags &amp; DRAWN) == DRAWN || (mPrivateFlags &amp; DRAWING_CACHE_VALID) == DRAWING_CACHE_VALID) { if ((mGroupFlags &amp; (FLAG_OPTIMIZE_INVALIDATE | FLAG_ANIMATION_DONE)) != FLAG_OPTIMIZE_INVALIDATE) { dirty.offset(location[CHILD_LEFT_INDEX] - mScrollX, location[CHILD_TOP_INDEX] - mScrollY); final int left = mLeft; final int top = mTop; if ((mGroupFlags &amp; FLAG_CLIP_CHILDREN) != FLAG_CLIP_CHILDREN || dirty.intersect(0, 0, mRight - left, mBottom - top) || (mPrivateFlags &amp; DRAW_ANIMATION) == DRAW_ANIMATION) { mPrivateFlags &amp;= ~DRAWING_CACHE_VALID; location[CHILD_LEFT_INDEX] = left; location[CHILD_TOP_INDEX] = top; if (mLayerType != LAYER_TYPE_NONE) { mLocalDirtyRect.union(dirty); } return mParent; } } else { mPrivateFlags &amp;= ~DRAWN &amp; ~DRAWING_CACHE_VALID; location[CHILD_LEFT_INDEX] = mLeft; location[CHILD_TOP_INDEX] = mTop; if ((mGroupFlags &amp; FLAG_CLIP_CHILDREN) == FLAG_CLIP_CHILDREN) { dirty.set(0, 0, mRight - mLeft, mBottom - mTop); } else { // in case the dirty rect extends outside the bounds of this container dirty.union(0, 0, mRight - mLeft, mBottom - mTop); } if (mLayerType != LAYER_TYPE_NONE) { mLocalDirtyRect.union(dirty); } return mParent; } } return null; } 该函数首先调用offset将子视图的坐标位置转换为在父视图（当前视图）的显示位置，这里主要考虑scroll后导致子视图在父视图中的显示区域会发生变化，接着调用union函数求得当前视图与子视图的交集,求得的交集必定是小于dirty的范围，因为子视图的dirty区域有可能超出其父视图（当前视图）的范围，最后返回当前视图的父视图。 再来看ViewRoot中invalidateChildInparent的执行过程： [java] view plaincopy public ViewParent invalidateChildInParent(final int[] location, final Rect dirty) { invalidateChild(null, dirty); return null; } 该函数仅仅调用了ViewRoot的invalidateChild，下面继续看invalidateChild的源码： [java] view plaincopy public void invalidateChild(View child, Rect dirty) { checkThread(); if (DEBUG_DRAW) Log.v(TAG, “Invalidate child: “ + dirty); if (dirty == null) { // Fast invalidation for GL-enabled applications; GL must redraw everything invalidate(); return; } if (mCurScrollY != 0 || mTranslator != null) { mTempRect.set(dirty); dirty = mTempRect; if (mCurScrollY != 0) { dirty.offset(0, -mCurScrollY); } if (mTranslator != null) { mTranslator.translateRectInAppWindowToScreen(dirty); } if (mAttachInfo.mScalingRequired) { dirty.inset(-1, -1); } } if (!mDirty.isEmpty() &amp;&amp; !mDirty.contains(dirty)) { mAttachInfo.mSetIgnoreDirtyState = true; mAttachInfo.mIgnoreDirtyState = true; } mDirty.union(dirty); if (!mWillDrawSoon) { scheduleTraversals(); } } 具体分析如下： 1、判断此次调用是否在UI线程中进行 2、将dirty的坐标位置转换为ViewRoot的屏幕显示区域 3、更新mDirty变量，并调用scheduleTraversals发起重绘请求 至此一次invalidate()就结束了 总结：invalidate主要给需要重绘的视图添加DIRTY标记，并通过和父视图的矩形运算求得真正需要绘制的区域，并保存在ViewRoot中的mDirty变量中，最后调用scheduleTraversals发起重绘请求，scheduleTraversals会发送一个异步消息，最终调用performTraversals()执行重绘，performTraversals()的具体过程以后再分析。 以上所有代码基于Android 4.0.4，并结合《Android内核剖析》分析总结而成，源码中涉及到的部分细节本人也未完全理解，还望高手指点~~","tags":[{"name":"android","slug":"android","permalink":"http://www.jiliuke.com/tags/android/"},{"name":"invalidate","slug":"invalidate","permalink":"http://www.jiliuke.com/tags/invalidate/"}]},{"title":"稍显复杂sql语句的用法","date":"2015-08-11T01:56:13.000Z","path":"2015/08/11/e7-a8-8d-e6-98-be-e5-a4-8d-e6-9d-82sql-e8-af-ad-e5-8f-a5-e7-9a-84-e7-94-a8-e6-b3-95/","text":"select case order_state when ‘0’ then ‘已取消’ when ‘10’ then ‘已下单’ when ‘20’ then if(payment_code = ‘offline’,’货到付款’,’已付款’) when ‘30’ then ‘已发货’ when ‘40’ then ‘已完成’ end from shopnc_order;","tags":[]},{"title":"mantisbt TIPS","date":"2015-08-11T01:55:34.000Z","path":"2015/08/11/mantisbt-tips/","text":"1.修改成中文 $g_default_language = ‘english’;//582 修改成 $g_default_language = ‘chinese_simplified’; 2.管理员添加可直接弄密码 $g_send_reset_password = ON;//257 修改成 $g_send_reset_password = OFF;","tags":[{"name":"mantisbt","slug":"mantisbt","permalink":"http://www.jiliuke.com/tags/mantisbt/"}]},{"title":"创建数据库指定字符集","date":"2015-08-11T01:54:33.000Z","path":"2015/08/11/e5-88-9b-e5-bb-ba-e6-95-b0-e6-8d-ae-e5-ba-93-e6-8c-87-e5-ae-9a-e5-ad-97-e7-ac-a6-e9-9b-86/","text":"create database bugtracker default character set=utf8;","tags":[{"name":"MYSQL","slug":"MYSQL","permalink":"http://www.jiliuke.com/tags/MYSQL/"}]},{"title":"centos支持rar解压","date":"2015-08-11T01:53:50.000Z","path":"2015/08/11/centos-e6-94-af-e6-8c-81rar-e8-a7-a3-e5-8e-8b/","text":"添加centos系统对rar文件的支持。 [root@localhost ~]# wget http://www.rarsoft.com/rar/rarlinux-4.0.1.tar.gz [root@localhost ~]# tar -zxvf rarlinux-4.0.1.tar.gz rar/ rar/readme.txt rar/default.sfx rar/whatsnew.txt rar/license.txt rar/order.htm rar/rar rar/unrar rar/rar_static rar/technote.txt rar/rarfiles.lst rar/makefile rar/rar.txt [root@localhost ~]# cd rar [root@localhost rar]# make mkdir -p /usr/local/bin mkdir -p /usr/local/lib cp rar unrar /usr/local/bin cp rarfiles.lst /etc cp default.sfx /usr/local/lib [root@localhost rar]# rar x moumou.rar -bash: /usr/local/bin/rar: /lib/ld-linux.so.2: bad ELF interpreter: No such file or directory 处理这个问题 [root@localhost rar]# cp rar_static /usr/local/bin/rar cp: overwrite `/usr/local/bin/rar’? y 已可以正常解压 root@localhost rar]# rar x moumou.rar RAR 4.01 Copyright (c) 1993-2011 Alexander Roshal 28 May 2011 Shareware version Type RAR -? for help Extracting from moumou.rar Creating moumou OK Creating moumou/css OK Extracting moumou/css/default.css OK","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"rar","slug":"rar","permalink":"http://www.jiliuke.com/tags/rar/"}]},{"title":"中文传值火狐、google浏览器无问题，但IE有乱码问题的解决","date":"2015-08-11T01:53:22.000Z","path":"2015/08/11/e4-b8-ad-e6-96-87-e4-bc-a0-e5-80-bc-e7-81-ab-e7-8b-90-e3-80-81google-e6-b5-8f-e8-a7-88-e5-99-a8-e6-97-a0-e9-97-ae-e9-a2-98-ef-bc-8c-e4-bd-86ie-e6-9c-89-e4-b9-b1-e7-a0-81-e9-97-ae-e9-a2-98-e7-9a-84/","text":"encodeURI(uriname) //uriname为中文字符","tags":[]},{"title":"mysql 搜索按照in中顺序排序","date":"2015-08-11T01:52:38.000Z","path":"2015/08/11/mysql-e6-90-9c-e7-b4-a2-e6-8c-89-e7-85-a7in-e4-b8-ad-e9-a1-ba-e5-ba-8f-e6-8e-92-e5-ba-8f/","text":"select * from shopnc_order where order_id in (1225,1228,1231,1233) order by FIND_IN_SET(order_id,’1228,1225,1231,1233’);","tags":[{"name":"MYSQL","slug":"MYSQL","permalink":"http://www.jiliuke.com/tags/MYSQL/"}]},{"title":"centos 安装sensors查看cpu温度","date":"2015-08-11T01:52:08.000Z","path":"2015/08/11/centos-e5-ae-89-e8-a3-85sensors-e6-9f-a5-e7-9c-8bcpu-e6-b8-a9-e5-ba-a6/","text":"root#:yum -y install lm_sensors root#:sensors 如果提示No sensors found 运行： root#:sensors-detect 一路回车就行了","tags":[{"name":"lm_sensors","slug":"lm-sensors","permalink":"http://www.jiliuke.com/tags/lm-sensors/"},{"name":"sensors","slug":"sensors","permalink":"http://www.jiliuke.com/tags/sensors/"}]},{"title":"Centos Shell编程入门","date":"2015-08-11T01:51:14.000Z","path":"2015/08/11/centos-shell-e7-bc-96-e7-a8-8b-e5-85-a5-e9-97-a8/","text":"从程序员的角度来看， Shell本身是一种用C语言编写的程序，从用户的角度来看，Shell是用户与Linux操作系统沟通的桥梁。用户既可以输入命令执行，又可以利用 Shell脚本编程，完成更加复杂的操作。在Linux GUI日益完善的今天，在系统管理等领域，Shell编程仍然起着不可忽视的作用。深入地了解和熟练地掌握Shell编程，是每一个Linux用户的必修 功课之一。 Linux的Shell种类众多，常见的有：Bourne Shell（/usr/bin/sh或/bin/sh）、Bourne Again Shell（/bin/bash）、C Shell（/usr/bin/csh）、K Shell（/usr/bin/ksh）、Shell for Root（/sbin/sh），等等。不同的Shell语言的语法有所不同，所以不能交换使用。每种Shell都有其特色之处，基本上，掌握其中任何一种 就足够了。在本文中，我们关注的重点是Bash，也就是Bourne Again Shell，由于易用和免费，Bash在日常工作中被广泛使用；同时，Bash也是大多数Linux系统默认的Shell。在一般情况下，人们并不区分 Bourne Shell和Bourne Again Shell，所以，在下面的文字中，我们可以看到#!/bin/sh，它同样也可以改为#!/bin/bash。 利用vi等文本编辑器编写Shell脚本的格式是固定的，如下： #!/bin/sh #comments Your commands go here 首行中的符号#!告诉系统其后路径所指定的程序即是解释此脚本文件的Shell程 序。如果首行没有这句话，在执行脚本文件的时候，将会出现错误。后续的部分就是主程序，Shell脚本像高级语言一样，也有变量赋值，也有控制语句。除第 一行外，以#开头的行就是注释行，直到此行的结束。如果一行未完成，可以在行尾加上”，这个符号表明下一行与此行会合并为同一行。 编辑完毕，将脚本存盘为filename.sh，文件名后缀sh表明这是一个Bash脚本文件。执行脚本的时候，要先将脚本文件的属性改为可执行的： chmod +x filename.sh 执行脚本的方法是： ./filename.sh 下面我们从经典的“hello world”入手，看一看最简单的Shell脚本的模样。 #!/bin/sh #print hello world in the console window a = “hello world” echo $a Shell Script是一种弱类型语言，使用变量的时候无需首先声明其类型。新的变量会在本地数据区分配内存进行存储，这个变量归当前的Shell所有，任何子进 程都不能访问本地变量。这些变量与环境变量不同，环境变量被存储在另一内存区，叫做用户环境区，这块内存中的变量可以被子进程访问。变量赋值的方式是： variable_name = variable_value 如果对一个已经有值的变量赋值，新值将取代旧值。取值的时候要在变量名前加$，$variable_name可以在引号中使用，这一点和其他高级语言是明显不同的。如果出现混淆的情况，可以使用花括号来区分，例如： echo “Hi, $as” 就不会输出“Hi, hello worlds”，而是输出“Hi，”。这是因为Shell把$as当成一个变量，而$as未被赋值，其值为空。正确的方法是： echo “Hi, ${a}s” 单引号中的变量不会进行变量替换操作。 关于变量，还需要知道几个与其相关的Linux命令。 env用于显示用户环境区中的变量及其取值；set用于显示本地数据区和用户环境区中的变量及其取值；unset用于删除指定变量当前的取值，该值将被指定为NULL；export命令用于将本地数据区中的变量转移到用户环境区。 下面我们来看一个更复杂的例子，结合这个例子，我们来讲述Shell Script的语法。 {C} 1 #!/bin/bash 2 # we have less than 3 arguments. Print the help text: 3 if [ $# -lt 3 ]; then 4 cat&lt;&lt;HELP 5 ren – renames a number of files using sed regular expressions 6 7 USAGE: ren ‘regexp’ ‘replacement’ files 8 EXAMPLE: rename all .HTM files in *.html: 9 ren ‘HTM$’ ‘html’ *.HTM 10 11 HELP 12 exit 0 13 fi 14 OLD=”$1” 15 NEW=”$2” 16 # The shift command removes one argument from the list of 17 # command line arguments. 18 shift 19 shift 20 # $ contains now all the files: 21 for file in $*; do 22 if [ -f “$file” ]; then 23 newfile=`echo “$file” | sed “s/${OLD}/${NEW}/g”` 24 if [ -f “$newfile” ]; then 25 echo “ERROR: $newfile exists already” 26 else 27 echo “renaming $file to $newfile “ 28 mv “$file” “$newfile” 29 fi 30 fi 31 done 我们从头来看，前面两行上一个例子中已经解释过了，从第三行开始，有新的内容。if语句和其他编程语言相似，都是流程控制语句。它的语法是： if …; then … elif …; then … else … fi 与其他语言不同，Shell Script中if语句的条件部分要以分号来分隔。第三行中的[]表示条件测试，常用的条件测试有下面几种： [ -f “$file” ] 判断$file是否是一个文件 [ $a -lt 3 ] 判断$a的值是否小于3，同样-gt和-le分别表示大于或小于等于 [ -x “$file” ] 判断$file是否存在且有可执行权限，同样-r测试文件可读性 [ -n “$a” ] 判断变量$a是否有值，测试空串用-z [ “$a” = “$b” ] 判断$a和$b的取值是否相等 [ cond1 -a cond2 ] 判断cond1和cond2是否同时成立，-o表示cond1和cond2有一成立 要注意条件测试部分中的空格。在方括号的两侧都有空格，在-f、-lt、=等符号两侧同样也有空格。如果没有这些空格，Shell解释脚本的时候就会出错。 $#表示包括$0在内的命令行参数的个数。在Shell中，脚本名称本身是$0，剩下的依次是$0、$1、$2…、${10}、${11}，等等。$*表示整个参数列表，不包括$0，也就是说不包括文件名的参数列表。 现在我们明白第三行的含义是如果脚本文件的参数少于三个，则执行if和fi语句之间 的内容。然后，从第四行到第十一行之间的内容在Shell Script编程中被称为Here文档，Here文档用于将多行文本传递给某一命令。Here文档的格式是以&lt;&lt;开始，后跟一个字符串，在 Here文档结束的时候，这个字符串同样也要出现，表示文档结束。在本例中，Here文档被输出给cat命令，也即将文档内容打印在屏幕上，起到显示帮助 信息的作用。 第十二行的exit是Linux的命令，表示退出当前进程。在Shell脚本中可以使用所有的Linux命令，利用上面的cat和exit，从一方面来说，熟练使用Linux命令也可以大大减少Shell脚本的长度。 十四、十五两句是赋值语句，分别将第一和第二参数赋值给变量OLD和NEW。紧接下来的两句是注释，注释下面的两条shift的作用是将参数列表中的第一个和第二个参数删除，后面的参数依次变为新的第一和第二参数，注意参数列表原本也不包括$0。 然后，自二十一行到三十一行是一个循环语句。Shell Script中的循环有下面几种格式： while [ cond1 ] &amp;&amp; { || } [ cond2 ] …; do … done for var in …; do … done for (( cond1; cond2; cond3 )) do … done until [ cond1 ] &amp;&amp; { || } [ cond2 ] …; do … done 在上面这些循环中，也可以使用类似C语言中的break和continue语句中断 当前的循环操作。第二十一行的循环是将参数列表中的参数一个一个地放入变量file中。然后进入循环，判断file是否为一个文件，如果是文件的话，则用 sed命令搜索和生成新的文件名。sed基本上可以看成一个查找替换程序，从标准输入，例如管道读入文本，并将结果输出到标准输出，sed使用正则表达式 进行搜索。在第二十三行中，backtick（`）的作用是取出两个backtick之间的命令输出结果，在这里，也就是将结果取出赋给变量 newfile。此后，判断newfile是否已经存在，否则就把file改成newfile。这样我们就明白这个脚本的作用了，Shell Script编写的其他脚本与此相似，只不过是语法和用法稍有不同而已。 通过这个例子我们明白了Shell Script的编写规则，但还有几件事情需要讲述一下。 第一个，除了if语句之外，Shell Script中也有类似C语言中多分支结构的case语句，它的语法是： case var in pattern 1 ) … ;; pattern 2 ) … ;; *) … ;; esac 我们再就下面一个例子，看看case语句的用法。 while getopts vc: OPTION do case $OPTION in c) COPIES=$OPTARG ehco “$COPIES”;; v) echo “suyang”;; \\?) exit 1;; esac done 上面的getopts类似于C语言提供的函数getopts，在Shell Script中，getopts经常和while语句联合起来使用。getopts的语法如下： getopts option_string variable option_string中包含一串单字符选项，若getopts在命令行参数中 发现了连字符，那么它会将连字符之后的字符与option_string进行比较，若匹配成功，则把变量variable的值设为该选项，若无匹配，则把 变量的值设为？。有时候，选项还会带一个值，例如-c5等，这时要在option_string中该选项字母后面加上一个冒号，getopts发现冒号 后，会读取该值，然后将该值放入特殊变量OPTARG中。这个命令比较复杂，如有需要，读者可以详细参阅Shell编写的相关资料。 上面这个循环的作用就是依次取出脚本名称后面的选项，进行处理，如果输入了非法选项，则进入”?指定的部分，退出脚本程序。 第二个，Bash提供了一种用于交互式应用的扩展select，用户可以从一组不同的值中进行选择。其语法如下： select var in …; do break; done 例如，下面这段程序的输出是： #!/bin/bash echo “Your choice?” select var in “a” “b” “c”; do break done echo $var —————————- Your choice? 1) a 2) b 3) c 第三，Shell Script中也可以使用自定义的函数，其语法形式如下： functionname() { … } 例如我们可以把上面第二个例子中第四到第十二行放入一个名为help函数体内，以后每次调用的时候直接写help即可。函数中处理函数调用参数的方法是，直接用上面讲过的$1、$2来分别表示第一、第二个参数，用$*表示参数列表。 第四，我们也可以在Shell下调试Shell Script脚本，当然最简单的方法就是用echo输出查看变量取值了。Bash也提供了真正的调试方法，就是执行脚本的时候用-x参数。 sh ?x filename.sh 这会执行脚本并显示脚本中所有变量的取值，也可以使用参数-n，它并不执行脚本，只是返回所有的语法错误。","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"shell","slug":"shell","permalink":"http://www.jiliuke.com/tags/shell/"}]},{"title":"NFS mount errors with \"clnt_create: RPC: Unknown host\" for CentOS 6","date":"2015-08-11T01:50:13.000Z","path":"2015/08/11/nfs-mount-errors-with-clnt-create-rpc-unknown-host-for-centos-6/","text":"When attempting to mount CentOS 6, my mount fails with clnt_create: RPC: Unknown host Diagnostic: If we do a more thorough diagnostic, this is the issue # showmount -e clnt_create: RPC: Unknown host # showmount -e localhost Export list for localhost: /export/my_data \\* Resolution: Taken from Redhat Site Implement forward and reverse lookups (A records and CNAME records) in DNS and have the system point towards the DNS servers. Implement for both IPv4 and IPv6.If unable to resolve DNS issues, change the /etc/hosts file from this: Change from ::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 To ::1 machine_hostname localhost localhost.localdomain localhost6 localhost6.localdomain6 Restart the NFS service and check on the showmount -e localhost and showmount -e and attempt to mount the share. # service nfs restart # showmount -e localhost # showmount -e","tags":[{"name":"RPC","slug":"RPC","permalink":"http://www.jiliuke.com/tags/RPC/"}]},{"title":"玩玩负载均衡---在window与linux下配置nginx","date":"2015-08-11T01:49:21.000Z","path":"2015/08/11/e7-8e-a9-e7-8e-a9-e8-b4-9f-e8-bd-bd-e5-9d-87-e8-a1-a1-e5-9c-a8window-e4-b8-8elinux-e4-b8-8b-e9-85-8d-e7-bd-aenginx/","text":"最近有些时间，开始接触负载均衡方面的东西，从硬件F5再到Citrix Netscalar。不过因为硬件的配置虽然不复杂，但昂贵的价格也让一般用户望而却步(十几万到几十万)，所以只能转向nginx,squid这类有反向代理功能的软件了。好在其设置都不是很麻烦。 本文就之前所做过的安装和配置步骤做一下总结分享出来，以免日后忘记了。 首先是windows系统，这里建议使用window 2003企业版，而不要作用win7（太新了，我遇到无法启动nginx的问题）。要说的是，在windows下配置安装nginx还是很容易的，少了linux下下载tar再配置编译参数等等步骤，我们只要从下面的地址下载相应的zip包(大约750kb)即可，地址如下： http://sysoev.ru/nginx/nginx-0.8.21.zip 需要说明的是这个下载包是nginx 0.8.21开发版，换句话说其只能用于搭建测试环境等用途的，不能用于实际的生产环境（受限于windows文件句柄数限制）。 下载并将该包中的文件解压到c盘上，为了配置使用方便，我将其解压后的文件夹名称从“nginx-0.8.19”改为”nginx”，这样我们只要将要负载均衡的站点在iis中设置好之后，将相应的链接地址放到nginx的相应配置文件中即可，这里我们打开C:\\nginx\\conf\\nginx.conf文件，将下面的内容放到该文件的“server { ”上方行处： upstream mylocalsite { server 10.0.2.137:8088; server 10.0.2.137:8089; } 因为nginx无法运行动态脚本，所以这里要使用proxy_pass属性进行代理，所以找到该配置文件的如下内容： location / { root html; index index.html index.htm; } 修改其内容如下： location / { proxy_pass http://mylocalsite; #proxy_set_header Host $host; #proxy_set_header X-Real-IP $remote_addr; ;#防止ajax安全请求问题 #proxy_set_header REMOTE-HOST $remote_addr; ;#防止ajax安全请求问题 } 修改完之后，还要修改一下server的侦听端口，原内容如下： server { listen 80; server_name localhost; …… 修改完后的内容如下： server { listen 8086; server_name 10.0.2.136; …… 这样,nginx就会在启动之后开始侦听本地IP（10.0.2.136）的8086端口请求，然后将其请求转向到mylocalsite 中所指定的两个iis站点，并将执行的结果转发给客户端。如果一切配置正确，这时可以运行 c:/nginx/nginx.exe （或在cmd下运行“start nginx”），就可以在任务管理器中看到一个nginx进程启动了。（注:如果配置文件有错误，可以到C:\\nginx\\logs\\error.log查看错误日志，进一步排错）。 注： 关闭ngnix的命令： nginx -s stop 配置文件ngnix.conf正确性判断的命令: nginx -t ** 当然Nginx 负载均衡**的功能也是很强的，并且其一般作为七层负载均衡（应用协议层）。下面就其upstream所支持的四个常用设置进行说明： 1)、轮询（默认）：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。 2)、weight ：指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 2)、ip_hash ：每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。 3)、fair（第三方）：按后端服务器的响应时间来分配请求，响应时间短的优先分配。 4)、url_hash（第三方） 按上面的说明，可以将之前我们的upstream做如下修改： upstream mylocalsite { #ip_hash; server 10.0.2.137:8088 weight=2; server 10.0.2.137:8089 weight=1; } 这个当来了三个http请求时，其中的两个会被分配到10.0.2.137:8088 上，一个分配到10.0.2.137:8089 。当然一开始可以其分摊的请求可以不是太严格按其设置，但当请求数多了之后，基本上就接近于我们分指派的权值了。当然就负载均衡的算法而言，使用weight只是其中的一种，而经常使用的还有许多，比如lvs就在其内部实现了多种的负载均衡算法，可以根据用户的实际环境进行设置布署。。当然就目前而言，nginx的算法相比较还是少了许多，呵呵。 可以说在windows下安装配置还是很方便的，但如果使用loadrunner做并发测试时，就会发现其logs/error.log就会报如下错误： maximum number of descriptors supported by select() is 1024 while connecting to upstream 我曾经在网上查过解决方案，包括修改配置文件的worker_connections ，如下: worker_rlimit_nofile 20240; events { #use epoll;//linux下使用 worker_connections 20240; } 但依旧不能将文件句柄数扩充到20240，还是报1024最大句柄数错误。最后实在没办法了，只得开始尝试在linux下安装配置nginx。也就引发了下面的内容。 其实在网上有关介绍如何在linux下安装nginx的要比windows下的要多得多，必定这是‘本家’吧。 因为之前网管只在虚拟机上安装了CentOS5，所以只能就尝试在该linux分支版本下安装了。好在虚拟机已安装完了，剩下的工作并不太多。 首先需要以root身份登陆系统，然后切换身份为超级管理员： sudo -s # 先成为超级管理员 然后进入到src目前下，并在当前目录下download nginx.tar.gz包 cd /usr/src # 将文件下载到这个目录 wget http://sysoev.ru/nginx/nginx-0.7.62.tar.gz# 下载安装包 tar xzvf nginx-0.7.62.tar.gz #解压 如果下载的nginx 中默认可能没有 rewirte规则，因此需要下载pcre包的扩展来实现这个功能： wget http://blog.s135.com/soft/linux/nginx_php/pcre/pcre-7.8.tar.gz # 下载pcre tar xzvf pcre-7.8.tar.gz # 解压pcre 下面编译安装pcre cd /usr/src/pcre-7.8; ./configure –prefix=/usr/local/pcre –enable-utf8 –enable-unicode-properties 下面编译安装nginx cd /usr/src/nginx-0.7.62 开始配置要编译的参数（注：内容较长，容易输错。具体参数设置参见http://wiki.codemongers.com/NginxChsInstall） ./configure –prefix=/usr/local/nginx –sbin-path=/usr/local/nginx/sbin/nginx –conf-path=/usr/local/nginx/conf/nginx.conf –error-log-path=/usr/local/nginx/logs/error.log –http-log-path=/usr/local/nginx/logs/access.log –pid-path=/usr/local/nginx/var/nginx.pid –lock-path=/usr/local/nginx/var/nginx.lock –http-client-body-temp-path=/dev/shm/nginx_temp/client_body –http-proxy-temp-path=/dev/shm/nginx_temp/proxy –without-http_rewrite_module –without-http-cache –without-http_map_module –without-http_gzip_module ＃使用debuginfo 信息–_with-debug_＃ 接下来就开始编译生成相应的文件了： make make install 然后/dev/shm 也就是内存中，建立一个nginx_temp文件夹 mkdir /dev/shm/nginx_temp 接着创建www用户和组，以及其使用的目录： /usr/sbin/groupadd www -g 48 /usr/sbin/useradd -u 48 -g www www mkdir -p /data0/vshare/htdocs chmod +w /data0/vshare/htdocs chown -R www:www /data0/vshare/htdocs 这时可以扩充一下文件句柄数（windows下就没这么容易扩展了，哎） ulimit -SHn 51200 #设置打开文件句柄 到这里，我们就可以使用linux下的vi编辑器编辑一下： cd /usr/src/nginx-0.7.62/conf/ vi nginx.conf 将之前在window下的修改内容替换(按下insert键进入到编辑模式)到当前的文件中，当修改完成了，按冒号（”:”）切换到命令模式下，然后敲入“wq”，保存并退出。(强制退出（不保存）的话，输入q!，然后回车) 注： events { use epoll; worker_connections 20240; } 注：use epoll; //linux下使用,更多内容参见NginxChsOptimizations 这样就可以运行nginx了： /usr/local/nginx/sbin/nginx -t –c 创建个软链接： $ sudo ln -s /user/local/nginx/sbin/nginx /usr/bin/nginx #之前安过的话要先删除sudo rm /usr/bin/nginx 启动完成后，可以通过如下指令查看其在内存中的运行信息： # ps aux | egrep ‘(PID|nginx)’ 这样当我们再使用loadrunner运行时，就可以看到error.log中就不再报那个恼人的“1024错误了”。 当然在nginx中，还支持文件缓存，以便于将那些静态文件缓存到本地的nginx服务器上，只不过要修改一下其config文件配置，如下： vi nginx.conf 在文件中的相应节点处输入如下内容: location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf|js|html|htm|css)$ { #指定缓存文件类型 expires 7d; #设置浏览器过期时间7天 root data/nginx_cache/iis; #静态文件根目录目录(必须对应proxy_temp_path) proxy_store on; #开启缓存机制 proxy_store_access user:rw group:rw all:rw; #缓存读写规则 proxy_temp_path data/nginx_cache/iis; #存放静态文件的缓存目录 # include proxy.conf; # 外联proxy理的详细配置如proxy_set_header， client_max_body_size . if (!-e $request_filename) { proxy_pass http://10.0.2.136;/ } } 这样就会在data/nginx_cache/iis目前下生成相应的gif,jpg等文件的临时信息，当客户端请求到来时，就会从该目录中检索相应文件绑定之后返回给客户端，以减轻iis服务器和网络带宽的压力。 最后附上一个我在那台Centos上的配置文件，大家可以对比参照一下，因为nginx本身提供的配置结点信息过多，更多信息可以参见这篇文章。 相关链接如下： 张宴 搭建胜过Apache十倍的Web服务器（第5版）[原创] 守住每一天（网名） nginx反向代理配置及优化 原文链接: http://www.cnblogs.com/daizhj/archive/2009/11/03/1595292.html 作者: daizhj, 代震军 Tags: nginx,负载均衡 网址: http://daizhj.cnblogs.com/","tags":[{"name":"负载均衡","slug":"负载均衡","permalink":"http://www.jiliuke.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"}]},{"title":"允许远端使用mysql","date":"2015-08-11T01:48:47.000Z","path":"2015/08/11/e5-85-81-e8-ae-b8-e8-bf-9c-e7-ab-af-e4-bd-bf-e7-94-a8mysql/","text":"mysql中敲命令 grant all privileges on . to ‘root’@’%’ identified by ‘123456’ with grant option;","tags":[{"name":"MYSQL","slug":"MYSQL","permalink":"http://www.jiliuke.com/tags/MYSQL/"}]},{"title":"sshd 登陆慢问题解决","date":"2015-08-11T01:47:33.000Z","path":"2015/08/11/sshd-e7-99-bb-e9-99-86-e6-85-a2-e9-97-ae-e9-a2-98-e8-a7-a3-e5-86-b3/","text":"修改客户端配置文件sshd_conf # vi /etc/ssh/sshd_conf 找到 GSSAPIAuthentication yes 改为 GSSAPIAuthentication no 如果没有，则创建","tags":[{"name":"sshd","slug":"sshd","permalink":"http://www.jiliuke.com/tags/sshd/"}]},{"title":"安装ssh","date":"2015-08-11T01:47:04.000Z","path":"2015/08/11/e5-ae-89-e8-a3-85ssh/","text":"yum -y install openssh","tags":[{"name":"ssh","slug":"ssh","permalink":"http://www.jiliuke.com/tags/ssh/"}]},{"title":"Linux 系统如何禁ping, CentOS 禁ping","date":"2015-08-11T01:46:23.000Z","path":"2015/08/11/linux-e7-b3-bb-e7-bb-9f-e5-a6-82-e4-bd-95-e7-a6-81ping-centos-e7-a6-81ping/","text":"Linux系统，CentOS操作系统如何设置禁止别人ping我们自己的服务器，下面给大家介绍一些常用的方法： 1、以root账户进入系统，然后编辑文件icmp_echo_ignore_all vi /proc/sys/net/ipv4/icmp_echo_ignore_all 0 表示允许ping 1 表示禁止ping 可以直接运行以下命令 [root@00isp ~]# echo 1 &gt;/proc/sys/net/ipv4/icmp_echo_ignore_all [root@00isp ~]# echo 0 &gt;/proc/sys/net/ipv4/icmp_echo_ignore_all 此上两条命令的效果实时生效，可以用另外的机器ping来测试是否生效。以上方式只是临时性的禁ping 重启后会失效，如果想要重启过后也不能ping可以做如下操作 /etc/rc.d/rc.local中增加一行 echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all 另外可以在配置文件 /etc/sysctl.conf 文件中增加一行 net.ipv4.icmp_echo_ignore_all=1 2、使用IPTables禁止PING echo “1” &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all 这下是别人不能ping你，你也不能ping别人，其实使用iptable最简单 iptables -A INPUT -p icmp –icmp-type 8 -s 0/0 -j DROP iptables -A INPUT -p icmp –icmp-type 0 -s 0/0 -j ACCEPT iptables -A OUTPUT -p icmp –icmp-type 0 -s 192.168.29.1 -j DROP iptables -A OUTPUT -p icmp –icmp-type 8 -s 192.168.29.1 -j ACCEPT","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"ping","slug":"ping","permalink":"http://www.jiliuke.com/tags/ping/"}]},{"title":"kill -HUP pid","date":"2015-08-11T01:45:42.000Z","path":"2015/08/11/kill-hup-pid/","text":"kill -HUP pid pid 是进程标识。如果想要更改配置而不需停止并重新启动服务，请使用该命令。在对配置文件作必要的更改后，发出该命令以动态更新服务配置。 根据约定，当您发送一个挂起信号（信号 1 或 HUP）时，大多数服务器进程（所有常用的进程）都会进行复位操作并重新加载它们的配置文件。清单 2 显示了向所有正在运行的 Web 服务器进程发送挂起信号的一种方法。 清单 2. 告诉 Web 服务器重新加载其配置文件并对文件进行复位操作 root@holy [507]$ ps -A | grep httpd | grep -v grep | awk ‘{ print $1; }’ | xargs -L 1 sudo kill -HUP 上面的命令中包含了很多的操作，所以让我们来仔细地看一下管道的每个部分。ps 和 grep 命令用来在所有的进程中搜索 httpd（并且忽略用来搜索 httpd 进程的 grep 进程）。接下来，awk 只显示输出结果中的进程 ID，并将它传递给 xargs。然后，xargs 命令接受每个进程 ID（因为使用了 -L 1 以便一次提取一行内容），并使用 sudo kill -HUP 向相应的进程发送一个挂起信号。 LINUX和Unix都适用： 改/etc/ssh/sshd_config，将里面的Port改为新端口，比如10022，然后 kill -HUP `cat /var/run/sshd.pid` 就行了。 现有连接自己不会断，因为kill -HUP `cat /var/run/sshd.pid` 只是HUP监听的那个，已经建立的连接（不同的 pid）不会断。 然后你在现有账号下面exit，在用新的端口登陆就可以了。 PS: HUP(1)是让进程挂起，睡眠; kill (9)六亲不认的杀掉 term(15)正常的退出进程 因为进程可能屏蔽某些信号，所以它们的用处也就不一样。。。","tags":[{"name":"kill","slug":"kill","permalink":"http://www.jiliuke.com/tags/kill/"}]},{"title":"nginx日志自动分割的完美实现","date":"2015-08-11T01:44:40.000Z","path":"2015/08/11/nginx-e6-97-a5-e5-bf-97-e8-87-aa-e5-8a-a8-e5-88-86-e5-89-b2-e7-9a-84-e5-ae-8c-e7-be-8e-e5-ae-9e-e7-8e-b0/","text":"文件名nginx_access_log.sh 以下是脚本 #!/bin/bash - #1.nginx日志存放路径 first_path=”/lnmp/nginx/logs” path_array=($first_path) #2.日志标识前缀数组 first_prefix_sign=”first” prefix_array=($first_prefix_sign) #3.日志成功错误标识后缀数组 bool_array=(“access” “error”) #4.nginx日志切割备份后缀 postfix=`date -d ‘+0 days’ +%Y%m%d`“.log” #5.备份当前的日志文件，重命名改为日期后缀 for path in ${path_array[*]} do for prefix in ${prefix_array[*]} do for bool in ${bool_array[*]} do file=$path/$bool.log backfile=$path/$prefix.$bool.$postfix echo $file echo $backfile if [ -e $file ];then mv $file $backfile fi done done done #6.查找nginx进程号,让其产生新的日志文件 nginx_pid=`ps -ef|grep -E ‘nginx: master process nginx’|grep -v ‘grep’|awk ‘{print $2}’` #USR1:Reopen log files,刷新nginx日志文件 kill -HUP $nginx_pid","tags":[{"name":"nginx","slug":"nginx","permalink":"http://www.jiliuke.com/tags/nginx/"}]},{"title":"CentOS mini　插入光驱需要挂载光驱才能读取数据","date":"2015-08-11T01:43:51.000Z","path":"2015/08/11/centos-mini-e3-80-80-e6-8f-92-e5-85-a5-e5-85-89-e9-a9-b1-e9-9c-80-e8-a6-81-e6-8c-82-e8-bd-bd-e5-85-89-e9-a9-b1-e6-89-8d-e8-83-bd-e8-af-bb-e5-8f-96-e6-95-b0-e6-8d-ae/","text":"操作方法： mkdir /mnt/cdrom mount /dev/cdrom /mnt/cdrom 卸载方法： umount /mnt/cdrom","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"mount","slug":"mount","permalink":"http://www.jiliuke.com/tags/mount/"}]},{"title":"CentOS mini 默认无法上网和配置IP","date":"2015-08-11T01:43:03.000Z","path":"2015/08/11/centos-mini-e9-bb-98-e8-ae-a4-e6-97-a0-e6-b3-95-e4-b8-8a-e7-bd-91-e5-92-8c-e9-85-8d-e7-bd-aeip/","text":"CentOS mini默认是无法上网，需要进行如下设置： 一、编辑网络设置： 修改ONBOOT值为yes 1 DEVICE=eth0 2 HWADDR=00:0C:29:4E:B7:C9 3 TYPE=Ethernet 4 UUID=a3d55d06-78fe-4542-a44a-d95cb5667cd6 5 ONBOOT=no 6 NM_CONTROLLED=yes 7 BOOTPROTO=dhcp 二、重启network服务 service network restart 手动配置IP： vi /etc/sysconfig/network-scripts/ifcfg-ethx linux-ip","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"}]},{"title":"php-fpm进程关闭与重启脚本详解","date":"2015-08-11T01:42:02.000Z","path":"2015/08/11/php-fpm-e8-bf-9b-e7-a8-8b-e5-85-b3-e9-97-ad-e4-b8-8e-e9-87-8d-e5-90-af-e8-84-9a-e6-9c-ac-e8-af-a6-e8-a7-a3-2/","text":"今天我来给各位同学介绍一下关于php-fpm进程关闭与重启命令吧，PHP-FPM是一个PHP FastCGI管理器，是只用于PHP的并且PHP5.3.3已经集成php-fpm了，不再是第三方的包了哦。 先来理解一下什么是php-fpm PHP-FPM是一个PHP FastCGI管理器，是只用于PHP的。 PHP-FPM其实是PHP源代码的一个补丁，旨在将FastCGI进程管理整合进PHP包中。必须将它patch到你的PHP源代码中，在编译安装PHP后才可以使用。 现在我们可以在最新的PHP 5.3.2的源码树里下载得到直接整合了PHP-FPM的分支，据说下个版本会融合进PHP的主分支去。相对Spawn-FCGI，PHP-FPM在CPU和内存方面的控制都更胜一筹，而且前者很容易崩溃，必须用crontab进行监控，而PHP-FPM则没有这种烦恼。 PHP5.3.3已经集成php-fpm了，不再是第三方的包了。PHP-FPM提供了更好的PHP进程管理方式，可以有效控制内存和进程、可以平滑重载PHP配置，比spawn-fcgi具有更多优点，所以被PHP官方收录了。在./configure的时候带 –enable-fpm参数即可开启PHP-FPM。 使用PHP-FPM来控制PHP-CGI的FastCGI进程 master进程可以理解以下信号 INT, TERM 立刻终止 QUIT 平滑终止 USR1 重新打开日志文件 USR2 平滑重载所有worker进程并重新载入配置和二进制模块 示例： php-fpm 关闭： 代码如下 复制代码 kill -INT `cat /usr/local/php/var/run/php-fpm.pid` php-fpm 重启： 代码如下 复制代码 kill -USR2 `cat /usr/local/php/var/run/php-fpm.pid` 查看php-fpm进程数： 代码如下 复制代码 ps aux | grep -c php-fpm php-fmp的重启 (方法二） 先执行 代码如下 复制代码 killall php-fpm 再执行(usr/local/php是php的安装目录) 代码如下 复制代码 /usr/local/php/sbin/php-fpm &amp;","tags":[{"name":"php-fpm","slug":"php-fpm","permalink":"http://www.jiliuke.com/tags/php-fpm/"}]},{"title":"CMake和Configure项目的安装与反安装","date":"2015-08-11T01:40:30.000Z","path":"2015/08/11/cmake-e5-92-8cconfigure-e9-a1-b9-e7-9b-ae-e7-9a-84-e5-ae-89-e8-a3-85-e4-b8-8e-e5-8f-8d-e5-ae-89-e8-a3-85-2/","text":"Configure： 项目安装： 比如用源码包安装gaim 的 ./configure –prefix=/opt/gaim make make install 如果安装mlterm ./configure –prefix=/opt/mlterm make make install 把源码包安装的软件，都指定安装在 /opt目录中 项目删除： 如果删除，就删除相应的软件目录； 有些软件要在解压安装目录中执行 make uninstall 这样就卸载掉了 CMake： 项目安装： 1、首先安装CMake工具 wget http://www.cmake.org/files/v2.8/cmake-2.8.4.tar.gz tar xvzf cmake-2.8.4.tar.gz cd cmake-2.8.4 ./configure make make install 以安装MySQL 5.5.9为例，执行： tar zxvf mysql-5.5.9.tar.gz cd mysql-5.5.9/ rm CMakeCache.txt cmake -DCMAKE_INSTALL_PREFIX=/usr/local/webserver/mysql/-DMYSQL_DATADIR=/home/mysql/data/-DEFAULT_CHARSET=utf8 -DMYSQL_TCP_PORT=3306-DMYSQL_UNIX_ADDR=/tmp/mysql.sock -DWITH_DEBUG=0-DWITH_INNOBASE_STORAGE_ENGINE=1-DMYSQL_USER=mysql 这些参数的意思: -DCMAKE_INSTALL_PREFIX=/data/mysql 准备安装到那里 -DEFAULT_CHARSET=utf8 默认的字符集 -DMYSQL_TCP_PORT=3306 数据库的监听端口 -DMYSQL_UNIX_ADDR=/tmp/mysql3306.sock 本机连回数据库的unix socket -DWITH_DEBUG=0 关闭debug模式 -DWITH_INNOBASE_STORAGE_ENGINE=1 打开innodb引擎 make &amp;&amp; make install 项目删除： CMake 默认不提供 uninstall 这个 target，想要的话，输入： xargs rm &lt; install_manifest.txt 对于不修改配置的项目足够了，manifest.txt 是CMake 生成的安装文件列表。","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"cmake","slug":"cmake","permalink":"http://www.jiliuke.com/tags/cmake/"},{"name":"configure","slug":"configure","permalink":"http://www.jiliuke.com/tags/configure/"}]},{"title":"源码安装lnmp","date":"2015-03-30T03:16:25.000Z","path":"2015/03/30/e6-ba-90-e7-a0-81-e5-ae-89-e8-a3-85lnmp/","text":"1.nginx http://nginx.org/en/docs/configure.html 2.php http://php.net/manual/en/install.unix.nginx.php 3.cmake http://www.cmake.org/download/ 4.mysql /lnmp/cmake/bin/cmake -DCMAKE_INSTALL_PREFIX=/lnmp/mysql -DMYSQL_DATADIR=/lnmp/mysql/data -DSYSCONFDIR=/lnmp/mysql/etc -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_MEMORY_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DMYSQL_UNIX_ADDR=/lnmp/mysql/mysql.sock -DMYSQL_TCP_PORT=3306 -DENABLED_LOCAL_INFILE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci make &amp;&amp; make install yum -y install ncurses-devel 新安装的mysql如果需要密码，查看cat /root/.mysql_secret中即为mysql的默认root密码 进入后set password=”123456”; 安装完成后需要添加php扩展，先cd到php安装源文件ext/gd(以安装gd为例) /php路径/bin/phpize 生成configure文件 ./configure –with-php-config=/php路径/bin/php-config php查看安装的模块php -m 加入环境变量例子(环境变量地址：/etc/profile) PATH=/lnmp/mysql/bin:$PATH export PATH source /etc/profile","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"lnmp","slug":"lnmp","permalink":"http://www.jiliuke.com/tags/lnmp/"}]},{"title":"/etc/passwd 和 /etc/shadow 文件内容及其解释","date":"2015-03-30T03:14:56.000Z","path":"2015/03/30/etcpasswd-e5-92-8c-etcshadow-e6-96-87-e4-bb-b6-e5-86-85-e5-ae-b9-e5-8f-8a-e5-85-b6-e8-a7-a3-e9-87-8a/","text":"默认情况下，/etc/passwd 存储有关本地用户的信息 /etc/passwd 采用以下格式： 1）username UID到名称的一种映射，用户名 2）password 保存密码的位置，现在保存在/etc/shadow 中 3）UID 用户ID 4）GID 主组ID 5）GECOS 字段存储任意文本，用户注释 6）/home/dir 用户的家目录 7）shell 用户登入后使用的shell名称 passwd文件是普通的文本文件，可以手工修改文件中的用户信息（usermod），或者最后添加新行以增加新的用户(useradd)。 如果同时2个人修改文件passwd的话，有毁坏文件的危险。建议采用vipw命令，它可以将passwd文件锁住，以防止其他人同时使用。 用户密码存储在/etc/shadow，格式为（以“：”为分割符）： 1）用户名 2）加密的密码 3）上次更改密码的日期（从1970-1-1开始） 4）最短密码期限（按天计算，0 = 无最短期限） 5）最长密码期限（按天计算） 6）密码警告期限（按天计算，0 = 未指定警告） 7）密码非活动期限（按天计算） 8）账号到期时间（从1970-1-1开始） 9）保留域 /etc/shadow 由 pwconv 命令根据/etc/passwd中的数据自动产生。 改使用者的密码 — passwd 参数 -l 关闭账号密码。效果相当于usermod -L，只有root才有权使用此项。 -u 恢复账号密码。效果相当于usermod -U，同样只有root才有权使用。 -g 修改组密码。gpasswd的等效命令。 -f 更改由finger命令访问的用户信息。 -d 关闭使用者的密码认证功能, 使用者在登入时将可以不用输入密码, 只有具备 root 权限的使用者方可使用。 -S 显示指定使用者的密码认证种类, 只有具备 root 权限的使用者方可使用。 更改密码时效 — chage 参数 -m 密码可更改的最小天数。为零时代表任何时候都可以更改密码。 -M 密码保持有效的最大天数。 -W 用户密码到期前，提前收到警告信息的天数。 -E 帐号到期的日期。过了这天，此帐号将不可用。 -d 上一次更改的日期。 -I（大写的i） 停滞时期。如果一个密码已过期这些天，那么此帐号将不可用。 -l 列出当前的设置。由非特权用户来确定他们的密码或帐号何时过期。 关于账号时间图示：","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"/etc/passwd","slug":"etc-passwd","permalink":"http://www.jiliuke.com/tags/etc-passwd/"},{"name":"/etc/shadow","slug":"etc-shadow","permalink":"http://www.jiliuke.com/tags/etc-shadow/"}]},{"title":"关于chrome获取图片真实路径被强行修改成c:/fakepath问题解决办法","date":"2015-03-30T03:11:12.000Z","path":"2015/03/30/e5-85-b3-e4-ba-8echrome-e8-8e-b7-e5-8f-96-e5-9b-be-e7-89-87-e7-9c-9f-e5-ae-9e-e8-b7-af-e5-be-84-e8-a2-ab-e5-bc-ba-e8-a1-8c-e4-bf-ae-e6-94-b9-e6-88-90cfakepath-e9-97-ae-e9-a2-98-e8-a7-a3-e5-86-b3/","text":"问题：由于浏览器照顾用户安全，所以不暴露用户实际路径，获取图片真实路径被强行修改成c:/fakepath 解决办法：可以按照火狐处理类似情况的方法处理 function getFullPath(obj) { if(obj) { //ie if (window.navigator.userAgent.indexOf(“MSIE”)&gt;=1) { obj.select(); if(window.navigator.userAgent.indexOf(“MSIE”) == 25){ obj.blur(); } return document.selection.createRange().text; } //firefox else if(window.navigator.userAgent.indexOf(“Firefox”)&gt;=1) { if(obj.files) { //return obj.files.item(0).getAsDataURL(); return window.URL.createObjectURL(obj.files.item(0)); } return obj.value; }else{ //chrome return window.URL.createObjectURL(obj.files.item(0)); } return obj.value; } }","tags":[{"name":"fakepath","slug":"fakepath","permalink":"http://www.jiliuke.com/tags/fakepath/"}]},{"title":"PHP二维数组排序的3种方法和自定义函数分享","date":"2015-03-30T03:10:06.000Z","path":"2015/03/30/php-e4-ba-8c-e7-bb-b4-e6-95-b0-e7-bb-84-e6-8e-92-e5-ba-8f-e7-9a-843-e7-a7-8d-e6-96-b9-e6-b3-95-e5-92-8c-e8-87-aa-e5-ae-9a-e4-b9-89-e5-87-bd-e6-95-b0-e5-88-86-e4-ba-ab/","text":"这篇文章主要介绍了PHP二维数组排序的3种方法和自定义函数分享,需要的朋友可以参考下 关于排序一般我们都是通过数据库或者nosql(eg:redis)先排好序然后输出到程序里直接使用，但是有些时候我们需要通过PHP直接来对数组进行排序，而在PHP里存储数据用到最多的就是对象和数组，但处理较多的就是数组，因为有非常丰富的内置函数库（其实对象一定程度上也可以理解为是数组），这些函数库很大程度上可以帮助我们实现某些功能。常用的系统函数有sort、asort、arsort、ksort、krsort等等，这里我主要说下对二维数组的排序，两种方法： 一、用PHP自带array_multisort函数排序 复制代码代码如下: 67, 'edition' => 2); $data\\[\\] = array('volume' => 86, 'edition' => 1); $data\\[\\] = array('volume' => 85, 'edition' => 6); $data\\[\\] = array('volume' => 98, 'edition' => 2); $data\\[\\] = array('volume' => 86, 'edition' => 6); $data\\[\\] = array('volume' => 67, 'edition' => 7); // 取得列的列表 foreach ($data as $key => $row) { $volume\\[$key\\] = $row\\['volume'\\]; $edition\\[$key\\] = $row\\['edition'\\]; } array\\_multisort($volume, SORT\\_DESC, $edition, SORT\\_ASC, $data); print\\_r($data); ?> 输出结果： 复制代码代码如下: Array ( [0] =&gt; Array ( [volume] =&gt; 98 [edition] =&gt; 2 ) [1] =&gt; Array ( [volume] =&gt; 86 [edition] =&gt; 1 ) [2] =&gt; Array ( [volume] =&gt; 86 [edition] =&gt; 6 ) [3] =&gt; Array ( [volume] =&gt; 85 [edition] =&gt; 6 ) [4] =&gt; Array ( [volume] =&gt; 67 [edition] =&gt; 2 ) [5] =&gt; Array ( [volume] =&gt; 67 [edition] =&gt; 7 ) ) 关于array_multisort官方文档也有比较详细的说明：http://www.php.net/manual/zh/function.array-multisort.php 二、自定义函数排序1 复制代码代码如下: 67, 'edition' => 2); $data\\[\\] = array('volume' => 86, 'edition' => 1); $data\\[\\] = array('volume' => 85, 'edition' => 6); $data\\[\\] = array('volume' => 98, 'edition' => 2); $data\\[\\] = array('volume' => 86, 'edition' => 6); $data\\[\\] = array('volume' => 67, 'edition' => 7); // 取得列的列表 foreach ($data as $key => $row) { $volume\\[$key\\] = $row\\['volume'\\]; $edition\\[$key\\] = $row\\['edition'\\]; } $ret = arraySort($data, 'volume', 'desc'); print\\_r($ret); /** * @desc arraySort php二维数组排序 按照指定的key 对数组进行排序 * @param array $arr 将要排序的数组 * @param string $keys 指定排序的key * @param string $type 排序类型 asc | desc * @return array */ function arraySort($arr, $keys, $type = 'asc') { $keysvalue = $new\\_array = array(); foreach ($arr as $k => $v){ $keysvalue\\[$k\\] = $v\\[$keys\\]; } $type == 'asc' ? asort($keysvalue) : arsort($keysvalue); reset($keysvalue); foreach ($keysvalue as $k => $v) { $new\\_array\\[$k\\] = $arr\\[$k\\]; } return $new\\_array; } ?> 输出结果： 复制代码代码如下: Array ( [3] =&gt; Array ( [volume] =&gt; 98 [edition] =&gt; 2 ) [4] =&gt; Array ( [volume] =&gt; 86 [edition] =&gt; 6 ) [1] =&gt; Array ( [volume] =&gt; 86 [edition] =&gt; 1 ) [2] =&gt; Array ( [volume] =&gt; 85 [edition] =&gt; 6 ) [5] =&gt; Array ( [volume] =&gt; 67 [edition] =&gt; 7 ) [0] =&gt; Array ( [volume] =&gt; 67 [edition] =&gt; 2 ) ) 这个自定义函数与系统函数的一个区别就是：自定义函数只支持针对某一个key的排序，如果要支持多个key的排序需要执行多次; 而系统函数array_multisort可以一次性对多个key且可以指定多个排序规则，系统函数还是相当强大的，推荐使用系统函数，毕竟是C底层实现的，这里只是举例说明如果通过自定义函数来对数组进行排序，当然这个自定义函数也可以继续扩展来支持更多的排序规则。在取排名、排行榜、成绩等场景中用到的还是非常多的。 三、自定义函数排序2 以下函数是对一个给定的二维数组按照指定的键值进行排序，先看函数定义： 复制代码代码如下: function array_sort($arr,$keys,$type=’asc’){ $keysvalue = $new_array = array(); foreach ($arr as $k=&gt;$v){ $keysvalue[$k] = $v[$keys]; } if($type == ‘asc’){ asort($keysvalue); }else{ arsort($keysvalue); } reset($keysvalue); foreach ($keysvalue as $k=&gt;$v){ $new_array[$k] = $arr[$k]; } return $new_array; } 它可以对二维数组按照指定的键值进行排序，也可以指定升序或降序排序法（默认为升序），用法示例： 复制代码代码如下: $array = array( array(‘name’=&gt;’手机’,’brand’=&gt;’诺基亚’,’price’=&gt;1050), array(‘name’=&gt;’笔记本电脑’,’brand’=&gt;’lenovo’,’price’=&gt;4300), array(‘name’=&gt;’剃须刀’,’brand’=&gt;’飞利浦’,’price’=&gt;3100), array(‘name’=&gt;’跑步机’,’brand’=&gt;’三和松石’,’price’=&gt;4900), array(‘name’=&gt;’手表’,’brand’=&gt;’卡西欧’,’price’=&gt;960), array(‘name’=&gt;’液晶电视’,’brand’=&gt;’索尼’,’price’=&gt;6299), array(‘name’=&gt;’激光打印机’,’brand’=&gt;’惠普’,’price’=&gt;1200) );$ShoppingList = array_sort($array,’price’); print_r($ShoppingList); 上面是对$array这个二维数组按照’price’从低到高的排序。","tags":[{"name":"PHP二维数组","slug":"PHP二维数组","permalink":"http://www.jiliuke.com/tags/PHP%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"}]},{"title":"Centos 安装 crontab","date":"2015-03-30T03:09:13.000Z","path":"2015/03/30/centos-e5-ae-89-e8-a3-85-crontab-2/","text":"安装crontab: yum install crontabs 说明： /sbin/service crond start //启动服务 /sbin/service crond stop //关闭服务 /sbin/service crond restart //重启服务 /sbin/service crond reload //重新载入配置 查看crontab服务状态： service crond status 手动启动crontab服务： service crond start 查看crontab服务是否已设置为开机启动，执行命令： ntsysv 加入开机自动启动: chkconfig --level 35 crond on 1，crontab命令 功能说明：设置计时器。 语 法：crontab [-u &lt;用户名称&gt;][配置文件] 或 crontab [-u &lt;用户名称&gt;][-elr] 补充说明：cron是一个常驻服务，它提供计时器的功能，让用户在特定的时间得以执行预设的指令或程序。只要用户会编辑计时器的配置文件，就可以使 用计时器的功能。其配置文件格式如下： Minute Hour Day Month DayOFWeek Command 参 数： -e 编辑该用户的计时器设置。 -l 列出该用户的计时器设置。 -r 删除该用户的计时器设置。 -u&lt;用户名称&gt; 指定要设定计时器的用户名称。 2，crontab 格式 基本格式 : * * * * * command 分 时 日 月 周 命令 第1列表示分钟1～59 每分钟用或者 */1表示 第2列表示小时1～23（0表示0点） 第3列表示日期1～31 第4列 表示月份1～12 第5列标识号星期0～6（0表示星期天） 第6列要运行的命令 *crontab特殊的符号说明：** ““代表所有的取值范围内的数字。特别要注意哦！ “/“代表每的意思，如”/5”表示每5个单位 “-“代表从某个数字到某个数字 “,”分散的数字 crontab文件的一些例子： 30 21 * * * /usr/local/etc/rc.d/lighttpd restart 上面的例子表示每晚的21:30重启 apache。 45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart 上面的例子表示每月1、 10、22日的4 : 45重启apache。 10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart 上面的例子表示每周六、周日的1 : 10重启apache。 0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart 上面的例子表示在每天18 : 00至23 : 00之间每隔30分钟重启apache。 0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart 上面的例子表示每星期六的11 : 00 pm重启apache。 * */1 * * * /usr/local/etc/rc.d/lighttpd restart 每一小时重启apache * 23-7/1 * * * /usr/local/etc/rc.d/lighttpd restart 晚上11点到早上7点之间，每 隔一小时重启apache 0 11 4 * mon-wed /usr/local/etc/rc.d/lighttpd restart 每月的4号与每周一到周三 的11点重启apache 0 4 1 jan * /usr/local/etc/rc.d/lighttpd restart 一月一号的4点重启apache */30 * * * * /usr/sbin/ntpdate 210.72.145.44 每半小时同步一下时间 -------------------------------- 如何查看crontab的日志记录 ——————————————————– 昨天crontab中的同步任务没有执行，不知道是什么原因没有执行，貌似任务hang住了，想查询一下crontab到底问题出在哪里，或者hang在了什么地方。 1. linux 看 /var/log/cron这个文件就可以，可以用tail -f /var/log/cron观察 2. unix 在 /var/spool/cron/tmp文件中，有croutXXX001864的tmp文件，tail 这些文件就可以看到正在执行的任务了。 3. mail任务 在 /var/spool/mail/root 文件中，有crontab执行日志的记录，用tail -f /var/spool/mail/root 即可查看最近的crontab执行情况。","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"crontab","slug":"crontab","permalink":"http://www.jiliuke.com/tags/crontab/"}]},{"title":"CentOS 6.3 NFS的安装配置、启动及mount挂载方法","date":"2015-03-30T03:08:23.000Z","path":"2015/03/30/centos-6-3-nfs-e7-9a-84-e5-ae-89-e8-a3-85-e9-85-8d-e7-bd-ae-e3-80-81-e5-90-af-e5-8a-a8-e5-8f-8amount-e6-8c-82-e8-bd-bd-e6-96-b9-e6-b3-95-2/","text":"一、环境介绍： 服务器：centos 192.168.1.225 客户端：centos 192.168.1.226 二、安装： NFS的安装配置： centos 5 : yum -y install nfs-utils portmap centos 6(在CentOS 6.3当中，portmap服务由rpcbind负责) : yum -y install nfs-utils rpcbind 三、服务器端配置： 1、创建共享目录： [root@centos2 /]# mkdir /usr/local/test 2、NFS文件配置： [root@centos2 /]# vi /etc/exports#增加一行：/usr/local/test/ 192.168.1.226(rw,no_root_squash,no_all_squash,sync) :x保存退出； 使配置生效： [root@centos2 /]# exportfs -r 注：配置文件说明： /usr/local/test/ 为共享的目录，使用绝对路径。 192.168.1.226(rw,no_root_squash,no_all_squash,sync) 为客户端的地址及权限，地址可以是一个网段，一个IP地址或者是一个域名，域名支持通配符，如：*.youxia.com，地址与权限中间没有空格，权限说明： rw：read-write，可读写； ro：read-only，只读； sync：文件同时写入硬盘和内存； async：文件暂存于内存，而不是直接写入内存； no_root_squash：NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，也拥有root权限。显然开启这项是不安全的。 root_squash：NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，拥有匿名用户权限，通常他将使用nobody或nfsnobody身份； all_squash：不论NFS客户端连接服务端时使用什么用户，对服务端分享的目录来说都是拥有匿名用户权限； anonuid：匿名用户的UID值，通常是nobody或nfsnobody，可以在此处自行设定； anongid：匿名用户的GID值。 3、启动: centos6: [root@centos2 /]# service rpcbind start Starting rpcbind: [ OK ][root@centos2 /]# service nfs startStarting NFS services: [ OK ]Starting NFS quotas: [ OK ]Starting NFS mountd: [ OK ]Stopping RPC idmapd: [ OK ]Starting RPC idmapd: [ OK ]Starting NFS daemon: [ OK ][root@centos2 /]# centos 5 [root@centos2 /]# service portmap start[root@centos2 /]# service nfs start[root@centos2 /]# 四、客户端挂载： 1、创建需要挂载的目录： [root@localhost ~]# mkdir /usr/local/test[root@localhost ~]# 2、测试挂载： [root@localhost ~]# showmount -e 192.168.1.225Export list for 192.168.1.225:/usr/local/test 192.168.1.226[root@localhost ~]# 如果显示：rpc mount export: RPC: Unable to receive; errno = No route to host，则需要在服务端关闭防火墙（稍候会详细说）。 3、挂载： [root@localhost ~]# mount -t nfs 192.168.1.225:/usr/local/test /usr/local/test [root@localhost ~]# mount/dev/mapper/VolGroup-lv_root on / type ext4 (rw)proc on /proc type proc (rw)sysfs on /sys type sysfs (rw)devpts on /dev/pts type devpts (rw,gid=5,mode=620)tmpfs on /dev/shm type tmpfs (rw)/dev/sda1 on /boot type ext4 (rw)none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw)sunrpc on /var/lib/nfs/rpc_pipefs type rpc_pipefs (rw)nfsd on /proc/fs/nfsd type nfsd (rw)192.168.1.225:/usr/local/test on /usr/local/test type nfs (rw,vers=4,addr=192.168.1.225,clientaddr=192.168.1.226)[root@localhost ~]# 如果信息如上显示则挂载成功！ 4、测试： 客户端生成一个文件： [root@centos2 /]# cd /usr/local/test/[root@centos2 test]# echo “hello nfs test”&gt;&gt;test[root@centos2 test]# lltotal 4-rw-r–r– 1 root root 15 Apr 9 13:24 test[root@centos2 test]# 服务端检查： [root@centos2 /]# cd /usr/local/test/[root@centos2 test]# lltotal 4-rw-r–r– 1 root root 15 Apr 9 13:24 test[root@centos2 test]# 挂载成功！ 五、解除挂载： [root@localhost ~]# umount /usr/local/test [root@localhost ~]# mount/dev/mapper/VolGroup-lv_root on / type ext4 (rw)proc on /proc type proc (rw)sysfs on /sys type sysfs (rw)devpts on /dev/pts type devpts (rw,gid=5,mode=620)tmpfs on /dev/shm type tmpfs (rw)/dev/sda1 on /boot type ext4 (rw)none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw)sunrpc on /var/lib/nfs/rpc_pipefs type rpc_pipefs (rw)nfsd on /proc/fs/nfsd type nfsd (rw)[root@localhost ~]# 如果遇到：umount.nfs: /usr/local/test: device is busy 可能用命令： [root@localhost /]# fuser -m -v /usr/local/test 用户 进程号 权限 命令 /usr/local/test/: root 2798 ..c.. bash root 2996 ..c.. su[root@localhost /]# kill -9 2798 [root@localhost /]# kill -9 2996 [root@localhost /]# umount /usr/local/test[root@localhost /]# 六、服务器端防火墙设置（NFS 开启防墙配置）： 1、修改/etc/service,添加以下内容（端口号必须在1024以下,且未被占用） # Local services mountd 1011/tcp #rpc.mountd mountd 1011/udp #rpc.mountd rquotad 1012/tcp #rpc.rquotad rquotad 1012/udp #rpc.rquotad 2、重起Linux NFS服务 service nfs restart 3、此时rpc相关端口已经被固定,可以为Linux NFS添加防火墙规则 #portmap /sbin/iptables -A INPUT -s 192.168.1.0/254 -p tcp –dport 111 -j ACCEPT /sbin/iptables -A INPUT -s 192.168.1.0/254 -p udp –dport 111 -j ACCEPT #nfsd /sbin/iptables -A INPUT -s 192.168.1.0/254 -p tcp –dport 2049 -j ACCEPT /sbin/iptables -A INPUT -s 192.168.1.0/254 -p udp –dport 2049 -j ACCEPT #mountd /sbin/iptables -A INPUT -s 192.168.1.0/254 -p tcp –dport 1011 -j ACCEPT /sbin/iptables -A INPUT -s 192.168.1.0/254 -p udp –dport 1011 -j ACCEPT #rquotad /sbin/iptables -A INPUT -s 192.168.1.0/254 -p tcp –dport 1012 -j ACCEPT /sbin/iptables -A INPUT -s 192.168.1.0/254 -p udp –dport 1012 -j ACCEPT #rpc.statd /sbin/iptables -A INPUT -s 192.168.1.0/254 -p tcp –dport 32768 -j ACCEPT /sbin/iptables -A INPUT -s 192.168.1.0/254 -p udp –dport 32768 -j ACCEPT —TCP方法成功——————————————- -A INPUT -m state –state NEW -m tcp -p tcp –dport 111 -j ACCEPT -A INPUT -m state –state NEW -m tcp -p tcp –dport 2049 -j ACCEPT -A INPUT -m state –state NEW -m tcp -p tcp –dport 1011 -j ACCEPT -A INPUT -m state –state NEW -m tcp -p tcp –dport 1012 -j ACCEPT -A INPUT -m state –state NEW -m tcp -p tcp –dport 32768 -j ACCEPT 客户端在挂载的时候遇到的一个问题如下，可能是网络不太稳定，NFS默认是用UDP协议，换成TCP协议即可： mount -t nfs 192.168.1.225:/usr/local/test /usr/local/test -o proto=tcp -o nolock /etc/init.d/iptables restart #最后重启防火墙使配置生效 防火墙端口说明： portmap或者rpcbind(CentOS 6.x)使用：tcp/udp 111 nfs使用:tcp/udp 2049 mountd使用: TCP/UDP 892 rquotad使用：tcp/udp 875 status使用: TCP/UDP 1001-1004共四个端口 nlockmgr使用:TCP/32803端口 UDP/32769端口 rpcinfo -p 查看rpcbind使用的端口号","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"nfs","slug":"nfs","permalink":"http://www.jiliuke.com/tags/nfs/"}]},{"title":"【汇总】PHP-FPM 配置优化","date":"2015-03-30T03:07:24.000Z","path":"2015/03/30/e3-80-90-e6-b1-87-e6-80-bb-e3-80-91php-fpm-e9-85-8d-e7-bd-ae-e4-bc-98-e5-8c-96/","text":"-----------------------开启php-fpm慢脚本日志 request_slowlog_timeout = 30s slowlog = /usr/local/php/var/log/php-fpm.log.slow 典型的日志内容如下： [15-Apr-2012 20:56:19] [pool www] pid 9748 script_filename = /var/www/html/htdocs/www.xxx.com/xxx.php [0x00000000090bc270] file_get_contents() /var/www/html/htdocs/www.xxx.com/xxx.php:81 慢脚本文件、具体行数、函数等都很详细的记录了，优化工作相对来说就容易的多。 request_terminate_timeout = 120 #表示等待120秒后，结束那些没有自动结束的php脚本，以释放占用的资源。 当PHP运行在php-fpm模式下，php.ini配置的max_execute_time是无效的，需要在php-fpm.conf中配置另外一个配置项:request_terminate_timeout;以下是官方文档的说明： request_terminate_timeout – The timeout (in seconds) for serving a single request after which the worker process will be terminated. Should be used when ‘max_execution_time’ ini option does not stop script execution for some reason. Default: “5s”. Note: ’0s’ means ‘off’ 注意:set_time_limit()和max_execution_time只影响脚本本身执行的时间。任何发生在诸如使用system()的系统调用，流操作，数据库操作等的脚本执行的最大时间不包括其中. [global] pid = /dev/shm/pid/php-fpm.pid error_log = /usr/local/php/var/log/php-fpm.log log_level = notice [www] listen = 127.0.0.1:9000 ;listen.allowed_clients = 192.168.1.17,127.0.0.1,192.168.1.75 user = www group = www pm = dynamic pm.max_children = 2000 pm.start_servers = 10 pm.min_spare_servers = 5 pm.max_spare_servers = 200 pm.max_requests = 12000 pm.process_idle_timeout = 10s request_terminate_timeout = 120 request_slowlog_timeout = 30s slowlog = /usr/local/php/var/log/php-fpm.log.slow 这里先说一下涉及到这个的几个参数，他们分别是pm、pm.max_children、pm.start_servers、pm.min_spare_servers和pm.max_spare_servers。 pm表示使用那种方式，有两个值可以选择，就是static（静态）或者dynamic（动态）。在更老一些的版本中，dynamic被称作apache-like。这个要注意看配置文件的说明。 下面4个参数的意思分别为： pm.max_children：静态方式下开启的php-fpm进程数量。 pm.start_servers：动态方式下的起始php-fpm进程数量。 pm.min_spare_servers：动态方式下的最小php-fpm进程数量。 pm.max_spare_servers：动态方式下的最大php-fpm进程数量。 如果dm设置为static，那么其实只有pm.max_children这个参数生效。系统会开启设置数量的php-fpm进程。 如果dm设置为 dynamic，那么pm.max_children参数失效，后面3个参数生效。 系统会在php-fpm运行开始 的时候启动pm.start_servers个php-fpm进程， 然后根据系统的需求动态在pm.min_spare_servers和 pm.max_spare_servers之间调整php-fpm进程数。 那么，对于我们的服务器，选择哪种执行方式比较好呢？事实上，跟Apache一样，运行的PHP程序在执行完成后，或多或少会有内存泄露的问题。 这也是为什么开始的时候一个php-fpm进程只占用3M左右内存，运行一段时间后就会上升到20-30M的原因了。 对于内存大的服务器（比如8G以上）来说，指定静态的max_children实际上更为妥当，因为这样不需要进行额外的进程数目控制，会提高效 率。 因为频繁开关php-fpm进程也会有时滞，所以内存够大的情况下开静态效果会更好。数量也可以根据 内存/30M 得到，比如8GB内存可以设置为100， 那么php-fpm耗费的内存就能控制在 2G-3G的样子。如果内存稍微小点，比如1G，那么指定静态的进程数量更加有利于服务器的稳定。 这样可以保证php-fpm只获取够用的内存，将不多的 内存分配给其他应用去使用，会使系统的运行更加畅通。 对于小内存的服务器来说，比如256M内存的VPS，即使按照一个20M的内存量来算，10个php-cgi进程就将耗掉200M内存，那系统的崩 溃就应该很正常了。 因此应该尽量地控制php-fpm进程的数量，大体明确其他应用占用的内存后，给它指定一个静态的小数量，会让系统更加平稳一些。或者使用动态方式， 因为动态方式会结束掉多余的进程，可以回收释放一些内存，所以推荐在内存较少的服务器或VPS上使用。具体最大数量根据 内存/20M 得到。 比如说512M的VPS，建议pm.max_spare_servers设置为20。至于pm.min_spare_servers，则建议根据服 务器的负载情况来设置，比较合适的值在5~10之间。 ============================= 127.0.0.1监听本机ip php-fpm.conf listen = 127.0.0.1:9000 nginx.conf location ~ ^(.+\\.php)(.*)$ { fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fcgi.conf; }","tags":[{"name":"PHP-FPM优化","slug":"PHP-FPM优化","permalink":"http://www.jiliuke.com/tags/PHP-FPM%E4%BC%98%E5%8C%96/"},{"name":"PHP-FPM配置","slug":"PHP-FPM配置","permalink":"http://www.jiliuke.com/tags/PHP-FPM%E9%85%8D%E7%BD%AE/"}]},{"title":"Android SDK更新以及ADT更新出现问题的解决办法","date":"2015-03-30T03:05:15.000Z","path":"2015/03/30/android-sdk-e6-9b-b4-e6-96-b0-e4-bb-a5-e5-8f-8aadt-e6-9b-b4-e6-96-b0-e5-87-ba-e7-8e-b0-e9-97-ae-e9-a2-98-e7-9a-84-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95/","text":"使用SDK Manager更新时出现问题Failed to fetch URL https://dl-ssl.google.com/android/repository/repository-6.xml, reason: Connection to https://dl-ssl.google.com refusedFailed to fetch URL http://dl-ssl.google.com/android/repository/addons\\_list-1.xml, reason: Connection to http://dl-ssl.google.com refusedFailed to fetch URL https://dl-ssl.google.com/android/repository/addons\\_list-1.xml, reason: hostname in certificate didn’t match: &lt;dl-ssl.google.com&gt; != &lt;www.google.com&gt;更新ADT时无法解析https://dl-ssl.google.com/android/eclipse 方法/步骤 大家肯定很急，我就不废话了，直接上解决办法了！ 打开SDK Manager下Tools-&gt;Options，选中“Force https://… sources to be fetched using http://…”，强制使用http协议。 上一步选取之后，有的用户可以更新出列表来。如果还是不能，继续下面的操作。 在地址栏里输入：C:\\WINDOWS\\system32\\drivers\\etc 我们会看到hosts文件，右击打开方式选择记事本。在里面把下面文字复制进去，内容如下（_特别强调：是在原本的内容后面粘贴下面的内容，而不是覆盖_）： #Google主页 203.208.46.146 www.google.com #这行是为了方便打开Android开发官网 现在好像不VPN也可以打开 74.125.113.121 developer.android.com #更新的内容从以下地址下载 203.208.46.146 dl.google.com 203.208.46.146 dl-ssl.google.com 有的用户接着就会看到加载出列表了。如果没有变化，重新打开SDK Manager。就会发现问题解决了。如图1 如果还是无法加载出列表，还是出现如图2红色内容，建议过几天再试试！ 5 更新ADT插件的时候则使用网址http://dl-ssl.google.com/android/eclipse，而不是https://dl-ssl.google.com/android/eclipse，这个在官方开发文档里也有介绍。","tags":[{"name":"ADT","slug":"ADT","permalink":"http://www.jiliuke.com/tags/ADT/"},{"name":"Android SDK","slug":"Android-SDK","permalink":"http://www.jiliuke.com/tags/Android-SDK/"}]},{"title":"使用Android ADT最新开发工具后，新建项目出现appcompat v7 他是什么？","date":"2015-03-30T02:59:32.000Z","path":"2015/03/30/e4-bd-bf-e7-94-a8android-adt-e6-9c-80-e6-96-b0-e5-bc-80-e5-8f-91-e5-b7-a5-e5-85-b7-e5-90-8e-ef-bc-8c-e6-96-b0-e5-bb-ba-e9-a1-b9-e7-9b-ae-e5-87-ba-e7-8e-b0appcompat-v7-e4-bb-96-e6-98-af-e4-bb-80/","text":"做Android开发的朋友最近会发现，更新ADT至22.6.0版本之后，创建新的安装项目，会出现appcompat_v7的内容。并且是创建一个新的内容就会出现。这到底是怎么回事呢？原来appcompat_v7是Google自己的一个兼容包，就是一个支持库，能让2.1以上全使用上4.0版本的界面。下面就让笔者带你慢慢走近这个问题并解决它。 你会发现项目创建好后，workspace栏里除了我们创建的“test”项目，还多了一个名为“appcompat_v7”的包，而且这个包显示有错误（红色x号），而“test”包显示一个红色的感叹号。 解决办法：如果你依旧对appcompat_v7包耿耿于怀，我告诉你一个建项目时不出现appcompat_v7包的方法。既然appcompat_v7包是一个能让2.1以上全使用上4.0版本的界面的支持库，那么如图所示，我们建项目时直接把最小SDK选在Android4.0以上不就不需要这个支持库了吗？结果证明我们的想法是对的。","tags":[{"name":"ADT","slug":"ADT","permalink":"http://www.jiliuke.com/tags/ADT/"},{"name":"appcompat v7","slug":"appcompat-v7","permalink":"http://www.jiliuke.com/tags/appcompat-v7/"}]},{"title":"PHP浮点数的一个常见问题的解答","date":"2015-03-30T02:57:55.000Z","path":"2015/03/30/php-e6-b5-ae-e7-82-b9-e6-95-b0-e7-9a-84-e4-b8-80-e4-b8-aa-e5-b8-b8-e8-a7-81-e9-97-ae-e9-a2-98-e7-9a-84-e8-a7-a3-e7-ad-94/","text":"作者: Laruence 本文地址: http://www.laruence.com/2013/03/26/2884.html 转载请注明出处 关于PHP的浮点数, 我之前写过一篇文章: 关于PHP浮点数你应该知道的(All ‘bogus’ about the float in PHP) 不过, 我当时遗漏了一点, 也就是对于如下的这个常见问题的回答:","tags":[{"name":"PHP浮点数","slug":"PHP浮点数","permalink":"http://www.jiliuke.com/tags/PHP%E6%B5%AE%E7%82%B9%E6%95%B0/"}]},{"title":"【自我开发】开发一个返回顶部插件（谷歌插件编写方法）","date":"2015-03-30T02:56:23.000Z","path":"2015/03/30/e3-80-90-e8-87-aa-e6-88-91-e5-bc-80-e5-8f-91-e3-80-91-e5-bc-80-e5-8f-91-e4-b8-80-e4-b8-aa-e8-bf-94-e5-9b-9e-e9-a1-b6-e9-83-a8-e6-8f-92-e4-bb-b6-ef-bc-88-e8-b0-b7-e6-ad-8c-e6-8f-92-e4-bb-b6-e7-bc-96/","text":"第一步：编写manifest.json { “name”: “Back To Top”, “description”: “返回顶部”, “version”: “0.1”, “content_scripts”: [ //在内容中加载js { “matches”: [“http:///“], //匹配页面，哪些页面需要显示 “js”: [“top.js”] //加载的js } ], “manifest_version”: 2, “default_icon”: “icon_128.png”, //设置默认图片 “icons”: { “128”: “icon_128.png” } //图标 } 第二部：添加返回顶部的纯js (function() { var btnId = ‘__gotop’; var isIE = !!window.ActiveXObject &amp;&amp; /msie (\\d)/i.test(navigator.userAgent) ? RegExp[‘$1’] : false; function $() { return document.getElementById(arguments[0]); } function getScrollTop() { return (‘pageYOffset’ in window) ? window.pageYOffset : document.compatMode === “BackCompat” &amp;&amp; document.body.scrollTop || document.documentElement.scrollTop ; } function bindEvent(event, func) { if (window.addEventListener) { window.addEventListener(event, func, false); } else if (window.attachEvent) { window.attachEvent(‘on’ + event, func); } } bindEvent(‘load’, function() { var css = ‘background-color:#999;width:50px;height:50px;position:fixed;right:100px;bottom:30px;border-radius:10px;cursor:pointer;display:none;’; if (isIE &amp;&amp; isIE &lt; 7) { css += ‘_position:absolute;_top:expression(eval(document.documentElement.scrollTop+document.documentElement.clientHeight-30-this.offsetHeight-(parseInt(this.currentStyle.marginTop,10)||0)-(parseInt(this.currentStyle.marginBottom,10)||0)))’; var style = document.createStyleSheet(); style.cssText = ‘*html{background-image:url(about:blank);background-attachment:fixed;}’; } var html = ‘‘; var el = document.createElement(‘DIV’); el.id = btnId; el.style.cssText = css; el.innerHTML = html; document.body.appendChild(el); el.onclick = function() { (function() { var top = getScrollTop(); if (top &gt; 0) { window.scrollTo(0, top / 1.2) setTimeout(arguments.callee, 10); } })(); }; el.onmouseover = function() { $(btnId).firstChild.style.borderBottom = ‘14px solid #ddd’; $(btnId).firstChild.firstChild.style.backgroundColor = ‘#ddd’; }; el.onmouseout = function() { $(btnId).firstChild.style.borderBottom = ‘14px solid #fff’; $(btnId).firstChild.firstChild.style.backgroundColor = ‘#fff’; }; } ); bindEvent(‘scroll’, function() { var top = getScrollTop(), display = ‘none’; if (top &gt; 0) { display = ‘block’; } $(btnId).style.display = display; }); })(); 第三步：打包上传","tags":[{"name":"谷歌插件","slug":"谷歌插件","permalink":"http://www.jiliuke.com/tags/%E8%B0%B7%E6%AD%8C%E6%8F%92%E4%BB%B6/"}]},{"title":"Lamp环境下编写PHP代码时出现错误：Warning: Unknown: failed to open stream: Permission denied i","date":"2015-03-30T02:55:23.000Z","path":"2015/03/30/lamp-e7-8e-af-e5-a2-83-e4-b8-8b-e7-bc-96-e5-86-99php-e4-bb-a3-e7-a0-81-e6-97-b6-e5-87-ba-e7-8e-b0-e9-94-99-e8-af-af-ef-bc-9awarning-unknown-failed-to-open-stream-permission-denied-i/","text":"Lamp环境下编写PHP代码时出现错误：Warning: Unknown: failed to open stream: Permission denied in Unknown on line 0 Fatal error: Unknown: Failed opening required ‘X’ (include_path=’X’) in Unknown on line 时的解决办法。 在出现此问题时，是文件权限出了问题，可以通过以下两中方法进行解决： 一、在图形界面直接更改权限 右键点击文件选择权限，然后直接更改，如图： 更改完权限之后为： 更改完之后就应该为什么问题了。 二、通过命令行直接进行权限的更改 直接将文件的权限更改为777 例如：文件为a.php 则进入所在的文件夹，通过命令chmod 777 a.php 更改权限。 具体777是什么意思，大家看看书或上网搜一下，在这里就不再赘述啦！","tags":[{"name":"PHP","slug":"PHP","permalink":"http://www.jiliuke.com/tags/PHP/"},{"name":"LAMP","slug":"LAMP","permalink":"http://www.jiliuke.com/tags/LAMP/"}]},{"title":"CMake和Configure项目的安装与反安装","date":"2015-03-30T02:44:34.000Z","path":"2015/03/30/cmake-e5-92-8cconfigure-e9-a1-b9-e7-9b-ae-e7-9a-84-e5-ae-89-e8-a3-85-e4-b8-8e-e5-8f-8d-e5-ae-89-e8-a3-85/","text":"Configure： 项目安装： 比如用源码包安装gaim 的 ./configure –prefix=/opt/gaim make make install 如果安装mlterm ./configure –prefix=/opt/mlterm make make install 把源码包安装的软件，都指定安装在 /opt目录中 项目删除： 如果删除，就删除相应的软件目录； 有些软件要在解压安装目录中执行 make uninstall 这样就卸载掉了 CMake： 项目安装： 1、首先安装CMake工具 wget http://www.cmake.org/files/v2.8/cmake-2.8.4.tar.gz tar xvzf cmake-2.8.4.tar.gz cd cmake-2.8.4 ./configure make make install 以安装MySQL 5.5.9为例，执行： tar zxvf mysql-5.5.9.tar.gz cd mysql-5.5.9/ rm CMakeCache.txt cmake -DCMAKE_INSTALL_PREFIX=/usr/local/webserver/mysql/-DMYSQL_DATADIR=/home/mysql/data/-DEFAULT_CHARSET=utf8 -DMYSQL_TCP_PORT=3306-DMYSQL_UNIX_ADDR=/tmp/mysql.sock -DWITH_DEBUG=0-DWITH_INNOBASE_STORAGE_ENGINE=1-DMYSQL_USER=mysql 这些参数的意思: -DCMAKE_INSTALL_PREFIX=/data/mysql 准备安装到那里 -DEFAULT_CHARSET=utf8 默认的字符集 -DMYSQL_TCP_PORT=3306 数据库的监听端口 -DMYSQL_UNIX_ADDR=/tmp/mysql3306.sock 本机连回数据库的unix socket -DWITH_DEBUG=0 关闭debug模式 -DWITH_INNOBASE_STORAGE_ENGINE=1 打开innodb引擎 make &amp;&amp; make install 项目删除： CMake 默认不提供 uninstall 这个 target，想要的话，输入： xargs rm &lt; install_manifest.txt 对于不修改配置的项目足够了，manifest.txt 是CMake 生成的安装文件列表。","tags":[{"name":"cmake","slug":"cmake","permalink":"http://www.jiliuke.com/tags/cmake/"},{"name":"configure","slug":"configure","permalink":"http://www.jiliuke.com/tags/configure/"}]},{"title":"php-fpm进程关闭与重启脚本详解","date":"2015-03-30T02:43:05.000Z","path":"2015/03/30/php-fpm-e8-bf-9b-e7-a8-8b-e5-85-b3-e9-97-ad-e4-b8-8e-e9-87-8d-e5-90-af-e8-84-9a-e6-9c-ac-e8-af-a6-e8-a7-a3/","text":"今天我来给各位同学介绍一下关于php-fpm进程关闭与重启命令吧，PHP-FPM是一个PHP FastCGI管理器，是只用于PHP的并且PHP5.3.3已经集成php-fpm了，不再是第三方的包了哦。 先来理解一下什么是php-fpm PHP-FPM是一个PHP FastCGI管理器，是只用于PHP的。 PHP-FPM其实是PHP源代码的一个补丁，旨在将FastCGI进程管理整合进PHP包中。必须将它patch到你的PHP源代码中，在编译安装PHP后才可以使用。 现在我们可以在最新的PHP 5.3.2的源码树里下载得到直接整合了PHP-FPM的分支，据说下个版本会融合进PHP的主分支去。相对Spawn-FCGI，PHP-FPM在CPU和内存方面的控制都更胜一筹，而且前者很容易崩溃，必须用crontab进行监控，而PHP-FPM则没有这种烦恼。 PHP5.3.3已经集成php-fpm了，不再是第三方的包了。PHP-FPM提供了更好的PHP进程管理方式，可以有效控制内存和进程、可以平滑重载PHP配置，比spawn-fcgi具有更多优点，所以被PHP官方收录了。在./configure的时候带 –enable-fpm参数即可开启PHP-FPM。 使用PHP-FPM来控制PHP-CGI的FastCGI进程 master进程可以理解以下信号 INT, TERM 立刻终止 QUIT 平滑终止 USR1 重新打开日志文件 USR2 平滑重载所有worker进程并重新载入配置和二进制模块 示例： php-fpm 关闭： kill -INT `cat /usr/local/php/var/run/php-fpm.pid` php-fpm 重启： kill -USR2 `cat /usr/local/php/var/run/php-fpm.pid` 查看php-fpm进程数： ps aux | grep -c php-fpm php-fmp的重启 (方法二） 先执行 killall php-fpm 再执行(usr/local/php是php的安装目录) /usr/local/php/sbin/php-fpm &amp;","tags":[{"name":"php-fpm","slug":"php-fpm","permalink":"http://www.jiliuke.com/tags/php-fpm/"},{"name":"fpm","slug":"fpm","permalink":"http://www.jiliuke.com/tags/fpm/"}]},{"title":"使用 Telnet 端口 25 测试 SMTP 通信","date":"2015-03-11T05:40:43.000Z","path":"2015/03/11/e4-bd-bf-e7-94-a8-telnet-e7-ab-af-e5-8f-a3-25-e6-b5-8b-e8-af-95-smtp-e9-80-9a-e4-bf-a1/","text":"目标 SMTP 服务器 mail1.fabrikam.com 源域 contoso.com 发件人的电子邮件地址 &#x63;&#x68;&#x72;&#x69;&#x73;&#64;&#99;&#111;&#110;&#116;&#x6f;&#x73;&#111;&#46;&#99;&#x6f;&#x6d; 收件人的电子邮件地址 &#107;&#97;&#x74;&#101;&#64;&#102;&#97;&#x62;&#x72;&#105;&#x6b;&#97;&#x6d;&#46;&#x63;&#x6f;&#x6d; 邮件主题 来自 Contoso 的测试 邮件正文 这是一封测试邮件 使用 Telnet 端口 25 测试 SMTP 通信 在命令提示符下，键入 telnet，再按 Enter 键。此命令将打开 Telnet 会话。 键入 set localecho，再按 Enter 键。此可选命令可使您在键入字符时查看这些字符。某些 SMTP 服务器可能需要此设置。 键入 set logfile &lt;文件名&gt;。此可选命令可以将 Telnet 会话记录到指定的日志文件中。如果您仅指定了文件名，则日志文件的位置将是当前工作目录。如果您指定了路径和文件名，该路径必须位于计算机本地。指定的路径和文件名都必须以 Microsoft DOS 8.3 格式输入。您指定的路径必须已存在。如果您指定了一个不存在的日志文件，系统将为您创建一个日志文件。 键入 open mail1.fabrikam.com 25，再按 ENTER 键。 键入 EHLO contoso.com，再按 ENTER 键。 键入 MAIL FROM:&#99;&#x68;&#114;&#105;&#115;&#64;&#x63;&#111;&#110;&#x74;&#x6f;&#x73;&#111;&#x2e;&#99;&#x6f;&#109;，再按 ENTER 键。 键入 RCPT TO:&#x6b;&#97;&#116;&#101;&#x40;&#x66;&#97;&#x62;&#114;&#x69;&#x6b;&#x61;&#109;&#46;&#99;&#111;&#109; NOTIFY=success,failure，再按 ENTER 键。可选的 NOTIFY 命令可定义目标 SMTP 服务器必须向发件人提供的特定传递状态通知 (DSN) 邮件。DSN 邮件是在 RFC 1891 中定义的。在本例中，您要查询有关邮件传递成功或失败的 DSN 邮件。 键入 DATA，再按 Enter 键。您将收到与以下类似的响应： 354 Start mail input; end with . 键入 主题：来自 Contoso 的测试，再按 ENTER 键。 按 Enter 键。RFC 2822 需要在 Subject: 头字段和邮件正文间留一个空行。 键入 这是一封测试邮件，再按 ENTER 键。 按 ENTER 键，键入句点 ( . )，再按 ENTER 键。您将收到与以下类似的响应： 250 2.6.0 Queued mail for delivery 若要与目标 SMTP 服务器断开连接，请键入 QUIT，再按 ENTER 键。您将收到与以下类似的响应： 221 2.0.0 Service closing transmission channel 若要关闭 Telnet 会话，请键入 quit，再按 ENTER 键。 解释 Telnet 会话与 SMTP 服务器的结果 针对您在以上示例中输入的命令，本节提供有关这些命令响应的详细信息。 注意： 在 RFC 2821 中定义的三位数 SMTP 响应代码对于所有 SMTP 邮件服务器都相同。对于某些 SMTP 邮件服务器，文本说明可能稍有不同。在本示例中，目标计算机正在运行 Exchange Server 2007。 打开 mail1.fabrikam.com 25 成功响应 220 mail1.fabrikam.com Microsoft ESMTP MAIL Service ready at 失败响应 Connecting to mail1.fabrikam.com…Could not open connection to the host, on port 25: Connect failed 失败的可能原因 目标 SMTP 服务不可用。 对目标防火墙有所限制。 对源防火墙有所限制。 指定的目标 SMTP 服务器的 FQDN 或 IP 地址不正确。 指定的端口号不正确。 EHLO contoso.com 成功响应 250 mail1.fabrikam.com Hello [] 失败响应 501 5.5.4 Invalid domain name 失败的可能原因 域名中存在无效字符。或者，存在有关目标 SMTP 服务器的连接限制。 注意： EHLO 是扩展的简单邮件传输协议 (ESMTP) 命令动词，该命令动词是在 RFC 2821 中定义的。ESMTP 服务器可在初始连接时公布其功能。这些功能包括其最大的可接受邮件大小以及其支持的身份验证方法。HELO 是 RFC 821 中定义的旧版 SMTP 命令动词。多数 SMTP 邮件服务器都支持 ESMTP 和 EHLO。 MAIL FROM:&#x63;&#x68;&#x72;&#105;&#x73;&#x40;&#99;&#111;&#x6e;&#116;&#x6f;&#115;&#x6f;&#x2e;&#x63;&#111;&#x6d; 成功响应 250 2.1.0 Sender OK 失败响应 550 5.1.7 Invalid address 可能的失败原因 发件人的电子邮件地址中存在语法错误。 失败响应 530 5.7.1 Client was not authenticated 可能的失败原因 目标服务器不接受匿名邮件提交。如果您试图使用 Telnet 直接向集线器传输服务器提交邮件，则将收到此错误消息。 RCPT TO:&#x6b;&#97;&#x74;&#101;&#64;&#102;&#97;&#98;&#114;&#x69;&#x6b;&#x61;&#x6d;&#x2e;&#x63;&#x6f;&#x6d; NOTIFY=success,failure 成功响应 250 2.1.5 Recipient OK 失败响应 550 5.1.1 User unknown 可能的失败原因 指定的收件人在组织中不存在。","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"SMTP","slug":"SMTP","permalink":"http://www.jiliuke.com/tags/SMTP/"},{"name":"iredmail","slug":"iredmail","permalink":"http://www.jiliuke.com/tags/iredmail/"}]},{"title":"iredmail 问题集锦","date":"2015-03-11T05:39:31.000Z","path":"2015/03/11/iredmail-e9-97-ae-e9-a2-98-e9-9b-86-e9-94-a6/","text":"配置好后发现收邮件很慢 多半是灰名单引起的， telnet 25测试出现这个Recipient address rejected: Greylisting in effect，请到/etc/policyd/cluebringer.conf中查找Greylisting, # Greylisting module [Greylisting] enable=1 enable=1改为0 然后重启灰名单处理即可 /etc/init.d/cbpolicyd restart","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"iredmail","slug":"iredmail","permalink":"http://www.jiliuke.com/tags/iredmail/"}]},{"title":"CentOS 6.2最小化安装后再安装图形界面","date":"2015-03-11T05:38:18.000Z","path":"2015/03/11/centos-6-2-e6-9c-80-e5-b0-8f-e5-8c-96-e5-ae-89-e8-a3-85-e5-90-8e-e5-86-8d-e5-ae-89-e8-a3-85-e5-9b-be-e5-bd-a2-e7-95-8c-e9-9d-a2/","text":"在安装CentOS 6.2时发现它没有提示我要怎么安装，而是“自作主张”地给我选择了最小化安装，结果装完之后只有终端界面，因为有时候不得不用图形界面，所以如果没有图形界面也是很麻烦的。 后来通过百度才知道为什么它不让我选了，因为我用的是虚拟机，由于物理机本身配置就不高，所以我就没给虚拟机分配太多内存，而CentOS 6.2会根据你分配的内存大小决定安装方式，具体的界定我也忘记了，好像是512M还是1G，不过没关系，我们可以自己来安装图形界面，下面来说一下怎么安装。 1.yum -y groupinstall Desktop 2.yum -y groupinstall “X Window System” 3.yum -y groupinstall chinese-support 4.编辑/etc/sysconfig/i18n文件，将en_US改成zh_CN 5.init 5 经过以上5个步骤就可以进入图形界面了，因为我的默认语言是英文，所以才有第3、4步，如果你安装时选择的是中文，就可以跳过第3、4步了。 因为CentOS 6.2图形界面需要中文支持，所以安装中文包是必须的。","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"desktop","slug":"desktop","permalink":"http://www.jiliuke.com/tags/desktop/"}]},{"title":"CentOS 6.3 NFS的安装配置、启动及mount挂载方法","date":"2015-03-11T05:36:40.000Z","path":"2015/03/11/centos-6-3-nfs-e7-9a-84-e5-ae-89-e8-a3-85-e9-85-8d-e7-bd-ae-e3-80-81-e5-90-af-e5-8a-a8-e5-8f-8amount-e6-8c-82-e8-bd-bd-e6-96-b9-e6-b3-95/","text":"一、环境介绍： 服务器：centos 192.168.1.225 客户端：centos 192.168.1.226 二、安装： NFS的安装配置： centos 5 : yum -y install nfs-utils portmap centos 6(在CentOS 6.3当中，portmap服务由rpcbind负责) : yum -y install nfs-utils rpcbind 三、服务器端配置： 1、创建共享目录： [root@centos2 /]# mkdir /usr/local/test 2、NFS文件配置： [root@centos2 /]# vi /etc/exports #增加一行： /usr/local/test/ 192.168.1.226(rw,no_root_squash,no_all_squash,sync) :x保存退出； 使配置生效： [root@centos2 /]# exportfs -r 注：配置文件说明： /usr/local/test/ 为共享的目录，使用绝对路径。 192.168.1.226(rw,no_root_squash,no_all_squash,sync) 为客户端的地址及权限，地址可以是一个网段，一个IP地址或者是一个域名，域名支持通配符，如：*.youxia.com，地址与权限中间没有空格，权限说明： rw：read-write，可读写； ro：read-only，只读； sync：文件同时写入硬盘和内存； async：文件暂存于内存，而不是直接写入内存； no_root_squash：NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，也拥有root权限。显然开启这项是不安全的。 root_squash：NFS客户端连接服务端时如果使用的是root的话，那么对服务端分享的目录来说，拥有匿名用户权限，通常他将使用nobody或nfsnobody身份； all_squash：不论NFS客户端连接服务端时使用什么用户，对服务端分享的目录来说都是拥有匿名用户权限； anonuid：匿名用户的UID值，通常是nobody或nfsnobody，可以在此处自行设定； anongid：匿名用户的GID值。 3、启动: centos6: [root@centos2 /]# service rpcbind start Starting rpcbind: [ OK ] [root@centos2 /]# service nfs start Starting NFS services: [ OK ] Starting NFS quotas: [ OK ] Starting NFS mountd: [ OK ] Stopping RPC idmapd: [ OK ] Starting RPC idmapd: [ OK ] Starting NFS daemon: [ OK ] [root@centos2 /]# centos 5 [root@centos2 /]# service portmap start [root@centos2 /]# service nfs start [root@centos2 /]# 四、客户端挂载： 1、创建需要挂载的目录： [root@localhost ~]# mkdir /usr/local/test [root@localhost ~]# 2、测试挂载： [root@localhost ~]# showmount -e 192.168.1.225 Export list for 192.168.1.225: /usr/local/test 192.168.1.226 [root@localhost ~]# 如果显示：rpc mount export: RPC: Unable to receive; errno = No route to host，则需要在服务端关闭防火墙（稍候会详细说）。 3、挂载： [root@localhost ~]# mount -t nfs 192.168.1.225:/usr/local/test /usr/local/test [root@localhost ~]# mount /dev/mapper/VolGroup-lv_root on / type ext4 (rw) proc on /proc type proc (rw) sysfs on /sys type sysfs (rw) devpts on /dev/pts type devpts (rw,gid=5,mode=620) tmpfs on /dev/shm type tmpfs (rw) /dev/sda1 on /boot type ext4 (rw) none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw) sunrpc on /var/lib/nfs/rpc_pipefs type rpc_pipefs (rw) nfsd on /proc/fs/nfsd type nfsd (rw) 192.168.1.225:/usr/local/test on /usr/local/test type nfs (rw,vers=4,addr=192.168.1.225,clientaddr=192.168.1.226) [root@localhost ~]# 如果信息如上显示则挂载成功！ 4、测试： 客户端生成一个文件： [root@centos2 /]# cd /usr/local/test/ [root@centos2 test]# echo “hello nfs test”&gt;&gt;test [root@centos2 test]# ll total 4 -rw-r–r– 1 root root 15 Apr 9 13:24 test [root@centos2 test]# 服务端检查： [root@centos2 /]# cd /usr/local/test/ [root@centos2 test]# ll total 4 -rw-r–r– 1 root root 15 Apr 9 13:24 test [root@centos2 test]# 挂载成功！ 五、解除挂载： [root@localhost ~]# umount /usr/local/test [root@localhost ~]# mount /dev/mapper/VolGroup-lv_root on / type ext4 (rw) proc on /proc type proc (rw) sysfs on /sys type sysfs (rw) devpts on /dev/pts type devpts (rw,gid=5,mode=620) tmpfs on /dev/shm type tmpfs (rw) /dev/sda1 on /boot type ext4 (rw) none on /proc/sys/fs/binfmt_misc type binfmt_misc (rw) sunrpc on /var/lib/nfs/rpc_pipefs type rpc_pipefs (rw) nfsd on /proc/fs/nfsd type nfsd (rw) [root@localhost ~]# 如果遇到：umount.nfs: /usr/local/test: device is busy 可能用命令： [root@localhost /]# fuser -m -v /usr/local/test 用户 进程号 权限 命令 /usr/local/test/: root 2798 ..c.. bash root 2996 ..c.. su [root@localhost /]# kill -9 2798 [root@localhost /]# kill -9 2996 [root@localhost /]# umount /usr/local/test [root@localhost /]# 六、服务器端防火墙设置（NFS 开启防墙配置）： 1、修改/etc/service,添加以下内容（端口号必须在1024以下,且未被占用） # Local services mountd 1011/tcp #rpc.mountd mountd 1011/udp #rpc.mountd rquotad 1012/tcp #rpc.rquotad rquotad 1012/udp #rpc.rquotad 2、重起Linux NFS服务 service nfs restart 3、此时rpc相关端口已经被固定,可以为Linux NFS添加防火墙规则 #portmap /sbin/iptables -A INPUT -s 192.168.1.0/254 -p tcp –dport 111 -j ACCEPT /sbin/iptables -A INPUT -s 192.168.1.0/254 -p udp –dport 111 -j ACCEPT #nfsd /sbin/iptables -A INPUT -s 192.168.1.0/254 -p tcp –dport 2049 -j ACCEPT /sbin/iptables -A INPUT -s 192.168.1.0/254 -p udp –dport 2049 -j ACCEPT #mountd /sbin/iptables -A INPUT -s 192.168.1.0/254 -p tcp –dport 1011 -j ACCEPT /sbin/iptables -A INPUT -s 192.168.1.0/254 -p udp –dport 1011 -j ACCEPT #rquotad /sbin/iptables -A INPUT -s 192.168.1.0/254 -p tcp –dport 1012 -j ACCEPT /sbin/iptables -A INPUT -s 192.168.1.0/254 -p udp –dport 1012 -j ACCEPT #rpc.statd /sbin/iptables -A INPUT -s 192.168.1.0/254 -p tcp –dport 32768 -j ACCEPT /sbin/iptables -A INPUT -s 192.168.1.0/254 -p udp –dport 32768 -j ACCEPT —TCP方法成功——————————————- -A INPUT -m state –state NEW -m tcp -p tcp –dport 111 -j ACCEPT -A INPUT -m state –state NEW -m tcp -p tcp –dport 2049 -j ACCEPT -A INPUT -m state –state NEW -m tcp -p tcp –dport 1011 -j ACCEPT -A INPUT -m state –state NEW -m tcp -p tcp –dport 1012 -j ACCEPT -A INPUT -m state –state NEW -m tcp -p tcp –dport 32768 -j ACCEPT 客户端在挂载的时候遇到的一个问题如下，可能是网络不太稳定，NFS默认是用UDP协议，换成TCP协议即可： mount -t nfs 192.168.1.225:/usr/local/test /usr/local/test -o proto=tcp -o nolock /etc/init.d/iptables restart #最后重启防火墙使配置生效 防火墙端口说明： portmap或者rpcbind(CentOS 6.x)使用：tcp/udp 111 nfs使用:tcp/udp 2049 mountd使用: TCP/UDP 892 rquotad使用：tcp/udp 875 status使用: TCP/UDP 1001-1004共四个端口 nlockmgr使用:TCP/32803端口 UDP/32769端口 rpcinfo -p 查看rpcbind使用的端口号","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"nfs","slug":"nfs","permalink":"http://www.jiliuke.com/tags/nfs/"},{"name":"mount","slug":"mount","permalink":"http://www.jiliuke.com/tags/mount/"}]},{"title":"Centos 安装 crontab","date":"2015-03-11T05:35:25.000Z","path":"2015/03/11/centos-e5-ae-89-e8-a3-85-crontab/","text":"安装crontab: yum install crontabs 说明： /sbin/service crond start //启动服务 /sbin/service crond stop //关闭服务 /sbin/service crond restart //重启服务 /sbin/service crond reload //重新载入配置 查看crontab服务状态： service crond status 手动启动crontab服务： service crond start 查看crontab服务是否已设置为开机启动，执行命令： ntsysv 加入开机自动启动: chkconfig –level 35 crond on 1，crontab命令 功能说明：设置计时器。 语 法：crontab [-u &lt;用户名称&gt;][配置文件] 或 crontab [-u &lt;用户名称&gt;][-elr] 补充说明：cron是一个常驻服务，它提供计时器的功能，让用户在特定的时间得以执行预设的指令或程序。只要用户会编辑计时器的配置文件，就可以使 用计时器的功能。其配置文件格式如下： Minute Hour Day Month DayOFWeek Command 参 数： -e 编辑该用户的计时器设置。 -l 列出该用户的计时器设置。 -r 删除该用户的计时器设置。 -u&lt;用户名称&gt; 指定要设定计时器的用户名称。 2，crontab 格式 基本格式 : * * * * * command 分 时 日 月 周 命令 第1列表示分钟1～59 每分钟用或者 /1表示 第2列表示小时1～23（0表示0点） 第3列表示日期1～31 第4列 表示月份1～12 第5列标识号星期0～6（0表示星期天） 第6列要运行的命令 crontab特殊的符号说明： ““代表所有的取值范围内的数字。特别要注意哦！ “/“代表每的意思，如”/5”表示每5个单位 “-“代表从某个数字到某个数字 “,”分散的数字 crontab文件的一些例子： 30 21 * * * /usr/local/etc/rc.d/lighttpd restart 上面的例子表示每晚的21:30重启 apache。 45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart 上面的例子表示每月1、 10、22日的4 : 45重启apache。 10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart 上面的例子表示每周六、周日的1 : 10重启apache。 0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart 上面的例子表示在每天18 : 00至23 : 00之间每隔30分钟重启apache。 0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart 上面的例子表示每星期六的11 : 00 pm重启apache。 * */1 * * * /usr/local/etc/rc.d/lighttpd restart 每一小时重启apache * 23-7/1 * * * /usr/local/etc/rc.d/lighttpd restart 晚上11点到早上7点之间，每 隔一小时重启apache 0 11 4 * mon-wed /usr/local/etc/rc.d/lighttpd restart 每月的4号与每周一到周三 的11点重启apache 0 4 1 jan * /usr/local/etc/rc.d/lighttpd restart 一月一号的4点重启apache */30 * * * * /usr/sbin/ntpdate 210.72.145.44 每半小时同步一下时间 ——————————– 如何查看crontab的日志记录 ——————————————————– 昨天crontab中的同步任务没有执行，不知道是什么原因没有执行，貌似任务hang住了，想查询一下crontab到底问题出在哪里，或者hang在了什么地方。 1. linux 看 /var/log/cron这个文件就可以，可以用tail -f /var/log/cron观察 2. unix 在 /var/spool/cron/tmp文件中，有croutXXX001864的tmp文件，tail 这些文件就可以看到正在执行的任务了。 3. mail任务 在 /var/spool/mail/root 文件中，有crontab执行日志的记录，用tail -f /var/spool/mail/root 即可查看最近的crontab执行情况。","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"crontab","slug":"crontab","permalink":"http://www.jiliuke.com/tags/crontab/"}]},{"title":"关于PHP str_replace()","date":"2015-01-20T08:53:26.000Z","path":"2015/01/20/264/","text":"关于PHP str_replace() $string = ‘2’; $array1 = array(‘0’,’1’,’2’); $array2 = array(‘替换0’,’替换1’,’替换2’); str_replace($array1,$array2,$string); 上述方法可以实现，但是如果是： $string = ‘10’; $array1 = array(‘0’,’1’,’2’，’10’); $array2 = array(‘替换0’,’替换1’,’替换2’,’替换10’); str_replace($array1,$array2,$string); 则不能成功！","tags":[{"name":"PHP","slug":"PHP","permalink":"http://www.jiliuke.com/tags/PHP/"},{"name":"str_replace","slug":"str-replace","permalink":"http://www.jiliuke.com/tags/str-replace/"}]},{"title":"php 16位 md5加密乱码的解决方法","date":"2015-01-07T09:07:37.000Z","path":"2015/01/07/php-16-e4-bd-8d-md5-e5-8a-a0-e5-af-86-e4-b9-b1-e7-a0-81-e7-9a-84-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95/","text":"PHP默认的md5加密是32位的, 虽然php从5.0开始说是可以16位加密的, 但是16位加密会出现乱码问题. md5($str, true)后跟true参数时为16位，但很多时候会出现乱码（因为生成的二进制有不可显示字符！） 其实32位的加密字符串的第8到24位，和16位MD5的字符串是一样的。 我们可以先32位加密，再用substr()来截取； function md5_16($str){ return substr(md5($str),8,16); } $str = “http://tools.jiliuke.com&quot;; echo md5($str); echo md5_16($str); 输出结果： 0b8e0d6246125a11a1223bd9c6977770 46125a11a1223bd9 php 16位加密也可以这样来写: substr(md5(“admin”),8,-8);","tags":[{"name":"PHP","slug":"PHP","permalink":"http://www.jiliuke.com/tags/PHP/"},{"name":"md5","slug":"md5","permalink":"http://www.jiliuke.com/tags/md5/"},{"name":"php md5 16","slug":"php-md5-16","permalink":"http://www.jiliuke.com/tags/php-md5-16/"}]},{"title":"JQuery UI datepicker 使用方法","date":"2015-01-07T09:06:19.000Z","path":"2015/01/07/jquery-ui-datepicker-e4-bd-bf-e7-94-a8-e6-96-b9-e6-b3-95/","text":"官方地址：http://docs.jquery.com/UI/Datepicker，官方示例： http://jqueryui.com/demos/datepicker/。 一个不错的地址，用来DIY jQuery UI界面效果的站点http://jqueryui.com/themeroller/ DatePicker基本使用方法： 代码如下: $(document).ready(function() { $(\"#datepicker\").datepicker(); }); DatePicker支持鼠标点选日期，同时还可以通过键盘控制选择： page up/down - 上一月、下一月ctrl+page up/down - 上一年、下一年ctrl+home - 当前月或最后一次打开的日期ctrl+left/right - 上一天、下一天ctrl+up/down - 上一周、下一周enter - 确定选择日期ctrl+end - 关闭并清除已选择的日期escape - 关闭并取消选择 实用功能： $.datepicker.setDefaults( settings ) - 全局设置日期选择插件的参数.$.datepicker.formatDate( format, date, settings ) - 格式化显示的日期字符串$.datepicker.iso8601Week( date ) - 给出一个日期，确实他是一年中的第几周$.datepicker.parseDate( format, value, settings ) - 按照指定格式获取日期字符串 日期格式： d - 每月的第几天 (没有前导零)dd - 每月的第几天 (两位数字)o - 一年中的第几天 (没有前导零)oo - 一年中的第几天 (三位数字)D - day name shortDD - day name longm - 月份 (没有前导零)mm - 月份 (两位数字)M - month name shortMM - month name longy - 年份 (两位数字)yy - 年份 (四位数字)@ - Unix 时间戳 (从 01/01/1970 开始)‘…’ - 文本‘’ - 单引号（其它） - 文本 其它标准日期格式: ATOM - ‘yy-mm-dd’ (Same as RFC 3339/ISO 8601)COOKIE - ‘D, dd M yy’ISO_8601 - ‘yy-mm-dd’RFC_822 - ‘D, d M y’RFC_850 - ‘DD, dd-M-y’RFC_1036 - ‘D, d M yRFC_1123 - ‘D, d M yy’RFC_2822 - ‘D, d M yy’RSS - ‘D, d M y’TIMESTAMP - ‘@’W3C - ‘yy-mm-dd’ 参数（参数名 : 参数类型 : 默认值） altField : String : ‘’将选择的日期同步到另一个域中，配合altFormat可以显示不同格式的日期字符串。初始：$(‘.selector’).datepicker({ altField: ‘#actualDate’ });获取：var altField = $(‘.selector’).datepicker(‘option’, ‘altField’);设置：$(‘.selector’).datepicker(‘option’, ‘altField’, ‘#actualDate’); altFormat : String : ‘’当设置了altField的情况下，显示在另一个域中的日期格式。初始：$(‘.selector’).datepicker({ altFormat: ‘yy-mm-dd’ });获取：var altFormat = $(‘.selector’).datepicker(‘option’, ‘altFormat’);设置：$(‘.selector’).datepicker(‘option’, ‘altFormat’, ‘yy-mm-dd’); appendText : String : ‘’在日期插件的所属域后面添加指定的字符串。初始：$(‘.selector’).datepicker({ appendText: ‘(yyyy-mm-dd)’ });获取：var appendText = $(‘.selector’).datepicker(‘option’, ‘appendText’);设置：$(‘.selector’).datepicker(‘option’, ‘appendText’, ‘(yyyy-mm-dd)’); buttonImage : String : ‘’设置弹出按钮的图片，如果非空，则按钮的文本将成为alt属性，不直接显示。初始：$(‘.selector’).datepicker({ buttonImage: ‘/images/datepicker.gif’ });获取：var buttonImage = $(‘.selector’).datepicker(‘option’, ‘buttonImage’);设置：$(‘.selector’).datepicker(‘option’, ‘buttonImage’, ‘/images/datepicker.gif’); buttonImageOnly : Boolean : falseSet to true to place an image after the field to use as the trigger without it appearing on a button.初始：$(‘.selector’).datepicker({ buttonImageOnly: true });获取：var buttonImageOnly = $(‘.selector’).datepicker(‘option’, ‘buttonImageOnly’);设置：$(‘.selector’).datepicker(‘option’, ‘buttonImageOnly’, true); buttonText : String : ‘…’设置触发按钮的文本内容。初始：$(‘.selector’).datepicker({ buttonText: ‘Choose’ });获取：var buttonText = $(‘.selector’).datepicker(‘option’, ‘buttonText’);设置：$(‘.selector’).datepicker(‘option’, ‘buttonText’, ‘Choose’); changeMonth : Boolean : false设置允许通过下拉框列表选取月份。初始：$(‘.selector’).datepicker({ changeMonth: true });获取：var changeMonth = $(‘.selector’).datepicker(‘option’, ‘changeMonth’);设置：$(‘.selector’).datepicker(‘option’, ‘changeMonth’, true); changeYear : Boolean : false设置允许通过下拉框列表选取年份。初始：$(‘.selector’).datepicker({ changeYear: true });获取：var changeYear = $(‘.selector’).datepicker(‘option’, ‘changeYear’);设置：$(‘.selector’).datepicker(‘option’, ‘changeYear’, true); closeTextType: StringDefault: ‘Done’设置关闭按钮的文本内容，此按钮需要通过showButtonPanel参数的设置才显示。初始：$(‘.selector’).datepicker({ closeText: ‘X’ });获取：var closeText = $(‘.selector’).datepicker(‘option’, ‘closeText’);设置：$(‘.selector’).datepicker(‘option’, ‘closeText’, ‘X’); constrainInput : Boolean : true如果设置为true，则约束当前输入的日期格式。初始：$(‘.selector’).datepicker({ constrainInput: false });获取：var constrainInput = $(‘.selector’).datepicker(‘option’, ‘constrainInput’);设置：$(‘.selector’).datepicker(‘option’, ‘constrainInput’, false); currentText : String : ‘Today’设置当天按钮的文本内容，此按钮需要通过showButtonPanel参数的设置才显示。初始：$(‘.selector’).datepicker({ currentText: ‘Now’ });获取：var currentText = $(‘.selector’).datepicker(‘option’, ‘currentText’);设置：$(‘.selector’).datepicker(‘option’, ‘currentText’, ‘Now’); dateFormat : String : ‘mm/dd/yy’设置日期字符串的显示格式。初始：$(‘.selector’).datepicker({ dateFormat: ‘yy-mm-dd’ });获取：var dateFormat = $(‘.selector’).datepicker(‘option’, ‘dateFormat’);设置：$(‘.selector’).datepicker(‘option’, ‘dateFormat’, ‘yy-mm-dd’); dayNames : Array : [‘Sunday’, ‘Monday’, ‘Tuesday’, ‘Wednesday’, ‘Thursday’, ‘Friday’, ‘Saturday’]设置一星期中每天的名称，从星期天开始。此内容用于dateFormat时显示，以及日历中当鼠标移至行头时显示。初始：$(‘.selector’).datepicker({ dayNames: [‘Dimanche’, ‘Lundi’, ‘Mardi’, ‘Mercredi’, ‘Jeudi’, ‘Vendredi’, ‘Samedi’] });获取：var dayNames = $(‘.selector’).datepicker(‘option’, ‘dayNames’);设置：$(‘.selector’).datepicker(‘option’, ‘dayNames’, [‘Dimanche’, ‘Lundi’, ‘Mardi’, ‘Mercredi’, ‘Jeudi’, ‘Vendredi’, ‘Samedi’]); dayNamesMin : Array : [‘Su’, ‘Mo’, ‘Tu’, ‘We’, ‘Th’, ‘Fr’, ‘Sa’]设置一星期中每天的缩语，从星期天开始，此内容用于dateFormat时显示，以前日历中的行头显示。初始：$(‘.selector’).datepicker({ dayNamesMin: [‘Di’, ‘Lu’, ‘Ma’, ‘Me’, ‘Je’, ‘Ve’, ‘Sa’] });获取：var dayNamesMin = $(‘.selector’).datepicker(‘option’, ‘dayNamesMin’);设置：$(‘.selector’).datepicker(‘option’, ‘dayNamesMin’, [‘Di’, ‘Lu’, ‘Ma’, ‘Me’, ‘Je’, ‘Ve’, ‘Sa’]); dayNamesShort : Array : [‘Sun’, ‘Mon’, ‘Tue’, ‘Wed’, ‘Thu’, ‘Fri’, ‘Sat’]设置一星期中每天的缩语，从星期天开始，此内容用于dateFormat时显示，以前日历中的行头显示。初始：$(‘.selector’).datepicker({ dayNamesShort: [‘Dim’, ‘Lun’, ‘Mar’, ‘Mer’, ‘Jeu’, ‘Ven’, ‘Sam’] });获取：var dayNamesShort = $(‘.selector’).datepicker(‘option’, ‘dayNamesShort’);设置：$(‘.selector’).datepicker(‘option’, ‘dayNamesShort’, [‘Dim’, ‘Lun’, ‘Mar’, ‘Mer’, ‘Jeu’, ‘Ven’, ‘Sam’]); defaultDate : Date, Number, String : null设置默认加载完后第一次显示时选中的日期。可以是Date对象，或者是数字（从今天算起，例如+7），或者有效的字符串(‘y’代表年, ‘m’代表月, ‘w’代表周, ‘d’代表日, 例如：’+1m +7d’)。初始：$(‘.selector’).datepicker({ defaultDate: +7 });获取：var defaultDate = $(‘.selector’).datepicker(‘option’, ‘defaultDate’);设置：$(‘.selector’).datepicker(‘option’, ‘defaultDate’, +7); duration : String, Number : ‘normal’设置日期控件展开动画的显示时间，可选是”slow”, “normal”, “fast”，’’代表立刻，数字代表毫秒数。初始：$(‘.selector’).datepicker({ duration: ‘slow’ });获取：var duration = $(‘.selector’).datepicker(‘option’, ‘duration’);设置：$(‘.selector’).datepicker(‘option’, ‘duration’, ‘slow’); firstDay : Number : 0设置一周中的第一天。星期天为0，星期一为1，以此类推。初始：$(‘.selector’).datepicker({ firstDay: 1 });获取：var firstDay = $(‘.selector’).datepicker(‘option’, ‘firstDay’);设置：$(‘.selector’).datepicker(‘option’, ‘firstDay’, 1); gotoCurrent : Boolean : false如果设置为true，则点击当天按钮时，将移至当前已选中的日期，而不是今天。初始：$(‘.selector’).datepicker({ gotoCurrent: true });获取：var gotoCurrent = $(‘.selector’).datepicker(‘option’, ‘gotoCurrent’);设置：$(‘.selector’).datepicker(‘option’, ‘gotoCurrent’, true); hideIfNoPrevNext : Boolean : false设置当没有上一个/下一个可选择的情况下，隐藏掉相应的按钮。（默认为不可用）初始：$(‘.selector’).datepicker({ hideIfNoPrevNext: true });获取：var hideIfNoPrevNext = $(‘.selector’).datepicker(‘option’, ‘hideIfNoPrevNext’);设置：$(‘.selector’).datepicker(‘option’, ‘hideIfNoPrevNext’, true); isRTL : Boolean : false如果设置为true，则所有文字是从右自左。初始：$(‘.selector’).datepicker({ isRTL: true });获取：var isRTL = $(‘.selector’).datepicker(‘option’, ‘isRTL’);设置：$(‘.selector’).datepicker(‘option’, ‘isRTL’, true); maxDate : Date, Number, String : null设置一个最大的可选日期。可以是Date对象，或者是数字（从今天算起，例如+7），或者有效的字符串(‘y’代表年, ‘m’代表月, ‘w’代表周, ‘d’代表日, 例如：’+1m +7d’)。初始：$(‘.selector’).datepicker({ maxDate: ‘+1m +1w’ });获取：var maxDate = $(‘.selector’).datepicker(‘option’, ‘maxDate’);设置：$(‘.selector’).datepicker(‘option’, ‘maxDate’, ‘+1m +1w’);$(‘.selector’).datepicker(‘option’, ‘maxDate’, ‘12/25/2012’); minDate : Date, Number, String : null设置一个最小的可选日期。可以是Date对象，或者是数字（从今天算起，例如+7），或者有效的字符串(‘y’代表年, ‘m’代表月, ‘w’代表周, ‘d’代表日, 例如：’+1m +7d’)。初始：$(‘.selector’).datepicker({ minDate: new Date(2007, 1 - 1, 1) });获取：var minDate = $(‘.selector’).datepicker(‘option’, ‘minDate’);设置：$(‘.selector’).datepicker(‘option’, ‘minDate’, new Date(2007, 1 - 1, 1));$(‘.selector’).datepicker(‘option’, ‘minDate’, ‘12/25/2012’); monthNames : Array : [‘January’, ‘February’, ‘March’, ‘April’, ‘May’, ‘June’, ‘July’, ‘August’, ‘September’, ‘October’, ‘November’, ‘December’]设置所有月份的名称。初始：$(‘.selector’).datepicker(｛monthNames:[‘Januar’,’Februar’,’Marts’,’April’,’Maj’,’Juni’,’Juli’,’August’,’September’,’Oktober’,’November’,’December’]});获取：var monthNames = $(‘.selector’).datepicker(‘option’, ‘monthNames’);设置：$(‘.selector’).datepicker(‘option’, ‘monthNames’, [‘Januar’,’Februar’,’Marts’,’April’,’Maj’,’Juni’,’Juli’,’August’,’September’,’Oktober’,’November’,’December’]); monthNamesShort : Array : [‘Jan’, ‘Feb’, ‘Mar’, ‘Apr’, ‘May’, ‘Jun’, ‘Jul’, ‘Aug’, ‘Sep’, ‘Oct’, ‘Nov’, ‘Dec’]设置所有月份的缩写。初始：$(‘.selector’).datepicker(｛monthNamesShort:[‘Jan’,’Feb’,’Mar’,’Apr’,’Maj’,’Jun’,’Jul’,’Aug’,’Sep’,’Okt’,’Nov’,’Dec’]});获取：var monthNamesShort = $(‘.selector’).datepicker(‘option’, ‘monthNamesShort’);设置：$(‘.selector’).datepicker(‘option’, ‘monthNamesShort’, [‘Jan’,’Feb’,’Mar’,’Apr’,’Maj’,’Jun’,’Jul’,’Aug’,’Sep’,’Okt’,’Nov’,’Dec’]); navigationAsDateFormat : Boolean : false如果设置为true，则formatDate函数将应用到 prevText,nextText和currentText的值中显示，例如显示为月份名称。初始：$(‘.selector’).datepicker({ navigationAsDateFormat: true });获取：var navigationAsDateFormat = $(‘.selector’).datepicker(‘option’, ‘navigationAsDateFormat’);设置：$(‘.selector’).datepicker(‘option’, ‘navigationAsDateFormat’, true); nextText : String : ‘Next’设置“下个月”链接的显示文字。初始：$(‘.selector’).datepicker({ nextText: ‘Later’ });获取：var nextText = $(‘.selector’).datepicker(‘option’, ‘nextText’);设置：$(‘.selector’).datepicker(‘option’, ‘nextText’, ‘Later’); numberOfMonths : Number, Array : 1设置一次要显示多少个月份。如果为整数则是显示月份的数量，如果是数组，则是显示的行与列的数量。初始：$(‘.selector’).datepicker({ numberOfMonths: [2, 3] });获取：var numberOfMonths = $(‘.selector’).datepicker(‘option’, ‘numberOfMonths’);设置：$(‘.selector’).datepicker(‘option’, ‘numberOfMonths’, [2, 3]); prevText : String : ‘Prev’设置“上个月”链接的显示文字。初始：$(‘.selector’).datepicker({ prevText: ‘Earlier’ });获取：var prevText = $(‘.selector’).datepicker(‘option’, ‘prevText’);设置：$(‘.selector’).datepicker(‘option’, ‘prevText’, ‘Earlier’); shortYearCutoff : String, Number : ‘+10’设置截止年份的值。如果是（0-99）的数字则以当前年份开始算起，如果为字符串，则相应的转为数字后再与当前年份相加。当超过截止年份时，则被认为是上个世纪。初始：$(‘.selector’).datepicker({ shortYearCutoff: 50 });获取：var shortYearCutoff = $(‘.selector’).datepicker(‘option’, ‘shortYearCutoff’);设置：$(‘.selector’).datepicker(‘option’, ‘shortYearCutoff’, 50); showAnim : String : ‘show’设置显示、隐藏日期插件的动画的名称。初始：$(‘.selector’).datepicker({ showAnim: ‘fold’ });获取：var showAnim = $(‘.selector’).datepicker(‘option’, ‘showAnim’);设置：$(‘.selector’).datepicker(‘option’, ‘showAnim’, ‘fold’); showButtonPanel : Boolean : false设置是否在面板上显示相关的按钮。初始：$(‘.selector’).datepicker({ showButtonPanel: true });获取：var showButtonPanel = $(‘.selector’).datepicker(‘option’, ‘showButtonPanel’);设置：$(‘.selector’).datepicker(‘option’, ‘showButtonPanel’, true); showCurrentAtPos : Number : 0设置当多月份显示的情况下，当前月份显示的位置。自顶部/左边开始第x位。初始：$(‘.selector’).datepicker({ showCurrentAtPos: 3 });获取：var showCurrentAtPos = $(‘.selector’).datepicker(‘option’, ‘showCurrentAtPos’);设置：$(‘.selector’).datepicker(‘option’, ‘showCurrentAtPos’, 3); showMonthAfterYear : Boolean : false是否在面板的头部年份后面显示月份。初始：$(‘.selector’).datepicker({ showMonthAfterYear: true });获取：var showMonthAfterYear = $(‘.selector’).datepicker(‘option’, ‘showMonthAfterYear’);设置：$(‘.selector’).datepicker(‘option’, ‘showMonthAfterYear’, true); showOn : String : ‘focus’设置什么事件触发显示日期插件的面板，可选值：focus, button, both初始：$(‘.selector’).datepicker({ showOn: ‘both’ });获取：var showOn = $(‘.selector’).datepicker(‘option’, ‘showOn’);设置：$(‘.selector’).datepicker(‘option’, ‘showOn’, ‘both’); showOptions : Options : {}如果使用showAnim来显示动画效果的话，可以通过此参数来增加一些附加的参数设置。初始：$(‘.selector’).datepicker({ showOptions: {direction: ‘up’ });获取：var showOptions = $(‘.selector’).datepicker(‘option’, ‘showOptions’);设置：$(‘.selector’).datepicker(‘option’, ‘showOptions’, {direction: ‘up’); showOtherMonths : Boolean : false是否在当前面板显示上、下两个月的一些日期数（不可选）。初始：$(‘.selector’).datepicker({ showOtherMonths: true });获取：var showOtherMonths = $(‘.selector’).datepicker(‘option’, ‘showOtherMonths’);设置：$(‘.selector’).datepicker(‘option’, ‘showOtherMonths’, true); stepMonths : Number : 1当点击上/下一月时，一次翻几个月。初始：$(‘.selector’).datepicker({ stepMonths: 3 });获取：var stepMonths = $(‘.selector’).datepicker(‘option’, ‘stepMonths’);设置：$(‘.selector’).datepicker(‘option’, ‘stepMonths’, 3); yearRange : String : ‘-10:+10’控制年份的下拉列表中显示的年份数量，可以是相对当前年(-nn:+nn)，也可以是绝对值 (-nnnn:+nnnn)初始：$(‘.selector’).datepicker({ yearRange: ‘2000:2010’ });获取：var yearRange = $(‘.selector’).datepicker(‘option’, ‘yearRange’);设置：$(‘.selector’).datepicker(‘option’, ‘yearRange’, ‘2000:2010’); 事件 beforeShow : function(input)在日期控件显示面板之前，触发此事件，并返回当前触发事件的控件的实例对象。初始：$(‘.selector’).datepicker({ beforeShow: function(input) { … } }); beforeShowDay : function(date)在日期控件显示面板之前，每个面板上的日期绑定时都触发此事件，参数为触发事件的日期。调用函数后，必须返回一个数组：[0]此日期是否可选(true/false)，[1]此日期的CSS样式名称(“”表示默认)，[2]当鼠标移至上面出现一段提示的内容。初始：$(‘.selector’).datepicker({ beforeShowDay: function(date) { … } }); onChangeMonthYear : function(year, month, inst)当年份或月份改变时触发此事件，参数为改变后的年份月份和当前日期插件的实例。初始：$(‘.selector’).datepicker({ onChangeMonthYear: function(year, month, inst) { … } }); onClose : function(dateText, inst)当日期面板关闭后触发此事件（无论是否有选择日期），参数为选择的日期和当前日期插件的实例。初始：$(‘.selector’).datepicker({ onClose: function(dateText, inst) { … } }); onSelect : function(dateText, inst)当在日期面板选中一个日期后触发此事件，参数为选择的日期和当前日期插件的实例。$(‘.selector’).datepicker({ onSelect: function(dateText, inst) { … } }); 方法： destory从元素中移除拖拽功能。用法：.datepicker( ‘destroy’ ) disable禁用元素的拖拽功能。用法：.datepicker( ‘disable’ ) enable启用元素的拖拽功能。用法：.datepicker( ‘enable’ ) option获取或设置元素的参数。用法：.datepicker( ‘option’ , optionName , [value] ) dialog在dialog插件中打开一个日期插件。用法：.datepicker( ‘dialog’ , dateText , [onSelect] , [settings] , [pos] ) isDisabled确实日期插件是否已被禁用。用法：.datepicker( ‘isDisabled’ ) hide隐藏（关闭）之前已经打开的日期面板。用法：.datepicker( ‘hide’ , [speed] ) show.datepicker( ‘show’ )显示日期插件。用法：.datepicker( ‘show’ ) getDate返回当前日期插件选择的日期。用法：.datepicker( ‘getDate’ ) setDate设置日期插件当前的日期。date参数可以是数字（从今天算起，例如+7），或者有效的字符串(‘y’代表年, ‘m’代表月, ‘w’代表周, ‘d’代表日, 例如：’+1m +7d’)，null表示当天。用法：.datepicker( ‘setDate’ , date ) jquery-ui-datepicker的用法讲解 1:先在页面引入相关的js,注意引入顺序不能错 jquery-1.4.2.min.js jquery-ui.min.js jquery.ui.datepicker.min.js jquery.ui.datepicker-zh-CN.min.js jquery.ui.datepicker-fr.min.js ….等等语言包(用到哪些加入哪些) 注意:在语言包的最后一句话设置了该datepicker的缺省Localization 类似这句：setDefaults(….regional[…]) 所以页面的datepicker如果不再自己设置的话，缺省会以最后一个引入的语言包的Localization为准. 2:页面示例 其中的注释已经很清楚了,datepicker的官方文档对于option的设置是先init datepicker,再setter or getter $(function() { //$(\"#datepicker\").datepicker(...);//代表带着...属性直接执行创建datepicker() //必须先init datepicker才能再设置datepicker的option //$(\"#datepicker\").datepicker('option',...,...);//代表设置datepicker的...的属性值为...,但不执行创建datepicker(); //$.datepicker.setDefaults($.datepicker.regional\\['zh-CN'\\]); $.datepicker.setDefaults($.datepicker.regional\\[''\\]);//先清理一下语言包的regional $(\"#datepicker\").datepicker(); $(\"#datepicker\").datepicker('option', $.datepicker.regional\\['zh-CN'\\]); //$(\"#datepicker\").datepicker($.datepicker.regional\\['zh-CN'\\]);//该句执行失效，因为之前有$(\"#datepicker\").datepicker();了 $(\"#datepicker\").datepicker('option', 'dateFormat','yy-mm-dd');//set dateFormat //var dateFormat = $( \"#datepicker\" ).datepicker( \"option\", \"dateFormat\" );//get dateFormat //$(\"#datepicker\").datepicker('option', {dateFormat: 'yy-mm-dd'});//set dateFormat });","tags":[{"name":"jquery","slug":"jquery","permalink":"http://www.jiliuke.com/tags/jquery/"},{"name":"datepicker","slug":"datepicker","permalink":"http://www.jiliuke.com/tags/datepicker/"},{"name":"jquery ui","slug":"jquery-ui","permalink":"http://www.jiliuke.com/tags/jquery-ui/"}]},{"title":"两个linux主机之间拷贝文件","date":"2014-12-08T05:21:20.000Z","path":"2014/12/08/e4-b8-a4-e4-b8-aalinux-e4-b8-bb-e6-9c-ba-e4-b9-8b-e9-97-b4-e6-8b-b7-e8-b4-9d-e6-96-87-e4-bb-b6/","text":"不同的Linux之间copy文件常用有3种方法， 第一种就是ftp，也就是其中一台Linux安装ftp Server， 这样可以另外一台使用ftp的client程序来进行文件的copy。 （注意文件大小不能超过2G） 第二种方法就是采用samba服务，类似Windows文件copy的方式来操作，比较简洁方便， 第三种就是利用scp命令来进行文件复制。 scp是有Security的文件copy，基于ssh登录。操作起来比较方便，比如要把当前一个文件copy到远程另外一台主机上，可以如下命令。 scp /soft/squid-2.6.STABLE2.tar &#114;&#x6f;&#x6f;&#x74;&#x40;&#x31;&#x39;&#x32;&#46;&#x31;&#54;&#56;&#46;&#49;&#x2e;&#x31;:/soft 然后会提示你输入另外那台172.19.2.75主机的root用户的登录密码，接着就开始copy了。 如果想反过来操作，把文件从远程主机copy到当前系统，也很简单。 scp &#114;&#111;&#x6f;&#116;&#x40;&#49;&#x37;&#x32;&#x2e;&#x31;&#57;&#46;&#50;&#46;&#x37;&#x35;:/home/root /home/daisy/full.tar.gz","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"scp","slug":"scp","permalink":"http://www.jiliuke.com/tags/scp/"}]},{"title":"centos安装lamp环境","date":"2014-11-14T07:48:45.000Z","path":"2014/11/14/224/","text":"原创： 1.安装centos ，这里使用CentOS-6.5-x86_64-LiveDVD.iso 下载地址：http://mirrors.sohu.com/centos/6.5/isos/x86_64/CentOS-6.5-x86_64-LiveDVD.iso 安装完毕后进入系统 2.关闭系统防火墙，selinux 打开终端，输入命令 #service iptables stop //关闭防火墙 #setenforce 0 //关闭selinux 3.下载apache源码，php源码，mysql源码 首先，在根目录（/）创建一个文件夹，命名source，创建一个文件夹，命名lamp,然后进入source目录，以下是命令方法 桌面右键，在终端中打开，然后输入命令 #cd / #mkdir source #mkdir lamp #cd source 下载apache2.2.27 #wget http://mirrors.sohu.com/apache/httpd-2.2.27.tar.gz 下载mysql5.6.20 #wget http://mirrors.sohu.com/mysql/MySQL-5.6/mysql-5.6.21.tar.gz 下载php5.4.27 #wget http://mirrors.sohu.com/php/php-5.4.27.tar.gz 3.1安装apache2.2.27 解压安装包httpd-2.2.27.tar.gz #tar -xzf httpd-2.2.27.tar.gz 进入目录 #cd httpd-2.2.27 # ./configure –prefix=/lamp/apache 接下来会报错 需要安装gcc gcc++ #yum -y install gcc gcc-c++ 再次编译，顺利安装 # ./configure –prefix=/lamp/apache #make;make install 拷贝启动启动文件到/etc/init.d/ #cp /lamp/apache/bin/apachectl /etc/init.d/httpd 启动apache,输入物理地址，提示It works!以下界面则提交成功 #service httpd start 3.2 安装mysql5.6.20 安装mysql需要安装cmake，首先下载cmake,其次还要安装ncurses-devel #cd /source #wget http://www.cmake.org/files/v2.8/cmake-2.8.12.2.tar.gz #tar -xzf cmake-2.8.12.2.tar.gz #cd cmake-2.8.12.2 #./configure #gmake #make;make install #yum install ncurses-devel 安装mysql #cd /source #tar -xzf mysql-5.6.20.tar.gz #cd mysql-5.6.20 #cmake -DCMAKE_INSTALL_PREFIX=/lamp/mysql &amp;&amp; make &amp;&amp; make install #cd /lamp/mysql #scripts/mysql_install_db –basedir=/lamp/mysql –datadir=/lamp/mysql/data –user=mysql #cp support-files/my-default.cnf /lamp/mysql/my.cnf #cp support-files/mysql.server /etc/init.d/mysqld 增加环境变量 #vim /etc/profile 在文件末尾加入PATH=$PATH:/lamp/mysql/bin #source /etc/profile 启动mysql #service mysqld start 如果我无法启动，看看是否有mysqld进程没有关闭，全部kill -9 ，查看命令ps -ef|grep mysqld 3.3 安装php5.4.27 #cd /source #tar -xzf php-5.4.27.tar.gz # cd php-5.4.27 # ./configure –prefix=/lamp/php –with-mysql=/lamp/mysql –with-mysqli=/lamp/mysql/bin/mysql_config –with-apxs2=/lamp/apache/bin/apxs –enable-mbstring #cp /source/ php-5.4.27/php.ini-development /lamp/php/lib/php.ini 设置默认时区 #vim /lamp/php/lib/php.ini 大概909行修改为date.timezone = PRC 可能会报错，这里是perl未安装 #yum -y install perl 可能会报错，这里是libxml2 libxml2-devel未安装 #yum -y install libxml2 libxml2-devel 增加环境变量 #vim /etc/profile 在文件末尾加入PATH=$PATH:/lamp/php/bin #source /etc/profile 修改apache配置，让其支持php解析 #vim /lamp/apache/etc/httpd.conf 搜索AddType，大概310行 增加AddType application/x-httpd-php .php 搜索Directory，大概168行 修改为DirectoryIndex index.php index.html 重启apache #service httpd restart 到此安装成功","tags":[]},{"title":"Android LayoutInflater详解","date":"2014-10-31T03:15:33.000Z","path":"2014/10/31/android-layoutinflater-e8-af-a6-e8-a7-a3/","text":"在实际开发中LayoutInflater这个类还是非常有用的，它的作用类似于findViewById()。不同点是LayoutInflater是用来找res/layout/下的xml布局文件，并且实例化；而findViewById()是找xml布局文件下的具体widget控件(如Button、TextView等)。 具体作用： 1、对于一个没有被载入或者想要动态载入的界面，都需要使用LayoutInflater.inflate()来载入； 2、对于一个已经载入的界面，就可以使用Activiyt.findViewById()方法来获得其中的界面元素。 LayoutInflater 是一个抽象类，在文档中如下声明： public abstract class LayoutInflater extends Object 获得 LayoutInflater 实例的三种方式 1. LayoutInflater inflater = getLayoutInflater();//调用Activity的getLayoutInflater() 2. LayoutInflater inflater = LayoutInflater.from(context); 3. LayoutInflater inflater = (LayoutInflater)context.getSystemService (Context.LAYOUT_INFLATER_SERVICE); 其实，这三种方式本质是相同的，从源码中可以看出： getLayoutInflater()： Activity 的 getLayoutInflater() 方法是调用 PhoneWindow 的getLayoutInflater()方法，看一下该源代码： public PhoneWindow(Context context) { super(context); mLayoutInflater = LayoutInflater.from(context); } 可以看出它其实是调用 LayoutInflater.from(context)。 LayoutInflater.from(context)： public static LayoutInflater from(Context context) { LayoutInflater LayoutInflater = (LayoutInflater) context.getSystemService (Context.LAYOUT_INFLATER_SERVICE); if (LayoutInflater == null) { throw new AssertionError(“LayoutInflater not found.”); } return LayoutInflater; } 可以看出它其实调用 context.getSystemService()。 结论：所以这三种方式最终本质是都是调用的Context.getSystemService()。 另外getSystemService()是Android很重要的一个API，它是Activity的一个方法，根据传入的NAME来取得对应的Object，然后转换成相应的服务对象。以下介绍系统相应的服务。 传入的Name 返回的对象 说明 WINDOW_SERVICE WindowManager 管理打开的窗口程序 LAYOUT_INFLATER_SERVICE LayoutInflater 取得xml里定义的view ACTIVITY_SERVICE ActivityManager 管理应用程序的系统状态 POWER_SERVICE PowerManger 电源的服务 ALARM_SERVICE AlarmManager 闹钟的服务 NOTIFICATION_SERVICE NotificationManager 状态栏的服务 KEYGUARD_SERVICE KeyguardManager 键盘锁的服务 LOCATION_SERVICE LocationManager 位置的服务，如GPS SEARCH_SERVICE SearchManager 搜索的服务 VEBRATOR_SERVICE Vebrator 手机震动的服务 CONNECTIVITY_SERVICE Connectivity 网络连接的服务 WIFI_SERVICE WifiManager Wi-Fi服务 TELEPHONY_SERVICE TeleponyManager 电话服务 inflate 方法 通过 sdk 的 api 文档，可以知道该方法有以下几种过载形式，返回值均是 View 对象，如下： public View inflate (int resource, ViewGroup root) public View inflate (XmlPullParser parser, ViewGroup root) public View inflate (XmlPullParser parser, ViewGroup root, boolean attachToRoot) public View inflate (int resource, ViewGroup root, boolean attachToRoot) 示意代码： LayoutInflater inflater = (LayoutInflater)getSystemService(LAYOUT_INFLATER_SERVICE); View view = inflater.inflate(R.layout.custom, (ViewGroup)findViewById(R.id.test)); //EditText editText = (EditText)findViewById(R.id.content);// error EditText editText = (EditText)view.findViewById(R.id.content); 对于上面代码，指定了第二个参数 ViewGroup root，当然你也可以设置为 null 值。 注意： ·inflate 方法与 findViewById 方法不同； ·inflater 是用来找 res/layout 下的 xml 布局文件，并且实例化； ·findViewById() 是找具体 xml 布局文件中的具体 widget 控件(如:Button、TextView 等)。","tags":[{"name":"android","slug":"android","permalink":"http://www.jiliuke.com/tags/android/"},{"name":"安卓","slug":"安卓","permalink":"http://www.jiliuke.com/tags/%E5%AE%89%E5%8D%93/"},{"name":"LayoutInflater","slug":"LayoutInflater","permalink":"http://www.jiliuke.com/tags/LayoutInflater/"}]},{"title":"Android 中 getApplicationContext()、this、getApplication()之间的区别","date":"2014-10-31T03:14:39.000Z","path":"2014/10/31/android-e4-b8-ad-getapplicationcontext-e3-80-81this-e3-80-81getapplication-e4-b9-8b-e9-97-b4-e7-9a-84-e5-8c-ba-e5-88-ab/","text":"1. getApplicationContext():生命周期是整个应用，应用摧毁，它才摧毁。 2. this:代表当前,在Activity当中就是代表当前的Activity，换句话说就是Activity.this在Activity当中可以缩写为this. 3. getApplication():andorid 开发中共享全局数据; 我们在平时的开发中，有时候可能会需要一些全局数据，来让应用中得所有Activity和View都能访问到，大家在遇到这种情况时，可能首先会想到自己定义一个类，然后创建很多静态成员，不过andorid已经为我们提供了这种情况的解决方案：在Android中，有一个名为Application的类，我们可以在Activity中使用getApplication()，方法来获得，它是代表我们的应用程序的类，使用它可以获得当前应用的主题，资源文件中的内容等，这个类更灵活的一个特性就是可以被我们继承，来添加我们自己的全局属性。","tags":[{"name":"android","slug":"android","permalink":"http://www.jiliuke.com/tags/android/"},{"name":"getApplication","slug":"getApplication","permalink":"http://www.jiliuke.com/tags/getApplication/"},{"name":"getApplicationContext","slug":"getApplicationContext","permalink":"http://www.jiliuke.com/tags/getApplicationContext/"},{"name":"安卓","slug":"安卓","permalink":"http://www.jiliuke.com/tags/%E5%AE%89%E5%8D%93/"}]},{"title":"Android之TabHost布局","date":"2014-10-31T03:13:36.000Z","path":"2014/10/31/android-e4-b9-8btabhost-e5-b8-83-e5-b1-80/","text":"1.概念 盛放Tab的容器就是TabHost。TabHost的实现有两种方式： 第一种继承TabActivity，从TabActivity中用getTabHost()方法获取TabHost。各个Tab中的内容在布局文件中定义就行了。 第二种方式，不继承TabActivity，在布局文件中定义TabHost即可，但是TabWidget的id必须是@android:id/tabs，FrameLayout的id必须是@android:id/tabcontent。 2.案例 1）继承TabActivity res/layout/main.xml &lt;TabHost xmlns:android=”http://schemas.android.com/apk/res/android&quot; android:layout_width=”fill_parent” android:layout_height=”fill_parent”&gt; &lt;LinearLayout android:id=”@+id/tab01” android:orientation=”vertical” android:layout_width=”fill_parent” android:layout_height=”fill_parent”&gt; &lt;TextView android:layout_width=”fill_parent” android:layout_height=”wrap_content” android:text=”孙悟空-2011/07/12”/&gt; &lt;TextView android:layout_width=”fill_parent” android:layout_height=”wrap_content” android:text=”猪八戒-2011/07/10”/&gt; &lt;LinearLayout android:id=”@+id/tab02” android:orientation=”vertical” android:layout_width=”fill_parent” android:layout_height=”fill_parent”&gt; &lt;TextView android:layout_width=”fill_parent” android:layout_height=”wrap_content” android:text=”萨僧-2011/07/11”/&gt; &lt;TextView android:layout_width=”fill_parent” android:layout_height=”wrap_content” android:text=”唐僧-2011/07/10”/&gt; &lt;LinearLayout android:id=”@+id/tab03” android:orientation=”vertical” android:layout_width=”fill_parent” android:layout_height=”fill_parent”&gt; &lt;TextView android:layout_width=”fill_parent” android:layout_height=”wrap_content” android:text=”孙悟空-2011/07/12”/&gt; &lt;TextView android:layout_width=”fill_parent” android:layout_height=”wrap_content” android:text=”萨僧-2011/07/08”/&gt; HelloTabHost.java public class HelloTabHost extends TabActivity { @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); //调用TabActivity的getTabHost()方法获取TabHost对象 TabHost tabHost = getTabHost(); //设置使用TabHost布局 LayoutInflater.from(this).inflate(R.layout.main, tabHost.getTabContentView(),true); //添加第一个标签页 tabHost.addTab(tabHost.newTabSpec(“tab01”).setIndicator(“已接电话”).setContent(R.id.tab01)); //添加第二个标签页,并在其标签上添加一个图片 tabHost.addTab(tabHost.newTabSpec(“tab02”).setIndicator(“未接电话”,getResources().getDrawable(R.drawable.icon)).setContent(R.id.tab02)); //添加第三个标签页 tabHost.addTab(tabHost.newTabSpec(“tab03”).setIndicator(“已拨电话”).setContent(R.id.tab03)); } } 2）不继承TabActivity 继承普通Activity，标签id必须为tabs、标签id必须为tabcontent.这个方式在通过findViewById获得TabHost之后，必须要调用setup方法。 main.xml代码 &lt;TabHost android:id=”@+id/tabhost” android:layout_width=”fill_parent” android:layout_height=”wrap_content”&gt; &lt;LinearLayout android:orientation=”vertical” android:layout_width=”fill_parent” android:layout_height=”fill_parent”&gt; &lt;TabWidget android:id=”@android:id/tabs” android:orientation=”horizontal” android:layout_width=”fill_parent” android:layout_height=”wrap_content” /&gt; &lt;FrameLayout android:id=”@android:id/tabcontent” android:layout_width=”fill_parent” android:layout_height=”fill_parent”&gt; &lt;TextView android:id=”@+id/view1” android:layout_width=”fill_parent” android:layout_height=”fill_parent”/&gt; &lt;TextView android:id=”@+id/view2” android:layout_width=”fill_parent” android:layout_height=”fill_parent”/&gt; &lt;TextView android:id=”@+id/view3” android:layout_width=”fill_parent” android:layout_height=”fill_parent”/&gt; Java代码 public class TabHostTest extends Activity { @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main); // 获取TabHost对象 TabHost tabHost = (TabHost) findViewById(R.id.tabhost); // 如果没有继承TabActivity时，通过该种方法加载启动tabHost tabHost.setup(); tabHost.addTab(tabHost.newTabSpec(“tab1”).setIndicator(“第一个标签”, getResources().getDrawable(R.drawable.icon)).setContent( R.id.view1)); tabHost.addTab(tabHost.newTabSpec(“tab3”).setIndicator(“第三个标签”) .setContent(R.id.view3)); tabHost.addTab(tabHost.newTabSpec(“tab2”).setIndicator(“第二个标签”) .setContent(R.id.view2)); } }","tags":[{"name":"android","slug":"android","permalink":"http://www.jiliuke.com/tags/android/"},{"name":"安卓","slug":"安卓","permalink":"http://www.jiliuke.com/tags/%E5%AE%89%E5%8D%93/"},{"name":"TabHost","slug":"TabHost","permalink":"http://www.jiliuke.com/tags/TabHost/"}]},{"title":"自建TabHost，为什么R.java中无tabhost的id ","date":"2014-10-31T03:09:50.000Z","path":"2014/10/31/e8-87-aa-e5-bb-batabhost-ef-bc-8c-e4-b8-ba-e4-bb-80-e4-b9-88r-java-e4-b8-ad-e6-97-a0tabhost-e7-9a-84id/","text":"问题出在你的xml布局定义中的这一行： android:id=”@android:id/tabhost” 如果是想不用android的tabhost的id，那么这行应该改为： android:id=”@+id/tabhost” 如果确实要用android的定义，又要找到这个窗口，那么应该改代码中的这行： TabHost mTabHost = (TabHost)findViewById(R.id.tabhost); 应该改成 TabHost mTabHost = (TabHost)findViewById(android.R.id.tabhost);","tags":[{"name":"android","slug":"android","permalink":"http://www.jiliuke.com/tags/android/"},{"name":"安卓","slug":"安卓","permalink":"http://www.jiliuke.com/tags/%E5%AE%89%E5%8D%93/"},{"name":"TabHost","slug":"TabHost","permalink":"http://www.jiliuke.com/tags/TabHost/"}]},{"title":"No orientation specified, and the default is horizontal.","date":"2014-10-27T04:13:23.000Z","path":"2014/10/27/no-orientation-specified-and-the-default-is-horizontal/","text":"整的错误提示信息为：No orientation specified, and the default is horizontal. This is a common source of bugs when children are added dynamically. 通常发生这个错误提示的原因是我们直接在原有的页面上把别的布局标签改成，但是使用标签要指明方向，水平方向还是垂直方向 horizontal or vertical 所以直接修改，会导致没有指名线性布局的方向，只要添加上 android:orientation = “vertical” 或 android:orientation = “horizontal” 即可解决","tags":[{"name":"horizontal","slug":"horizontal","permalink":"http://www.jiliuke.com/tags/horizontal/"},{"name":"orientation","slug":"orientation","permalink":"http://www.jiliuke.com/tags/orientation/"}]},{"title":"The container 'Android Dependencies' references non existing library","date":"2014-10-23T01:28:43.000Z","path":"2014/10/23/the-container-android-dependencies-references-non-existing-library/","text":"在andriod项目中引用另一个library project时，报 The container ‘Android Dependencies’ references non existing library ‘xxxxxxx’ 错误，解决办法是右击library project，选择Build Path-&gt;Configure Build Path-&gt;Order and Export-&gt;Select All将所有包都选上","tags":[]},{"title":"jQuery中prop()方法和attr()方法的区别","date":"2014-09-23T02:22:11.000Z","path":"2014/09/23/jquery-e4-b8-adprop-e6-96-b9-e6-b3-95-e5-92-8cattr-e6-96-b9-e6-b3-95-e7-9a-84-e5-8c-ba-e5-88-ab/","text":"从jQuery 1.6开始，新加入了一个prop方法。这个方法和attr方法功能非常的相近。 以下是官网建议的使用情况： Attribute/Property .attr() .prop() accesskey √ align √ async √ √ autofocus √ √ checked √ √ class √ contenteditable √ draggable √ href √ id √ label √ location ( i.e. window.location ) √ √ multiple √ √ readOnly √ √ rel √ selected √ √ src √ tabindex √ title √ type √ width ( if needed over .width() ) √ 个人简要总结了一下： 1、赋值时候，如果是这样的只有属性名就能生效的属性 推荐prop，即：$(‘input’).prop(‘checked’,true); 同时，false表示取消，即：$(‘input’).prop(‘checked’,false); 当然attr也行的：$(‘input’).attr(‘checked’,’这里写什么都行的’); 取消属性就是移除：$(‘input’).removeAttr(‘checked’); 2、取值的时候，如果是 推荐使用prop，即： $(‘#input1’).prop(‘checked’); //返回true $(‘#input2’).prop(‘checked’); //返回false 而使用attr，则： $(‘#input1’).attr(‘checked’); //返回checked $(‘#input2’).attr(‘checked’); //返回undefined 3、特殊属性赋值取值 这个特殊说明下，获取很多人都用不到呢。 比如需要在input中追加一个data-tips属性。变成这样子 这时候只能写：$(‘input’).attr(‘data-tips’,’aa’); 使用prop是不管用的。 但是读值时候，两个都可以的： $(‘input’).attr(‘data-tips’);//返回aa $(‘input’).prop(‘data-tips’);//返回aa","tags":[{"name":"attr","slug":"attr","permalink":"http://www.jiliuke.com/tags/attr/"},{"name":"jquery","slug":"jquery","permalink":"http://www.jiliuke.com/tags/jquery/"},{"name":"prop","slug":"prop","permalink":"http://www.jiliuke.com/tags/prop/"},{"name":"区别","slug":"区别","permalink":"http://www.jiliuke.com/tags/%E5%8C%BA%E5%88%AB/"}]},{"title":"centos安装破解Sublime Text 2","date":"2014-09-22T09:18:14.000Z","path":"2014/09/22/centos-e5-ae-89-e8-a3-85-e7-a0-b4-e8-a7-a3sublime-text-2/","text":"1.去其官方网站http://www.sublimetext.com/ 把linux版下载下来，解开压缩包，放在你希望的路径下。 2.用vim将其打开 。 vim sublime_text 3.将文件转成十六进制形式。vim中输入 :%!xxd 3.在vim中定位至“Thanks”文字附近。 /Thanks 4.接着查找数字串“3342”。 /3342 找到一处3342的地方大致是这个样子 ……4333 3342 3032……. 将这里的3342 改为3242。 5.将文件转换回去。 :%!xxd -r 6.保存文件、退出。 :wq 7.打开程序，去help-enter licence 里贴进去通过程序算出来的Licence，OK 成功了。 这里贴出来几个算好的供使用。 —–BEGIN LICENSE—– China Unlimited User License EA7E-2861 BE67D2175D3569FDAB9EB5340FAD2822 E7B56B3397A76AA9FBE8AC3D3C65918B DFC28F2EA158140D9E07853D594818EB 3A237B2E8E98ED257C269548F50EDA34 EF0C7F72D8917DB538A0245E46BFD6B1 85F4EDE331F253530ED67A5C19E92399 04C5F4A1AF4AF3DB5EC49C1FEE17CA76 7E369F8AAE4AC6C6E756B5882E1608B9 —–END LICENSE—– —–BEGIN LICENSE—– USA Unlimited User License EA7E-1640 763D05839CA08BDA7B0103B5BABF0150 195EE53CC33B569858AFD553F080A9BC 1F678C88A1342AC92CA596FE775E7014 5A0EE55DC2F8DE3C4ED6B5B02FD4DB3C 493FCE3EE61FC0588CDAFAAD731BB47F FD047777D02A5BE92202B3D3EB59A696 A69DFEF6687D16FCD4443556912A1F62 82DA125263C5BC270CEE7664B5D0CEB9 —–END LICENSE—– —–BEGIN LICENSE—– A Unlimited User License EA7E-20708 A7281D6781626F2A37D6355121079ACA DF60119B9D27D4CBDA75FA63D633A671 9521D96D375D8DD95DF3F89231E38F8D 459374CC62D1C1B410C0BDFD2503670E 603BB1DCA7D20E85B0AF19BAE0A59822 F7B1F83659D4D7787C4F040FE9402FCD B9608A9012BDA8B65524B4DEDE4C00D0 76461448E2AAEC027060C26B038D502B —–END LICENSE—– —–BEGIN LICENSE—– B Unlimited User License EA7E-13207 B5C54DD7413302E87A9ED4155E90D5E0 684F7A34714D278ABE2731F0270034E2 9722AEC71E04043C0E9D4496D1DA161B D76CE81501A247F3E03F57D6EC1E76AE 12BE9CD453D1E651AF4BD187CC10FEB0 EB24FBAB7511F2F37E5F745D13D0641F 7D1BEEE98A9646A02B616BF98EB43F84 B04029D72C610086A666DB318A526A2F —–END LICENSE—– —–BEGIN LICENSE—– Love Unlimited User License EA7E-8441 918381ACA844A0379CCAC729059720A4 BC9D409098618744BB45FF23E67568DB 82B926D92157127DB3B4054834D0477F DD9C2B251A57F2E3259E04AD9B7DB8B8 1778C37C1D3B494671C5F4ECFBD2B519 361CD9624A56C21F54F8DD51F5BDF799 68F9537ED74680494853423904F032BA 3E896607B4D398E8C897A4DD1A8CB449 —–END LICENSE—– —–BEGIN LICENSE—– NightM Unlimited User License EA7E-5177 8125006DCD9E513CD4F1C217CAD3801D E72D3130CA1F04CFEDF3696C0F68553D DC42B172E38962890A87035FCE26049F 15EFA09D4BCC811617915165959A499F 402866AFC08E72615336D863968B60FB C9167F72F4B25ED5E8E593D2E19F43E7 C7EC9F459EA62F1DD1757DC9967C4801 8E48683A4F0F9CAC3CC0621F2D48292F —–END LICENSE—– 使用terminal安装的，安装目录在/usr/lib/sublime-text-2/sublime_text 下， 拷贝出来，修改，在sudo cp -f 回去即可继续后续步骤。","tags":[]},{"title":"在.htaccess文件中增加301重定向指令 ","date":"2014-09-18T01:50:16.000Z","path":"2014/09/18/e5-9c-a8-htaccess-e6-96-87-e4-bb-b6-e4-b8-ad-e5-a2-9e-e5-8a-a0301-e9-87-8d-e5-ae-9a-e5-90-91-e6-8c-87-e4-bb-a4/","text":"在.htaccess文件中增加301重定向指令 采用“mod_rewrite”技术，形如： RewriteEngine on RewriteRule ^(.*)$ http://www.jiliuke.com/ $1 [R=301,L] 301重定向代码和测试工具 国外:http://www.seoconsultants.com/tools/headers 国 内:http://www.ranknow.cn/tools/redirectcheck","tags":[{"name":"301","slug":"301","permalink":"http://www.jiliuke.com/tags/301/"},{"name":"htaccess","slug":"htaccess","permalink":"http://www.jiliuke.com/tags/htaccess/"},{"name":"重定向","slug":"重定向","permalink":"http://www.jiliuke.com/tags/%E9%87%8D%E5%AE%9A%E5%90%91/"}]},{"title":"apache虚拟目录局域网访问主机403错误解决办法","date":"2014-09-17T08:34:00.000Z","path":"2014/09/17/apache-e8-99-9a-e6-8b-9f-e7-9b-ae-e5-bd-95-e5-b1-80-e5-9f-9f-e7-bd-91-e8-ae-bf-e9-97-ae-e4-b8-bb-e6-9c-ba403-e9-94-99-e8-af-af-e8-a7-a3-e5-86-b3-e5-8a-9e-e6-b3-95/","text":"在这个例子，所有请求都将拒绝 2.2 configuration:Order deny,allowDeny from all 2.4 configuration:Require all denied 在这个例子，所有请求都将允许 2.2 configuration:Order allow,denyAllow from all 2.4 configuration:Require all granted 在这个例子，所有在 example.org域名的主机都将被允许访问;其他的都将拒绝。 2.2 configuration:Order Deny,AllowDeny from allAllow from example.org 2.4 configuration:Require host example.org","tags":[{"name":"403","slug":"403","permalink":"http://www.jiliuke.com/tags/403/"},{"name":"apache","slug":"apache","permalink":"http://www.jiliuke.com/tags/apache/"},{"name":"虚拟目录","slug":"虚拟目录","permalink":"http://www.jiliuke.com/tags/%E8%99%9A%E6%8B%9F%E7%9B%AE%E5%BD%95/"}]},{"title":"js加减乘除丢失精度问题解决方法","date":"2014-08-29T07:37:15.000Z","path":"2014/08/29/js-e5-8a-a0-e5-87-8f-e4-b9-98-e9-99-a4-e4-b8-a2-e5-a4-b1-e7-b2-be-e5-ba-a6-e9-97-ae-e9-a2-98-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95/","text":"在javascript中，当你使用小数进行加减乘除运算时，你会发现，所得到的结果有时后面带有长长的一段小数，使运算变得复杂，并且影响计算结果。上网查询了一下原因，大致如下：在javascript中，带小数的数据运算时总会出现好多位小数.这是因为在javascript中浮点数的计算是以2进制计算的。 解决办法： /** * 加法运算，避免数据相加小数点后产生多位数和计算精度损失。 * * @param num1加数1 | num2加数2 */ function numAdd(num1, num2) { var baseNum, baseNum1, baseNum2; try { baseNum1 = num1.toString().split(“.”)[1].length; } catch (e) { baseNum1 = 0; } try { baseNum2 = num2.toString().split(“.”)[1].length; } catch (e) { baseNum2 = 0; } baseNum = Math.pow(10, Math.max(baseNum1, baseNum2)); return (num1 * baseNum + num2 * baseNum) / baseNum; }; /** * 加法运算，避免数据相减小数点后产生多位数和计算精度损失。 * * @param num1被减数 | num2减数 */ function numSub(num1, num2) { var baseNum, baseNum1, baseNum2; var precision;// 精度 try { baseNum1 = num1.toString().split(“.”)[1].length; } catch (e) { baseNum1 = 0; } try { baseNum2 = num2.toString().split(“.”)[1].length; } catch (e) { baseNum2 = 0; } baseNum = Math.pow(10, Math.max(baseNum1, baseNum2)); precision = (baseNum1 &gt;= baseNum2) ? baseNum1 : baseNum2; return ((num1 * baseNum - num2 * baseNum) / baseNum).toFixed(precision); }; /** * 乘法运算，避免数据相乘小数点后产生多位数和计算精度损失。 * * @param num1被乘数 | num2乘数 */ function numMulti(num1, num2) { var baseNum = 0; try { baseNum += num1.toString().split(“.”)[1].length; } catch (e) { } try { baseNum += num2.toString().split(“.”)[1].length; } catch (e) { } return Number(num1.toString().replace(“.”, “”)) * Number(num2.toString().replace(“.”, “”)) / Math.pow(10, baseNum); }; /** * 除法运算，避免数据相除小数点后产生多位数和计算精度损失。 * * @param num1被除数 | num2除数 */ function numDiv(num1, num2) { var baseNum1 = 0, baseNum2 = 0; var baseNum3, baseNum4; try { baseNum1 = num1.toString().split(“.”)[1].length; } catch (e) { baseNum1 = 0; } try { baseNum2 = num2.toString().split(“.”)[1].length; } catch (e) { baseNum2 = 0; } with (Math) { baseNum3 = Number(num1.toString().replace(“.”, “”)); baseNum4 = Number(num2.toString().replace(“.”, “”)); return (baseNum3 / baseNum4) * pow(10, baseNum2 - baseNum1); } };","tags":[]},{"title":"cdn加速后获取真实IP的方法","date":"2014-08-28T01:12:34.000Z","path":"2014/08/28/cdn-e5-8a-a0-e9-80-9f-e5-90-8e-e8-8e-b7-e5-8f-96-e7-9c-9f-e5-ae-9eip-e7-9a-84-e6-96-b9-e6-b3-95/","text":"请把以下程序相应的部分加到贵司的源程序中，以实现获取最终客户IP代码的功能。 如果您需要其它语言的例子，我们也可以提供。需要注意的是这些代码是在您切换CDN后生效，如未使用CDN服务，这些代码是无法获得用户IP的。 CDN回源请求时会在请求中加一个头,该头中的ip是最终客户的ip： Cdn-Src-Ip:192.168.0.10 下面是分别用java和C#，Asp写的取头的片段。 Java: String srcIp = request.getHeader(“Cdn-Src-Ip”); if(srcIp == null){ srcIp = request.getRemoteAddr(); } [注]request是HttpServletRequest类型的参数，无论是直接写serverlet还是用struts都会传入该参数。 Asp(用C#): String srcIp = Request.Headers[“Cdn-Src-Ip”]; if(srcIp == null){ srcIp = Request.UserHostAddress; } Asp: &lt;% Request.ServerVariables(“HTTP_Cdn-Src-Ip”) %&gt; PHP： $user_IP = ($_SERVER[“HTTP_CDN_SRC_IP”]);","tags":[{"name":"cdn","slug":"cdn","permalink":"http://www.jiliuke.com/tags/cdn/"}]},{"title":"linux scp-两台服务器之间传输数据的命令","date":"2014-08-27T04:42:45.000Z","path":"2014/08/27/linux-scp-e4-b8-a4-e5-8f-b0-e6-9c-8d-e5-8a-a1-e5-99-a8-e4-b9-8b-e9-97-b4-e4-bc-a0-e8-be-93-e6-95-b0-e6-8d-ae-e7-9a-84-e5-91-bd-e4-bb-a4/","text":"我们在管理服务器或vps的时候，经常要上传和下载数据。比如当我们需要把数据从一个服务器搬到另一个服务器的时候，通常是从第一个服务器下载数据到我们电脑，再到ftp工具上传下载好的数据到远程服务器。但这样即浪费时间，又浪费精力。我们何不先在第一台服务器打包好，就直接传输数据到另一台服务器呢？而Linux scp命令则刚好能实现两台服务器之间传输数据的作用。 什么是scp scp就是secure copy，是用来进行远程文件拷贝的。数据传输使用 ssh，并且和ssh 使用相同的认证方式，提供相同的安全保证 。 与rcp 不同的是，scp 在需要进行验证时会要求你输入密码或口令。 scp的用法从 本地 复制到 远程 命令基本格式： scp [可选参数] 本地文件名 远程用户名@远程地址:远程文件或目录 复制文件例子： scp /home/backup.zip &#114;&#111;&#111;&#116;&#64;&#119;&#x77;&#x77;&#46;&#101;&#x78;&#97;&#109;&#112;&#108;&#101;&#x2e;&#99;&#111;&#109;:/home/others/backup scp /home/backup.zip &#x72;&#111;&#x6f;&#x74;&#x40;&#119;&#x77;&#119;&#46;&#101;&#120;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#x63;&#111;&#x6d;:/home/others/otherbackup.zip 第一个是本地文件backup.zip发送到远程backup目录下。 第二个是本地文件backup.zip发送到远程otherbackup.zip文件。 复制目录例子： scp -r /home/backup &#114;&#111;&#x6f;&#x74;&#64;&#x77;&#x77;&#119;&#x2e;&#101;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#99;&#x6f;&#109;:/home/others/ 复制本地目录backup到远程目录others 从 远程 复制到 本地 命令基本格式： scp [可选参数] 远程用户名@远程地址:远程文件或目录 本地文件名 例子： scp &#x72;&#x6f;&#x6f;&#116;&#64;&#x77;&#119;&#119;&#46;&#x65;&#x78;&#97;&#109;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#x6d;:/home/others/bakcup.zip /home/newbackup.zip scp -r &#x72;&#111;&#111;&#x74;&#x40;&#x77;&#x77;&#119;&#46;&#x65;&#x78;&#97;&#109;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;:/home/backup /home/other/ 第一个是下载远程文件backup.zip到本地文件newbackup.zip。 第二个是下载远程目录bakcup到本地目录other。 scp可选参数： 参数 解释 -v 和大多数 linux 命令中的 -v 意思一样 , 用来显示进度 . 可以用来查看连接 , 认证 , 或是配置错误 . -C 使能压缩选项 -P 选择端口 . 注意 -p 已经被 rcp 使用 . -4 强行使用 IPV4 地址 . -6 强行使用 IPV6 地址 .","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"scp","slug":"scp","permalink":"http://www.jiliuke.com/tags/scp/"}]},{"title":"jQuery.Validate常用的一些规则","date":"2014-08-26T07:33:45.000Z","path":"2014/08/26/jquery-validate-e5-b8-b8-e7-94-a8-e7-9a-84-e4-b8-80-e4-ba-9b-e8-a7-84-e5-88-99/","text":"// 手机号码验证jQuery.validator.addMethod(“mobile”, function(value, element) { var length = value.length; var mobile = /^(((13[0-9]{1})|(15[0-9]{1}))+\\d{8})$/ return this.optional(element) || (length == 11 &amp;&amp; mobile.test(value));}, “手机号码格式错误”); // 电话号码验证 jQuery.validator.addMethod(“phone”, function(value, element) { var tel = /^(0[0-9]{2,3}\\-)?([2-9][0-9]{6,7})+(\\-[0-9]{1,4})?$/; return this.optional(element) || (tel.test(value));}, “电话号码格式错误”); // 邮政编码验证 jQuery.validator.addMethod(“zipCode”, function(value, element) { var tel = /^[0-9]{6}$/; return this.optional(element) || (tel.test(value));}, “邮政编码格式错误”); // QQ号码验证 jQuery.validator.addMethod(“qq”, function(value, element) { var tel = /^[1-9]\\d{4,9}$/; return this.optional(element) || (tel.test(value));}, “qq号码格式错误”); // IP地址验证jQuery.validator.addMethod(“ip”, function(value, element) { var ip = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/; return this.optional(element) || (ip.test(value) &amp;&amp; (RegExp.$1 &lt; 256 &amp;&amp; RegExp.$2 &lt; 256 &amp;&amp; RegExp.$3 &lt; 256 &amp;&amp; RegExp.$4 &lt; 256));}, “Ip地址格式错误”); // 字母和数字的验证jQuery.validator.addMethod(“chrnum”, function(value, element) { var chrnum = /^([a-zA-Z0-9]+)$/; return this.optional(element) || (chrnum.test(value));}, “只能输入数字和字母(字符A-Z, a-z, 0-9)”); // 中文的验证jQuery.validator.addMethod(“chinese”, function(value, element) { var chinese = /^[\\u4e00-\\u9fa5]+$/; return this.optional(element) || (chinese.test(value));}, “只能输入中文”); // 下拉框验证$.validator.addMethod(“selectNone”, function(value, element) { return value == “请选择”;}, “必须选择一项”); // 字节长度验证jQuery.validator.addMethod(“byteRangeLength”, function(value, element, param) { var length = value.length; for (var i = 0; i &lt; value.length; i++) { if (value.charCodeAt(i) &gt; 127) { length++; } } return this.optional(element) || (length &gt;= param[0] &amp;&amp; length &lt;= param[1]);}, $.validator.format(“请确保输入的值在{0}-{1}个字节之间(一个中文字算2个字节)”)); // 字符验证 jQuery.validator.addMethod(“stringCheck”, function(value, element) { return this.optional(element) || /^[\\u0391-\\uFFE5\\w]+$/.test(value); }, “只能包括中文字、英文字母、数字和下划线”); // 中文字两个字节 jQuery.validator.addMethod(“byteRangeLength”, function(value, element, param) { var length = value.length; for(var i = 0; i &lt; value.length; i++){ if(value.charCodeAt(i) &gt; 127){ length++; } } return this.optional(element) || ( length &gt;= param[0] &amp;&amp; length &lt;= param[1] ); }, “请确保输入的值在3-15个字节之间(一个中文字算2个字节)”); // 身份证号码验证 jQuery.validator.addMethod(“isIdCardNo”, function(value, element) { return this.optional(element) || isIdCardNo(value); }, “请正确输入您的身份证号码”); // 手机号码验证 jQuery.validator.addMethod(“isMobile”, function(value, element) { var length = value.length; var mobile = /^(((13[0-9]{1})|(15[0-9]{1}))+\\d{8})$/; return this.optional(element) || (length == 11 &amp;&amp; mobile.test(value)); }, “请正确填写您的手机号码”); // 电话号码验证 jQuery.validator.addMethod(“isTel”, function(value, element) { var tel = /^\\d{3,4}-?\\d{7,9}$/; //电话号码格式010-12345678 return this.optional(element) || (tel.test(value)); }, “请正确填写您的电话号码”); // 联系电话(手机/电话皆可)验证 jQuery.validator.addMethod(“isPhone”, function(value,element) { var length = value.length; var mobile = /^(((13[0-9]{1})|(15[0-9]{1}))+\\d{8})$/; var tel = /^\\d{3,4}-?\\d{7,9}$/; return this.optional(element) || (tel.test(value) || mobile.test(value)); }, “请正确填写您的联系电话”); // 邮政编码验证 jQuery.validator.addMethod(“isZipCode”, function(value, element) { var tel = /^[0-9]{6}$/; return this.optional(element) || (tel.test(value)); }, “请正确填写您的邮政编码”);","tags":[{"name":"jquery","slug":"jquery","permalink":"http://www.jiliuke.com/tags/jquery/"},{"name":"jquery.validate","slug":"jquery-validate","permalink":"http://www.jiliuke.com/tags/jquery-validate/"},{"name":"validate","slug":"validate","permalink":"http://www.jiliuke.com/tags/validate/"}]},{"title":"常用的移动端js插件","date":"2014-08-26T01:22:18.000Z","path":"2014/08/26/e5-b8-b8-e7-94-a8-e7-9a-84-e7-a7-bb-e5-8a-a8-e7-ab-afjs-e6-8f-92-e4-bb-b6/","text":"1.Zepto.js 是专门为现代智能手机浏览器退出的 Javascript 框架, 拥有和jQuery相似的语法, 但是和jQuery相比下来, 他有很多优点, 大小方面 , 压缩后的 zepto.min.js 大小只有21K, 使用服务器端 gzip 压缩后大小只有5~10K, 可以说非常的小, 但是功能很齐全, 多出来了一些触摸屏的事件 , 它唯一不支持的就是万恶的IE, 不过用它来开发iPhone和Android网页绝对是首选了. 2.swipe js -移动端WEB页面内容触摸滑动类库 **3.Touch.js **是移动设备上的手势识别与事件库, 由百度云Clouda团队维护，也是在百度内部广泛使用的开发工具.","tags":[{"name":"swipe","slug":"swipe","permalink":"http://www.jiliuke.com/tags/swipe/"},{"name":"touch","slug":"touch","permalink":"http://www.jiliuke.com/tags/touch/"},{"name":"zepto","slug":"zepto","permalink":"http://www.jiliuke.com/tags/zepto/"}]},{"title":"nginx rewrite 参数和例子","date":"2014-08-22T01:38:02.000Z","path":"2014/08/22/nginx-rewrite-e5-8f-82-e6-95-b0-e5-92-8c-e4-be-8b-e5-ad-90/","text":"本日志内容来自互联网和平日使用经验，整理一下方便日后参考。 正则表达式匹配，其中： * ~ 为区分大小写匹配 * ~* 为不区分大小写匹配 * !和!*分别为区分大小写不匹配及不区分大小写不匹配 文件及目录匹配，其中： * -f和!-f用来判断是否存在文件 * -d和!-d用来判断是否存在目录 * -e和!-e用来判断是否存在文件或目录 * -x和!-x用来判断文件是否可执行 flag标记有： * last 相当于Apache里的[L]标记，表示完成rewrite * break 终止匹配, 不再匹配后面的规则 * redirect 返回302临时重定向 地址栏会显示跳转后的地址 * permanent 返回301永久重定向 地址栏会显示跳转后的地址 一些可用的全局变量有，可以用做条件判断(待补全) $args $content_length $content_type $document_root $document_uri $host $http_user_agent $http_cookie $limit_rate $request_body_file $request_method $remote_addr $remote_port $remote_user $request_filename $request_uri $query_string $scheme $server_protocol $server_addr $server_name $server_port $uri 结合QeePHP的例子 if (!-d $request_filename) { rewrite ^/([a-z-A-Z]+)/([a-z-A-Z]+)/?(.*)$ /index.php?namespace=user&amp;controller=$1&amp;action=$2&amp;$3 last; rewrite ^/([a-z-A-Z]+)/?$ /index.php?namespace=user&amp;controller=$1 last; break; 多目录转成参数 abc.domian.com/sort/2 =&gt; abc.domian.com/index.php?act=sort&amp;name=abc&amp;id=2 if ($host ~* (.*)/.domain/.com) { set $sub_name $1; rewrite ^/sort//(/d+)//?$ /index.php?act=sort&amp;cid=$sub_name&amp;id=$1 last; } 目录对换 /123456/xxxx -&gt; /xxxx?id=123456 rewrite ^/(/d+)/(.+)/ /$2?id=$1 last; 例如下面设定nginx在用户使用ie的使用重定向到/nginx-ie目录下： if ($http_user_agent ~ MSIE) { rewrite ^(.*)$ /nginx-ie/$1 break; } 目录自动加“/” if (-d $request_filename){ rewrite ^/(.*)([^/])$ http://$host/$1$2/ permanent; } 禁止htaccess location ~//.ht { deny all; } 禁止多个目录 location ~ ^/(cron|templates)/ { deny all; break; } 禁止以/data开头的文件 可以禁止/data/下多级目录下.log.txt等请求; location ~ ^/data { deny all; } 禁止单个目录 不能禁止.log.txt能请求 location /searchword/cron/ { deny all; } 禁止单个文件 location ~ /data/sql/data.sql { deny all; } 给favicon.ico和robots.txt设置过期时间; 这里为favicon.ico为99天,robots.txt为7天并不记录404错误日志 location ~(favicon.ico) { log_not_found off; expires 99d; break; } location ~(robots.txt) { log_not_found off; expires 7d; break; } 设定某个文件的过期时间;这里为600秒，并不记录访问日志 location ^~ /html/scripts/loadhead_1.js { access_log off; root /opt/lampp/htdocs/web; expires 600; break; } 文件反盗链并设置过期时间 这里的return 412 为自定义的http状态码，默认为403，方便找出正确的盗链的请求 “rewrite ^/ http://leech.c1gstudio.com/leech.gif;”显示一张防盗链图片 “access_log off;”不记录访问日志，减轻压力 “expires 3d”所有文件3天的浏览器缓存 location ~* ^.+/.(jpg|jpeg|gif|png|swf|rar|zip|css|js)$ { valid_referers none blocked *.c1gstudio.com *.c1gstudio.net localhost 208.97.167.194; if ($invalid_referer) { rewrite ^/ http://leech.c1gstudio.com/leech.gif; return 412; break; } access_log off; root /opt/lampp/htdocs/web; expires 3d; break; } 只充许固定ip访问网站，并加上密码 root /opt/htdocs/www; allow 208.97.167.194; allow 222.33.1.2; allow 231.152.49.4; deny all; auth_basic “C1G_ADMIN”; auth_basic_user_file htpasswd; 将多级目录下的文件转成一个文件，增强seo效果 /job-123-456-789.html 指向/job/123/456/789.html rewrite ^/job-([0-9]+)-([0-9]+)-([0-9]+)/.html$ /job/$1/$2/jobshow_$3.html last; 将根目录下某个文件夹指向2级目录 如/shanghaijob/ 指向 /area/shanghai/ 如果你将last改成permanent，那么浏览器地址栏显是/location/shanghai/ rewrite ^/([0-9a-z]+)job/(.*)$ /area/$1/$2 last; 上面例子有个问题是访问/shanghai 时将不会匹配 rewrite ^/([0-9a-z]+)job$ /area/$1/ last; rewrite ^/([0-9a-z]+)job/(.*)$ /area/$1/$2 last; 这样/shanghai 也可以访问了，但页面中的相对链接无法使用， 如./list_1.html真实地址是/area/shanghia/list_1.html会变成/list_1.html,导至无法访问。 那我加上自动跳转也是不行咯 (-d $request_filename)它有个条件是必需为真实目录，而我的rewrite不是的，所以没有效果 if (-d $request_filename){ rewrite ^/(.*)([^/])$ http://$host/$1$2/ permanent; } 知道原因后就好办了，让我手动跳转吧 rewrite ^/([0-9a-z]+)job$ /$1job/ permanent; rewrite ^/([0-9a-z]+)job/(.*)$ /area/$1/$2 last; 文件和目录不存在的时候重定向： if (!-e $request_filename) { proxy_pass http://127.0.0.1; } 域名跳转 server { listen 80; server_name jump.c1gstudio.com; index index.html index.htm index.php; root /opt/lampp/htdocs/www; rewrite ^/ http://www.c1gstudio.com/; access_log off; } 多域名转向 server_name www.c1gstudio.com www.c1gstudio.net; index index.html index.htm index.php; root /opt/lampp/htdocs; if ($host ~ “c1gstudio/.net”) { rewrite ^(.*) http://www.c1gstudio.com$1 permanent; } 三级域名跳转 if ($http_host ~* “^(.*)/.i/.c1gstudio/.com$”) { rewrite ^(.*) http://top.yingjiesheng.com$1; break; } 域名镜向 server { listen 80; server_name mirror.c1gstudio.com; index index.html index.htm index.php; root /opt/lampp/htdocs/www; rewrite ^/(.*) http://www.c1gstudio.com/$1 last; access_log off; } 某个子目录作镜向 location ^~ /zhaopinhui { rewrite ^.+ http://zph.c1gstudio.com/ last; break; } discuz ucenter home (uchome) rewrite rewrite ^/(space|network)-(.+)/.html$ /$1.php?rewrite=$2 last; rewrite ^/(space|network)/.html$ /$1.php last; rewrite ^/([0-9]+)$ /space.php?uid=$1 last; discuz 7 rewrite rewrite ^(.*)/archiver/((fid|tid)-[/w/-]+/.html)$ $1/archiver/index.php?$2 last; rewrite ^(.*)/forum-([0-9]+)-([0-9]+)/.html$ $1/forumdisplay.php?fid=$2&amp;page=$3 last; rewrite ^(.*)/thread-([0-9]+)-([0-9]+)-([0-9]+)/.html$ $1/viewthread.php?tid=$2&amp;extra=page/%3D$4&amp;page=$3 last; rewrite ^(.*)/profile-(username|uid)-(.+)/.html$ $1/viewpro.php?$2=$3 last; rewrite ^(.*)/space-(username|uid)-(.+)/.html$ $1/space.php?$2=$3 last; rewrite ^(.*)/tag-(.+)/.html$ $1/tag.php?name=$2 last; 给discuz某版块单独配置域名 server_name bbs.c1gstudio.com news.c1gstudio.com; location = / { if ($http_host ~ news/.c1gstudio.com$) { rewrite ^.+ http://news.c1gstudio.com/forum-831-1.html last; break; } } discuz ucenter 头像 rewrite 优化 location ^~ /ucenter { location ~ .*/.php?$ { #fastcgi_pass unix:/tmp/php-cgi.sock; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fcgi.conf; } location /ucenter/data/avatar { log_not_found off; access_log off; location ~ /(.*)_big/.jpg$ { error_page 404 /ucenter/images/noavatar_big.gif; } location ~ /(.*)_middle/.jpg$ { error_page 404 /ucenter/images/noavatar_middle.gif; } location ~ /(.*)_small/.jpg$ { error_page 404 /ucenter/images/noavatar_small.gif; } expires 300; break; } } jspace rewrite location ~ .*/.php?$ { #fastcgi_pass unix:/tmp/php-cgi.sock; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fcgi.conf; } location ~* ^/index.php/ { rewrite ^/index.php/(.*) /index.php?$1 break; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fcgi.conf; }","tags":[{"name":"nginx","slug":"nginx","permalink":"http://www.jiliuke.com/tags/nginx/"},{"name":"rewrite","slug":"rewrite","permalink":"http://www.jiliuke.com/tags/rewrite/"}]},{"title":"jquery特效插件flexslider","date":"2014-08-04T01:37:10.000Z","path":"2014/08/04/jquery-e7-89-b9-e6-95-88-e6-8f-92-e4-bb-b6flexslider/","text":"1.flexslider 预览地址：FlexSlider2 下载插件 网盘地址：FlexSlider2简版demo HTML关键代码说明 //使用flexslider插件 $(window).load(function() { $(‘.flexslider’).flexslider({ //参数设置在这里 animation: “slide”,//使用滑动效果 slideshowSpeed: 2300//切换速度 }); }); FlexSlisder参数说明 $(window).load(function() { $(‘.flexslider’).flexslider({ animation: “fade”, //String: Select your animation type, “fade” or “slide”图片变换方式：淡入淡出或者滑动 direction: “horizontal”, //String: Select the sliding direction, “horizontal” or “vertical”图片设置为滑动式时的滑动方向：左右或者上下 slideshow: true, //Boolean: Animate slider automatically 载入页面时，是否自动播放 slideshowSpeed: 7000, //Integer: Set the speed of the slideshow cycling, in milliseconds 自动播放速度毫秒 animationDuration: 600, //Integer: Set the speed of animations, in milliseconds动画淡入淡出效果延时 directionNav: true, //Boolean: Create navigation for previous/next navigation? (true/false)是否显示左右控制按钮 controlNav: true, //Boolean: Create navigation for paging control of each clide? Note: Leave true for manualControls usage是否显示控制菜单 keyboardNav: true, //Boolean: Allow slider navigating via keyboard left/right keys键盘左右方向键控制图片滑动 mousewheel: false, //Boolean: Allow slider navigating via mousewheel鼠标滚轮控制制图片滑动 prevText: “Previous”, //String: Set the text for the “previous” directionNav item nextText: “Next”, //String: Set the text for the “next” directionNav item pausePlay: false, //Boolean: Create pause/play dynamic element pauseText: ‘Pause’, //String: Set the text for the “pause” pausePlay item playText: ‘Play’, //String: Set the text for the “play” pausePlay item randomize: false, //Boolean: Randomize slide order 是否随即幻灯片 slideToStart: 0, //Integer: The slide that the slider should start on. Array notation (0 = first slide)初始化第一次显示图片位置 animationLoop: true, //Boolean: Should the animation loop? If false, directionNav will received “disable” classes at either end 是否循环滚动 pauseOnAction: true, //Boolean: Pause the slideshow when interacting with control elements, highly recommended. pauseOnHover: false, //Boolean: Pause the slideshow when hovering over slider, then resume when no longer hovering controlsContainer: “”, //Selector: Declare which container the navigation elements should be appended too. Default container is the flexSlider element. Example use would be “.flexslider-container”, “#container”, etc. If the given element is not found, the default action will be taken. manualControls: “”, //Selector: Declare custom control navigation. Example would be “.flex-control-nav li” or “#tabs-nav li img”, etc. The number of elements in your controlNav should match the number of slides/tabs.自定义控制导航 manualControlEvent:””, //String:自定义导航控制触发事件:默认是click,可以设定hover start: function(){}, //Callback: function(slider) - Fires when the slider loads the first slide before: function(){}, //Callback: function(slider) - Fires asynchronously with each slider animation after: function(){}, //Callback: function(slider) - Fires after each slider animation completes end: function(){} //Callback: function(slider) - Fires when the slider reaches the last slide (asynchronous) }); });","tags":[{"name":"jquery","slug":"jquery","permalink":"http://www.jiliuke.com/tags/jquery/"},{"name":"flexslider","slug":"flexslider","permalink":"http://www.jiliuke.com/tags/flexslider/"}]},{"title":"开源镜像站点地址汇总","date":"2014-06-20T01:15:19.000Z","path":"2014/06/20/e5-bc-80-e6-ba-90-e9-95-9c-e5-83-8f-e7-ab-99-e7-82-b9-e5-9c-b0-e5-9d-80-e6-b1-87-e6-80-bb/","text":"开源镜像站：即一个放置开源系统镜像文件的站点.免费提供镜像文件下载下来可以刻盘也可以直接用虚拟光驱安装操作系统，开源的软件,LINUX源码网站 公司类 搜狐开源镜像站：http://mirrors.sohu.com/ 网易开源镜像站：http://mirrors.163.com/ 开源中国：http://mirrors.oschina.net/ 首都在线科技股份有限公司：http://mirrors.yun-idc.com/ 阿里云开源镜像：http://mirrors.aliyun.com/ LUPA：http://mirror.lupaworld.com/ 常州贝特康姆软件技术有限公司(原cn99）：http://centos.bitcomm.cn/ 特别类 centos镜像站：http://www.centos.org/download/mirrors/ 大学类 中山大学镜像：http://mirror.sysu.edu.cn/ 山东理工大学：http://mirrors.sdutlinux.org/ 哈尔滨工业大学：http://run.hit.edu.cn/ 中国地质大学：http://cugbteam.org/ 大连理工大学：http://mirror.dlut.edu.cn/ 西南林业大学： http://cs3.swfu.edu.cn/cs3guide.html 北京化工大学（仅教育网可以访问），包含 CentOS 镜像：http://ubuntu.buct.edu.cn/ 天津大学：http://mirror.tju.edu.cn/ 西南大学：http://linux.swu.edu.cn/swudownload/Distributions/ 青岛大学：http://mirror.qdu.edu.cn/ 南京师范大学：http://mirrors.njnu.edu.cn/ 大连东软信息学院： http://mirrors.neusoft.edu.cn/ 浙江大学：http://mirrors.zju.edu.cn/ 兰州大学：http://mirror.lzu.edu.cn/ 厦门大学：http://mirrors.xmu.edu.cn/ 北京理工大学： http://mirror.bit.edu.cn (IPv4 only) http://mirror.bit6.edu.cn (IPv6 only) 北京交通大学： http://mirror.bjtu.edu.cn (IPv4 only) http://mirror6.bjtu.edu.cn (IPv6 only) http://debian.bjtu.edu.cn (IPv4+IPv6) 上海交通大学： http://ftp.sjtu.edu.cn/ (IPv4 only) http://ftp6.sjtu.edu.cn (IPv6 only) 清华大学： http://mirrors.tuna.tsinghua.edu.cn/ (IPv4+IPv6) http://mirrors.6.tuna.tsinghua.edu.cn/ (IPv6 only) http://mirrors.4.tuna.tsinghua.edu.cn/ (IPv4 only) 中国科学技术大学： http://mirrors.ustc.edu.cn/ (IPv4+IPv6) http://mirrors4.ustc.edu.cn/ http://mirrors6.ustc.edu.cn/ 东北大学： http://mirror.neu.edu.cn/ (IPv4 only) http://mirror.neu6.edu.cn/ (IPv6 only) 华中科技大学： http://mirrors.hust.edu.cn/ http://mirrors.hustunique.com/ 电子科技大学：http://ubuntu.uestc.edu.cn/ 电子科大凝聚工作室(Raspbian单一系统镜像) http://raspbian.cnssuestc.org/ 电子科大星辰工作室(少数小众发布版镜像) http://mirrors.stuhome.net/ PyPi 镜像 豆瓣：http://pypi.douban.com/ 山东理工大学：http://pypi.sdutlinux.org/ 中山大学：http://mirror.sysu.edu.cn/pypi/ V2EX：http://pypi.v2ex.com/simple/ RubyGems 镜像 中山大学：http://mirror.sysu.edu.cn/rubygems/ 山东理工大学：http://ruby.sdutlinux.org/ 淘宝网：http://ruby.taobao.org/ npm 镜像 cnpmjs：http://cnpmjs.org/","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"开源","slug":"开源","permalink":"http://www.jiliuke.com/tags/%E5%BC%80%E6%BA%90/"},{"name":"镜像","slug":"镜像","permalink":"http://www.jiliuke.com/tags/%E9%95%9C%E5%83%8F/"}]},{"title":"试用Redis安装、php环境连接、测试","date":"2014-05-29T01:15:12.000Z","path":"2014/05/29/e8-af-95-e7-94-a8redis-e5-ae-89-e8-a3-85-e3-80-81php-e7-8e-af-e5-a2-83-e8-bf-9e-e6-8e-a5-e3-80-81-e6-b5-8b-e8-af-95/","text":"Redis介绍 Redis本质上一个Key/Value数据库，与Memcached类似的 NoSQL型数据库，但是他的数据可以持久化的保存在磁盘上，解决了服务重启后数据不丢失的问题，他的值可以是string（字符串）、list（列 表）、sets（集合）或者是ordered sets（被排序的集合），所有的数据类型都具有push/pop、add/remove、执行服务端的 并集、交集、两个sets集中的差别等等操作，这些操作都是具有原子性的，Redis还支持各种不同的排序能力 Redis 2.0更是增加了很多新特性，如：提升了性能、增加了新的数据类型、更少的利用内存（AOF和VM） Redis支持绝大部分主流的开发语言，如：C、Java、C＃、PHP、Perl、Python、Lua、Erlang、Ruby等等 官网：http://code.google.com/p/redis/ Redis性能 根据Redis官方的测试结果：在50个并发的情况下请求10w次，写的速度是110000次/s，读的速度是81000次/s 地址：http://code.google.com/p/redis/wiki/Benchmarks 安装过程 最新稳定版，Redis 2.0.4 stable wget http://redis.googlecode.com/files/redis-2.0.4.tar.gz tar zxf redis-2.0.4.tar.gz cd redis-2.0.4 与其它软件不同的是，不需要configure。 make 装完了。 创建一个目录 mkdir /usr/local/redis2 cp redis-server redis-benchmark redis-cli redis.conf /usr/local/redis2 启动： ./redis-server &gt; /dev/null &amp; 测试： 存值： ./redis-cli set hx value 取值： ./redis-cli get hx 附：redis.conf配置文件： 引用 #是否作为守护进程运行 daemonize yes #配置pid的存放路径及文件名，默认为当前路径下 pidfile redis.pid #Redis默认监听端口 port 6379 #客户端闲置多少秒后，断开连接 timeout 300 #日志显示级别 loglevel verbose #指定日志输出的文件名，也可指定到标准输出端口 logfile stdout #设置数据库的数量，默认连接的数据库是0，可以通过select N来连接不同的数据库 databases 16 #保存数据到disk的策略 #当有一条Keys数据被改变是，900秒刷新到disk一次 save 900 1 #当有10条Keys数据被改变时，300秒刷新到disk一次 save 300 10 #当有1w条keys数据被改变时，60秒刷新到disk一次 save 60 10000 #当dump .rdb数据库的时候是否压缩数据对象 rdbcompression yes #dump数据库的数据保存的文件名 dbfilename dump.rdb #Redis的工作目录 dir /home/falcon/redis-2.0.0/ ########### Replication ##################### #Redis的复制配置 # slaveof # masterauth ############## SECURITY ########### # requirepass foobared ############### LIMITS ############## #最大客户端连接数 # maxclients 128 #最大内存使用率 # maxmemory ########## APPEND ONLY MODE ######### #是否开启日志功能 appendonly no # 刷新日志到disk的规则 # appendfsync always appendfsync everysec # appendfsync no ################ VIRTUAL MEMORY ########### #是否开启VM功能 vm-enabled no # vm-enabled yes vm-swap-file logs/redis.swap vm-max-memory 0 vm-page-size 32 vm-pages 134217728 vm-max-threads 4 ############# ADVANCED CONFIG ############### glueoutputbuf yes hash-max-zipmap-entries 64 hash-max-zipmap-value 512 #是否重置Hash表 activerehashing yes 安装php客户端 使用rediska做为redis的PHP客户端。 安装peal cd /usr/local/webserver/php/ curl http://pear.php.net/go-pear | /usr/local/webserver/php/bin/php pear channel-discover pear.geometria-lab.net pear install geometria-lab/Rediska-beta php使用参考：http://rediska.geometria-lab.ru/documentation/usage/ 测试代码大致如下： $options = array( ‘servers’ =&gt; array( array(‘host’ =&gt; ‘127.0.0.1’, ‘port’ =&gt; 6379) ) ); require_once ‘/usr/local/webserver/php/PEAR/Rediska.php’; $rediska = new Rediska($options); $redis = new Rediska_Key(‘key’); $redis-&gt;setValue(‘value’); $value = $redis-&gt;getValue(‘key’); echo $value; 分别测试了下，使用mc,mcdb和redis。 引用 1000次 memcache:82.2749ms memcachedb:84.4438ms include语句放在循环里面 redis:463.0890ms memcache:81.6891ms memcachedb:86.5080ms include文件放在外面 redis:237.6881ms 5000次 memcache:388.6840ms memcachedb:421.1838ms include语句放在循环外面 redis:1,075.9599ms redis本身性能优越，但由于php客户端需要包含不少文件，反而性能比mcdb差不少。如果没有list,set等存储要求，用mcdb足已！ @@10-12-24@@UPDATE：增加了PHP测试代码。","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"redis","slug":"redis","permalink":"http://www.jiliuke.com/tags/redis/"}]},{"title":"CentOS Linux解决Device eth0 does not seem to be present","date":"2014-05-15T01:28:55.000Z","path":"2014/05/15/centos-linux-e8-a7-a3-e5-86-b3device-eth0-does-not-seem-to-be-present/","text":"在VMware里克隆出来的CentOS Linux。。 ifconfig…没有看到eth0.。然后重启网卡又报下面错误。 故障现象： service network restart Shutting down loopback insterface: [ OK ] Bringing up loopback insterface: [ OK ] Bringing up interface eth0: Device eth0 does not seem to be present,delaying initialization. [FAILED] 解决办法： 首先，打开/etc/udev/rules.d/70-persistent-net.rules内容如下面例子所示： # vi /etc/udev/rules.d/70-persistent-net.rules # This file was automatically generated by the /lib/udev/write_net_rules # program, run by the persistent-net-generator.rules rules file. # # You can modify it, as long as you keep each rule on a single # line, and change only the value of the NAME= key. # PCI device 0x1022:0x2000 (pcnet32) SUBSYSTEM==”net”, ACTION==”add”, DRIVERS==”?“, ATTR{address}==”00:0c:29:8f:89:9 7”, ATTR{type}==”1”, KERNEL==”eth“, NAME=”eth0” # PCI device 0x1022:0x2000 (pcnet32) SUBSYSTEM==”net”, ACTION==”add”, DRIVERS==”?“, ATTR{address}==”00:0c:29:50:bd:1 7”, ATTR{type}==”1”, KERNEL==”eth“, NAME=”eth1” 记录下，eth1网卡的mac地址00:0c:29:50:bd:17 接下来，打开/etc/sysconfig/network-scripts/ifcfg-eth0 # vi /etc/sysconfig/network-scripts/ifcfg-eth0 将 DEVICE=”eth0” 改成 DEVICE=”eth1” , 将 HWADDR=”00:0c:29:8f:89:97” 改成上面的mac地址 HWADDR=”00:0c:29:50:bd:17” 最后，重启网络 # service network restart 或者 # /etc/init.d/network restart 正常了。","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"linux","slug":"linux","permalink":"http://www.jiliuke.com/tags/linux/"}]},{"title":"CentOS下查看已经登录用户并踢出的方法","date":"2014-05-15T01:26:16.000Z","path":"2014/05/15/centos-e4-b8-8b-e6-9f-a5-e7-9c-8b-e5-b7-b2-e7-bb-8f-e7-99-bb-e5-bd-95-e7-94-a8-e6-88-b7-e5-b9-b6-e8-b8-a2-e5-87-ba-e7-9a-84-e6-96-b9-e6-b3-95/","text":"# pkill -kill -t pts/0 （pts/0为w指令看到的用户终端号）","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"pkill","slug":"pkill","permalink":"http://www.jiliuke.com/tags/pkill/"},{"name":"user","slug":"user","permalink":"http://www.jiliuke.com/tags/user/"}]},{"title":"wget: unable to resolve host address的解决方法  ","date":"2014-05-15T01:25:35.000Z","path":"2014/05/15/wget-unable-to-resolve-host-address-e7-9a-84-e8-a7-a3-e5-86-b3-e6-96-b9-e6-b3-95/","text":"解决办法： 登入root（VPS）。 进入/etc/resolv.conf。 修改内容为下 nameserver 8.8.8.8 #google域名服务器 nameserver 8.8.4.4 #google域名服务器","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"nameserver","slug":"nameserver","permalink":"http://www.jiliuke.com/tags/nameserver/"}]},{"title":"linux CentOS 修改IP地址，重启丢失设置的问题","date":"2014-05-15T01:24:57.000Z","path":"2014/05/15/linux-centos-e4-bf-ae-e6-94-b9ip-e5-9c-b0-e5-9d-80-ef-bc-8c-e9-87-8d-e5-90-af-e4-b8-a2-e5-a4-b1-e8-ae-be-e7-bd-ae-e7-9a-84-e9-97-ae-e9-a2-98/","text":"修改对应网卡的IP地址的配置文件 # vi /etc/sysconfig/network-scripts/ifcfg-eth0 修改以下内容 DEVICE=eth0 #描述网卡对应的设备别名，例如ifcfg-eth0的文件中它为eth0 BOOTPROTO=static #设置网卡获得ip地址的方式，可能的选项为static，dhcp或bootp，分别对应静态指定的 ip地址，通过dhcp协议获得的ip地址，通过bootp协议获得的ip地址 BROADCAST=192.168.0.255 #对应的子网广播地址 HWADDR=00:07:E9:05:E8:B4 #对应的网卡物理地址 IPADDR=12.168.1.2 #如果设置网卡获得 ip地址的方式为静态指定，此字段就指定了网卡对应的ip地址 IPV6INIT=no IPV6_AUTOCONF=no NETMASK=255.255.255.0 #网卡对应的网络掩码 NETWORK=192.168.1.0 #网卡对应的网络地址 ONBOOT=yes #系统启动时是否设置此网络接口，设置为yes时，系统启动时激活此设备 二、CentOS 修改网关 修改对应网卡的网关的配置文件 [root@centos]# vi /etc/sysconfig/network 修改以下内容 NETWORKING=yes(表示系统是否使用网络，一般设置为yes。如果设为no，则不能使用网络，而且很多系统服务程序将无法启动) HOSTNAME=centos(设置本机的主机名，这里设置的主机名要和/etc/hosts中设置的主机名对应) GATEWAY=192.168.1.1(设置本机连接的网关的IP地址。例如，网关为10.0.0.2) 三、CentOS 修改DNS 修改对应网卡的DNS的配置文件 # vi /etc/resolv.conf 修改以下内容 nameserver 8.8.8.8 #google域名服务器 nameserver 8.8.4.4 #google域名服务器 四、重新启动网络配置 # service network restart 或 # /etc/init.d/network restart 修改 IP 地址 即时生效: # ifconfig eth0 192.168.0.2 netmask 255.255.255.0 启动生效: 修改 /etc/sysconfig/network-scripts/ifcfg-eth0 修改网关 Default Gateway 即时生效: # route add default gw 192.168.0.1 dev eth0 启动生效: 修改 /etc/sysconfig/network 修改 DNS 修改/etc/resolv.conf 修改后可即时生效，启动同样有效 修改 host name 即时生效: # hostname centos1 启动生效: 修改/etc/sysconfig/network","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"ip","slug":"ip","permalink":"http://www.jiliuke.com/tags/ip/"}]},{"title":"centos的软件安装方法rpm和yum","date":"2014-05-15T01:24:34.000Z","path":"2014/05/15/centos-e7-9a-84-e8-bd-af-e4-bb-b6-e5-ae-89-e8-a3-85-e6-96-b9-e6-b3-95rpm-e5-92-8cyum/","text":"centos的软件安装大致可以分为两种类型： [centos]rpm文件安装，使用rpm指令 类似[ubuntu]deb文件安装，使用dpkg指令 [centos]yum安装 类似[ubuntu]apt-get安装 rpm命令 (一)查询系统装已经安装的软件信息 对于一个rpm包来说，都是有”-“和”.”构成的，基本上有以下几部分组成： * 包名 * 版本信息 * 发布版本号 * 运行平台，当出现noarch,代表的是软件可以平台兼容 1）查询系统中已经安装的软件 rpm -qa 2）查询一个已经安装的文件属于哪个软件包； rpm -qf 文件名的绝对路径 3）查询已安装软件包都安装到何处； 软件名定义是:rpm包去除平台信息和后缀后的信息 rpm -ql 软件名 4）查询一个已安装软件包的信息 rpm -qi 软件名 5）查看一下已安装软件的配置文件； rpm -qc 软件名 6）查看一个已经安装软件的文档安装位置： rpm -qd 软件名 7）查看一下已安装软件所依赖的软件包及文件； rpm -qR 软件名 (二)对于未安装的软件包信息查询 1）查看一个软件包的用途、版本等信息； rpm -qpi rpm文件 2）查看一件软件包所包含的文件； rpm -qpl rpm文件 3）查看软件包的文档所在的位置； rpm -qpd rpm文件 4）查看一个软件包的配置文件； rpm -qpc rpm文件 5）查看一个软件包的依赖关系 rpm -qpR rpm文件 (三)软件包的安装、升级、删除等 1)安装或者升级一个rpm包 rpm -ivh rpm文件【安装】 rpm -Uvh rpm文件【更新】 2)删除一个rpm 包 rpm -e 软件名 如何需要不管依赖问题，强制删除软件，在如上命令其后加上 –nodeps (四)签名导入 rpm –import 签名文件 rpm –import RPM-GPG-KEY yum命令 (一)yum基本概念 1)yum是什么 yum = Yellow dog Updater, Modified 主要功能是更方便的添加/删除/更新RPM包. 它能自动解决包的倚赖性问题. 它能便于管理大量系统的更新问题 2)yum的特点 可以同时配置多个资源库(Repository) 简洁的配置文件(/etc/yum.conf 自动解决增加或删除rpm包时遇到的倚赖性问题 使用方便 保持与RPM数据库的一致性 3)yum安装 CentOS自带(yum-.noarch.rpm) #rpm -ivh yum-.noarch.rpm 在第一次启用yum之前首先需要导入系统的RPM-GPG-KEY： (二)yum指令的使用 当第一次使用yum管理软件时，yum会自动下载所需要的headers放置在/var/cache/yum目录下； 1) rpm包的更新 #检查可以更新的软件包 yum check-update #更新所有的软件包 yum update #更新特定的软件包 yum update kernel #大规模的升级 yum upgrade 2) rpm包的安装和删除 #rpm包的安装和删除 yum install xxx【服务名】 yum remove xxx【服务名】 3) yum缓存的相关信息 #清楚缓存中rpm包文件 yum clean packages #清楚缓存中rpm的头文件 yum clean headers #清除缓存中旧的头文件 yum clean old headers #清除缓存中旧的rpm头文件和包文件 yum clean all 4)软件包信息查询 #列出资源库中所有可以安装或更新的rpm包 yum list #列出资源库中特定的可以安装或更新以及已经安装的rpm包 yum list firfox* N:可以在rpm包名中使用通配符,查询类似的rpm包 #列出资源库中所有可以更新的rpm包 yum list updates #列出已经安装的所有的rpm包 yum list installed #列出已经安装的但是不包含在资源库中的rpm包 yum list extras N:通过如网站下载安装的rpm包 #rpm包信息显示(info参数同list)，列出资源库中所有可以安装或更新的rpm包的信息 yum info #列出资源库中特定的可以安装或更新以及已经安装的rpm包的信息 yum info firefox* N:可以在rpm包名中使用匹配符 #列出资源库中所有可以更新的rpm包的信息 yum info updates #列出已经安装的所有的rpm包的信息 yum info installed #列出已经安装的但是不包含在资源库中的rpm包的信息 yum info extras N:通过如网站下载安装的rpm包的信息 #搜索匹配特定字符的rpm包 yum search firofox #搜索包含特定文件的rpm包 yum provides firefox (三)yum软件源更新 http://mirrors.163.com/.help/centos.html","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"rpm","slug":"rpm","permalink":"http://www.jiliuke.com/tags/rpm/"},{"name":"yum","slug":"yum","permalink":"http://www.jiliuke.com/tags/yum/"}]},{"title":"CentOS 某目录程序加入开机启动方法","date":"2014-05-15T01:24:02.000Z","path":"2014/05/15/centos-e6-9f-90-e7-9b-ae-e5-bd-95-e7-a8-8b-e5-ba-8f-e5-8a-a0-e5-85-a5-e5-bc-80-e6-9c-ba-e5-90-af-e5-8a-a8-e6-96-b9-e6-b3-95/","text":"Linux 最后加载的是/etc/rc.d/rc.local,所有我们只需要把代码写在tc.local即可开机执行","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"开机启动","slug":"开机启动","permalink":"http://www.jiliuke.com/tags/%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/"}]},{"title":"CentOS开机自动运行程序的脚本","date":"2014-05-15T01:22:57.000Z","path":"2014/05/15/centos-e5-bc-80-e6-9c-ba-e8-87-aa-e5-8a-a8-e8-bf-90-e8-a1-8c-e7-a8-8b-e5-ba-8f-e7-9a-84-e8-84-9a-e6-9c-ac/","text":"有些时候我们需要在服务器里设置一个脚本，让他一开机就自己启动。方法如下： cd /etc/init.d vi youshell.sh #将youshell.sh修改为你自己的脚本名 编写自己的脚本后保存退出。 在编写脚本的时候，请先加入以下注释 #add for chkconfig #chkconfig: 2345 70 30 #description: the description of the shell #关于脚本的简短描述 #processname: servicename #第一个进程名，后边设置自启动的时候会用到 说明： 2345是指脚本的运行级别，即在2345这4种模式下都可以运行，234都是文本界面，5就是图形界面X 70是指脚本将来的启动顺序号，如果别的程序的启动顺序号比70小（比如44、45），则脚本需要等这些程序都启动以后才启动。 30是指系统关闭时，脚本的停止顺序号。 给脚本添加上可执行权限： chmod +x youshell.sh 利用chkconfig命令将脚本设置为自启动 chkconfig –add servicename 这样你的脚本就可以在开机后自动运行了。 另外，在redhat里也可以使用这个方法来实现开机自启动。 chkconfig的使用方法 chkconfig(check config) 功能说明：检查，设置系统的各种服务。 语 法：chkconfig [–add][–del][–list][系统服务]或chkconfig[–level&lt;等级代号&gt;][系统服务][on/off/reset] 补充说明：这是RedHat公司遵循GPL规则所开发的程序，它可查询操作系统在每一个执行等级中会执行哪些系统服务，其中包括各类常驻服务。 参数： –add 增加所指定的系统服务，让chkconfig指令得以管理它，并同时在系统启动的叙述文件内增加相关数据。 –del 删除所指定的系统服务，不再由chkconfig指令管理，并同时在系统启动的叙述文件内删除相关数据。 –level&lt;等级代号&gt; 指定读系统服务要在哪一个执行等级中开启或关毕 1：chkconfig 命令也可以用来激活和解除服务。chkconfig –list 命令显示系统服务列表，以及这些服务在运行级别0到6中已被启动（on）还是停止（off）。 chkconfig –list chkconfig –list httpd httpd 0:off 1:off 2:on 3:on 4:on 5:on 6:off 2：chkconfig 还能用来设置某一服务在某一指定的运行级别内被启动还是被停运。譬如，要在运行级别3、4、5中停运 nscd 服务，使用下面的命令： chkconfig –level 345 nscd off 3：由 xinetd 管理的服务会立即被 chkconfig 影响。譬如，如果 xinetd 在运行，finger 被禁用，那么执行了 chkconfig finger on 命令后，finger 就不必手工地重新启动 xinetd 来立即被启用。对其它服务的改变在使用 chkconfig 之后不会立即生效。必须使用service servicename start/stop/restart命令来重起服务 第二种方法 编辑 /etc/rc.d/rc.local文件 格式为 程序名 程序路径 例如 a.sh /home/a.sh","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"chkconfig","slug":"chkconfig","permalink":"http://www.jiliuke.com/tags/chkconfig/"},{"name":"自运行","slug":"自运行","permalink":"http://www.jiliuke.com/tags/%E8%87%AA%E8%BF%90%E8%A1%8C/"}]},{"title":"linux常用命令","date":"2014-05-14T06:08:25.000Z","path":"2014/05/14/linux-e5-b8-b8-e7-94-a8-e5-91-bd-e4-bb-a4/","text":"1.查看ip方法 ifconfig 2.查看端口占用情况的命令： lsof -i tcp:80","tags":[{"name":"linux","slug":"linux","permalink":"http://www.jiliuke.com/tags/linux/"},{"name":"查看IP","slug":"查看IP","permalink":"http://www.jiliuke.com/tags/%E6%9F%A5%E7%9C%8BIP/"}]},{"title":"selinux小技巧","date":"2014-05-14T06:07:52.000Z","path":"2014/05/14/selinux-e5-b0-8f-e6-8a-80-e5-b7-a7/","text":"查看ftpselinux状态 getsebool -a|grep ftp setsebool selinux状态 1开启|0关闭","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"SELINUX","slug":"SELINUX","permalink":"http://www.jiliuke.com/tags/SELINUX/"},{"name":"getsebool","slug":"getsebool","permalink":"http://www.jiliuke.com/tags/getsebool/"},{"name":"setsebool","slug":"setsebool","permalink":"http://www.jiliuke.com/tags/setsebool/"}]},{"title":"centos下常用查看命令","date":"2014-05-14T06:07:14.000Z","path":"2014/05/14/centos-e4-b8-8b-e5-b8-b8-e7-94-a8-e6-9f-a5-e7-9c-8b-e5-91-bd-e4-bb-a4/","text":"#uname -a # 查看内核/操作系统/CPU信息 # head -n 1 /etc/issue # 查看操作系统版本 # cat /proc/cpuinfo # 查看CPU信息 # hostname # 查看计算机名 # lspci -tv # 列出所有PCI设备 # lsusb -tv # 列出所有USB设备 # lsmod # 列出加载的内核模块 # env # 查看环境变量 资源 # free -m # 查看内存使用量和交换区使用量 # df -h # 查看各分区使用情况 # du -sh &lt;目录名&gt; # 查看指定目录的大小 # grep MemTotal /proc/meminfo # 查看内存总量 # grep MemFree /proc/meminfo # 查看空闲内存量 # uptime # 查看系统运行时间、用户数、负载 # cat /proc/loadavg # 查看系统负载 磁盘和分区 # mount | column -t # 查看挂接的分区状态 # fdisk -l # 查看所有分区 # swapon -s # 查看所有交换分区 # hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备) # dmesg | grep IDE # 查看启动时IDE设备检测状况 网络 # ifconfig # 查看所有网络接口的属性 # iptables -L # 查看防火墙设置 # route -n # 查看路由表 # netstat -lntp # 查看所有监听端口 # netstat -antp # 查看所有已经建立的连接 # netstat -s # 查看网络统计信息 进程 # ps -ef # 查看所有进程 # top # 实时显示进程状态 用户 # w # 查看活动用户 # id &lt;用户名&gt; # 查看指定用户信息 # last # 查看用户登录日志 # cut -d: -f1 /etc/passwd # 查看系统所有用户 # cut -d: -f1 /etc/group # 查看系统所有组 # crontab -l # 查看当前用户的计划任务 服务 # chkconfig –list # 列出所有系统服务 # chkconfig –list | grep on # 列出所有启动的系统服务 程序 # rpm -qa # 查看所有安装的软件包","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"常用命令","slug":"常用命令","permalink":"http://www.jiliuke.com/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"}]},{"title":"linux在命令行下打开各种类型文件","date":"2014-05-14T06:06:33.000Z","path":"2014/05/14/linux-e5-9c-a8-e5-91-bd-e4-bb-a4-e8-a1-8c-e4-b8-8b-e6-89-93-e5-bc-80-e5-90-84-e7-a7-8d-e7-b1-bb-e5-9e-8b-e6-96-87-e4-bb-b6-2/","text":"如何能在命令行下通过指令打开2.xls，随之系统会调用默认的打开程序就好了。 方法： xdg-open filename format: xdg-open { file | URL } 通过命令格式可以看出可以打开文件及url地址。 example: xdg-open http://www.baidu.com #打开网址 xdg-open ~/Downloads/2.xls #打开文件 xdg-open ~ #打开用户主目录","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"linux","slug":"linux","permalink":"http://www.jiliuke.com/tags/linux/"}]},{"title":"linux ip 配置方法","date":"2014-05-14T06:05:57.000Z","path":"2014/05/14/linux-ip-e9-85-8d-e7-bd-ae-e6-96-b9-e6-b3-95/","text":"首先你得知道几个命令： ifconfig 查看网卡信息的命令（网卡以eth0~ethN命名，看你网卡用的是哪个）。另外，它只在root用户下可能，一般普通用户不能用。 route -n 查看路由的命令。 cat /etc/resolv.conf 查看DNS，配置DNS可在这个文件配置 命令行里有三种修改IP方法，其中一种是临时的，重启后就没有了，在此不提了。只说两种永久生效的: 1，在命令行里，通过命令调出图形界面配置，比较直观，容易配置： 命令 setup 弹出图形界面，选择network configuration —-&gt; 回车—–&gt;两个选项，第一个是网卡，第二个是DNS，在此不多讲了。写太多了，最主要是很直观。 最后配置完了后，点TAB键或者上下左右键 选：OK—-&gt;save—&gt;save&amp;quit—&gt;quit 2，命令行编写配置文件来实现，一般你的网卡是eth0. # vi /etc/sysconfig/network-scripts/ifcfg-eth0 DEVICE=eth0 #描述网卡对应的设备别名，例如ifcfg-eth0的文件中它为eth0 BOOTPROTO=static #设置网卡获得ip地址的方式，可能的选项为static，dhcp或bootp，分别对应静态指定的 ip地址，通过dhcp协议获得的ip地址，通过bootp协议获得的ip地址 BROADCAST=192.168.0.255 #对应的子网广播地址 HWADDR=00:07:E9:05:E8:B4 #对应的网卡物理地址 IPADDR=192.168.0.2 #如果设置网卡获得 ip地址的方式为静态指定，此字段就指定了网卡对应的ip地址 IPV6INIT=no IPV6_AUTOCONF=no NETMASK=255.255.255.0 #网卡对应的网络掩码 NETWORK=192.168.0.0 #网卡对应的网络地址 ONBOOT=yes #系统启动时是否设置此网络接口，设置为yes时，系统启动时激活此设备 修改对应网卡的网关的配置文件 vi /etc/sysconfig/network NETWORKING=yes(表示系统是否使用网络，一般设置为yes。如果设为no，则不能使用网络，而且很多系统服务程序将无法启动) HOSTNAME=localhost(设置本机的主机名，这里设置的主机名要和/etc/hosts中设置的主机名对应) GATEWAY=192.168.1.1(设置本机连接的网关的IP地址。)","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"linux","slug":"linux","permalink":"http://www.jiliuke.com/tags/linux/"},{"name":"ip","slug":"ip","permalink":"http://www.jiliuke.com/tags/ip/"}]},{"title":"php curl用法 ","date":"2014-04-14T01:21:36.000Z","path":"2014/04/14/php-curl-e7-94-a8-e6-b3-95/","text":"curl 是使用URL语法的传送文件工具，支持FTP、FTPS、HTTP HTPPS SCP SFTP TFTP TELNET DICT FILE和LDAP。curl 支持SSL证书、HTTP POST、HTTP PUT 、FTP 上传，kerberos、基于HTT格式的上传、代理、cookie、用户＋口令证明、文件传送恢复、http代理通道和大量其他有用的技巧。详见参考手册 原来php默认并不进行此项功能的扩展，但还是有的，只是没有让它生效罢了。打开PHP安装目录，搜索以下三个文件 ssleay32.dll、libeay32.dll和 php_curl.dll，一一拷贝到系统目录下的system32文件夹下，修改php.ini文件，找到;extension= php_curl.dll行，去掉前面的;号，保存，重启服务器。在站点目录下建立一个PHP文件，内容如下 $ch = curl_init(“http://www.php.net”); curl_exec($ch); curl_close($ch); 预览如果能打开http://www.php.net的话说明就安装成功了。 至于linux及unix的安装可以要麻烦一些，得从http://curl.haxx.se/或其他网站上下载curl库 ____________________________________________________________ 以下关于此函数各项使用参数: bool curl_setopt (int ch, string option, mixed value) curl_setopt()函数将为一选项。option参数是你想个CURL会话设置要的设置，value是这个选项给定的值。 下列选项的值将被作为长整形使用(在option参数中指定)： * CURLOPT_INFILESIZE: 当你上传一个文件到远程站点，这个选项告诉PHP你上传文件的大小。 * CURLOPT_VERBOSE: 如果你想CURL报告每一件意外的事情，设置这个选项为一个非零值。 * CURLOPT_HEADER: 如果你想把一个头包含在输出中，设置这个选项为一个非零值。 * CURLOPT_NOPROGRESS: 如果你不会PHP为CURL传输显示一个进程条，设置这个选项为一个非零值。注意：PHP自动设置这个选项为非零值，你应该仅仅为了调试的目的来改变这个选项。 * CURLOPT_NOBODY: 如果你不想在输出中包含body部分，设置这个选项为一个非零值。 * CURLOPT_FAILONERROR: 如果你想让PHP在发生错误(HTTP代码返回大于等于300)时，不显示，设置这个选项为一人非零值。默认行为是返回一个正常页，忽略代码。 * CURLOPT_UPLOAD: 如果你想让PHP为上传做准备，设置这个选项为一个非零值。 * CURLOPT_POST: 如果你想PHP去做一个正规的HTTP POST，设置这个选项为一个非零值。这个POST是普通的 application/x-www-from-urlencoded 类型，多数被HTML表单使用。 * CURLOPT_FTPLISTONLY: 设置这个选项为非零值，PHP将列出FTP的目录名列表。 * CURLOPT_FTPAPPEND: 设置这个选项为一个非零值，PHP将应用远程文件代替覆盖它。 * CURLOPT_NETRC: 设置这个选项为一个非零值，PHP将在你的 ./netrc 文件中查找你要建立连接的远程站点的用户名及密码。 * CURLOPT_FOLLOWLOCATION: 设置这个选项为一个非零值(象 “Location: “)的头，服务器会把它当做HTTP头的一部分发送(注意这是递归的，PHP将发送形如 “Location: “的头)。 * CURLOPT_PUT: 设置这个选项为一个非零值去用HTTP上传一个文件。要上传这个文件必须设置CURLOPT_INFILE和CURLOPT_INFILESIZE选项. * CURLOPT_MUTE: 设置这个选项为一个非零值，PHP对于CURL函数将完全沉默。 * CURLOPT_TIMEOUT: 设置一个长整形数，作为最大延续多少秒。 * CURLOPT_LOW_SPEED_LIMIT: 设置一个长整形数，控制传送多少字节。 * CURLOPT_LOW_SPEED_TIME: 设置一个长整形数，控制多少秒传送CURLOPT_LOW_SPEED_LIMIT规定的字节数。 * CURLOPT_RESUME_FROM: 传递一个包含字节偏移地址的长整形参数，(你想转移到的开始表单)。 * CURLOPT_SSLVERSION: 传递一个包含SSL版本的长参数。默认PHP将被它自己努力的确定，在更多的安全中你必须手工设置。 * CURLOPT_TIMECONDITION: 传递一个长参数，指定怎么处理CURLOPT_TIMEVALUE参数。你可以设置这个参数为TIMECOND_IFMODSINCE 或 TIMECOND_ISUNMODSINCE。这仅用于HTTP。 * CURLOPT_TIMEVALUE: 传递一个从1970-1-1开始到现在的秒数。这个时间将被CURLOPT_TIMEVALUE选项作为指定值使用，或被默认TIMECOND_IFMODSINCE使用。 下列选项的值将被作为字符串： * CURLOPT_URL: 这是你想用PHP取回的URL地址。你也可以在用curl_init()函数初始化时设置这个选项。 * CURLOPT_USERPWD: 传递一个形如[username]:[password]风格的字符串,作用PHP去连接。 * CURLOPT_PROXYUSERPWD: 传递一个形如[username]:[password] 格式的字符串去连接HTTP代理。 * CURLOPT_RANGE: 传递一个你想指定的范围。它应该是”X-Y”格式，X或Y是被除外的。HTTP传送同样支持几个间隔，用逗句来分隔(X-Y,N-M)。 * CURLOPT_POSTFIELDS: 传递一个作为HTTP “POST”操作的所有数据的字符串。 * CURLOPT_REFERER: 在HTTP请求中包含一个”referer”头的字符串。 * CURLOPT_USERAGENT: 在HTTP请求中包含一个”user-agent”头的字符串。 * CURLOPT_FTPPORT: 传递一个包含被ftp “POST”指令使用的IP地址。这个POST指令告诉远程服务器去连接我们指定的IP地址。这个字符串可以是一个IP地址，一个主机名，一个网络界面名 (在UNIX下)，或是‘-’(使用系统默认IP地址)。 * CURLOPT_COOKIE: 传递一个包含HTTP cookie的头连接。 * CURLOPT_SSLCERT: 传递一个包含PEM格式证书的字符串。 * CURLOPT_SSLCERTPASSWD: 传递一个包含使用CURLOPT_SSLCERT证书必需的密码。 * CURLOPT_COOKIEFILE: 传递一个包含cookie数据的文件的名字的字符串。这个cookie文件可以是Netscape格式，或是堆存在文件中的HTTP风格的头。 * CURLOPT_CUSTOMREQUEST: 当进行HTTP请求时，传递一个字符被GET或HEAD使用。为进行DELETE或其它操作是有益的，更Pass a string to be used instead of GET or HEAD when doing an HTTP request. This is useful for doing or another, more obscure, HTTP request. 注意: 在确认你的服务器支持命令先不要去这样做。下列的选项要求一个文件描述(通过使用fopen()函数获得)： * CURLOPT_FILE: 这个文件将是你放置传送的输出文件，默认是STDOUT. * CURLOPT_INFILE: 这个文件是你传送过来的输入文件。 * CURLOPT_WRITEHEADER: 这个文件写有你输出的头部分。 * CURLOPT_STDERR: 这个文件写有错误而不是stderr。用来获取需要登录的页面的例子,当前做法是每次或许都登录一次,有需要的人再做改进了. 摘几个从别的网站扣过来的例子: 例一： $cookie_jar = tempnam(‘./tmp’,’cookie’); $ch = curl_init(); curl_setopt($ch,CURLOPT_URL, ‘http://**’); curl_setopt($ch, CURLOPT_POST, 1); $request = ‘email_address=&amp;password=&amp;action=’; curl_setopt($ch, CURLOPT_POSTFIELDS, $request); curl_setopt($ch, CURLOPT_COOKIEJAR, $cookie_jar); //把返回来的cookie信息保存在$cookie_jar文件中 curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //设定返回的数据是否自动显示 curl_setopt($ch, CURLOPT_HEADER, false); //设定是否显示头信息 curl_setopt($ch, CURLOPT_NOBODY, false);//设定是否输出页面内容 curl_exec($ch); curl_close($ch); //get data after login 例二： $ch2 = curl_init(); curl_setopt($ch2, CURLOPT_URL, ‘http://*****’); curl_setopt($ch2, CURLOPT_HEADER, false); curl_setopt($ch2, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch2, CURLOPT_COOKIEFILE, $cookie_jar); $orders = curl_exec($ch2); echo ”; echo strip_tags($orders); echo ”; curl_close($ch2); 实践证明很稳定:) 例三： set_time_limit(0); function _rand() { $length=26; $chars = “0123456789abcdefghijklmnopqrstuvwxyz”; $max = strlen($chars) – 1; mt_srand((double)microtime() * 1000000); $string = ”; for($i = 0; $i &lt; $length; $i++) { $string .= $chars[mt_rand(0, $max)]; } return $string; } $HTTP_SESSION=_rand(); echo $HTTP_SESSION; $HTTP_Server=”www.baidu.com&quot;; $HTTP_URL=”/“; $ch = curl_init(); curl_setopt ($ch,CURLOPT_URL,”http://“.$HTTP_Server.$HTTP_URL); curl_setopt($ch,CURLOPT_RETURNTRANSFER,true); curl_setopt($ch,CURLOPT_USERAGENT,”Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)”); //curl_setopt($ch,CURLOPT_COOKIE,$HTTP_SESSION); $res = curl_exec($ch); curl_close ($ch); print_r($res); 刷论坛代码： 1、抓cookies程序： $URL=”http://www.yoururl.com/bbs/login.asp?action=chk&quot;; //填入论坛的登陆页面地址 $ch = curl_init(); curl_setopt($ch,CURLOPT_URL,$URL); curl_setopt($ch,CURLOPT_REFERER,”http://www.hxfoods.com/bbs/login.asp&quot;); //设置，访问页面的来源地址 curl_setopt($ch,CURLOPT_POST,1); curl_setopt($ch,CURLOPT_POSTFIELDS,’username=→→敢死队→&amp;password=168168’); //分析登陆页面，把用户名，密码分别对应起来 curl_setopt ($ch, CURLOPT_HEADER,true); //使能显示http头， curl_exec($ch); if (curl_errno($ch)) { print curl_error($ch); } else { curl_close($ch); } 2、刷楼了： set_time_limit(0); //设置程序执行时间无限制 $i=10000; //耍10000次 for($j=0;$j&lt;$i;$j++) { $URL=”http://www.yoururl.com/bbs/savepost.asp&quot;; //这个地址是回复表单里面action的url地址 $ch = curl_init(); curl_setopt($ch,CURLOPT_URL,$URL); curl_setopt($ch,CURLOPT_REFERER,”http://www.hxfoods.com/bbs/dispbbs.asp?boardid=14&amp;replyid=672709&amp;id=127437&amp;page=1&amp;skin=0&amp;Star=53&quot;); //设置来源地址，如果不设置，论坛服务器有可能有验证不允许回复 curl_setopt($ch,CURLOPT_COOKIESESSION,true); //能保存cookie curl_setopt($ch,CURLOPT_COOKIE,”DvForum=userid=24122&amp;usercookies=0&amp;userhidden=2&amp;password=w0reu3g775VrY745&amp;userclass=%96%7C&amp;username=%A1%FA%A1%FA%B8%D2%CB%C0%B6%D3%A1%FA&amp;StatUserID=2194783945 “); //这儿就是设置cookie了 curl_setopt($ch,CURLOPT_POST,1); curl_setopt($ch,CURLOPT_NOBODY,1); //不显示内容，因为有很多论坛回复后要自动跳转。 curl_setopt($ch,CURLOPT_POSTFIELDS,’Body=gfdfgdfgasdfgdfgdfgdfg&amp; followup=672709&amp;RootID=127437&amp;star=58&amp;TotalUseTable=Dv_bbs3&amp; amp;UserName=→→敢死队→&amp;signflag=1&amp;total=65535’); //把你分析的回复表单的参数分别赋值 curl_setopt ($ch, CURLOPT_HEADER,true); curl_exec($ch); if (curl_errno($ch)) { print curl_error($ch); } else { curl_close($ch); } } curl_close — 关闭一个curl会话 curl_copy_handle — 拷贝一个curl连接资源的所有内容和参数 curl_errno — 返回一个包含当前会话错误信息的数字编号 curl_error — 返回一个包含当前会话错误信息的字符串 curl_exec — 执行一个curl会话 curl_getinfo — 获取一个curl连接资源句柄的信息 curl_init — 初始化一个curl会话 curl_multi_add_handle — 向curl批处理会话中添加单独的curl句柄资源 curl_multi_close — 关闭一个批处理句柄资源 curl_multi_exec — 解析一个curl批处理句柄 curl_multi_getcontent — 返回获取的输出的文本流 curl_multi_info_read — 获取当前解析的curl的相关传输信息 curl_multi_init — 初始化一个curl批处理句柄资源 curl_multi_remove_handle — 移除curl批处理句柄资源中的某个句柄资源 curl_multi_select — Get all the sockets associated with the cURL extension, which can then be “selected” curl_setopt_array — 以数组的形式为一个curl设置会话参数 curl_setopt — 为一个curl设置会话参数 curl_version — 获取curl相关的版本信息 curl_init()函数的作用初始化一个curl会话，curl_init()函数唯一的一个参数是可选的，表示一个url地址。 curl_exec()函数的作用是执行一个curl会话，唯一的参数是curl_init()函数返回的句柄。 curl_close()函数的作用是关闭一个curl会话，唯一的参数是curl_init()函数返回的句柄。 $ch = curl_init(“http://www.baidu.com/&quot;); curl_exec($ch); curl_close($ch); curl_version()函数的作用是获取curl相关的版本信息，curl_version()函数有一个参数，不清楚是做什么的 print_r(curl_version()) curl_getinfo()函数的作用是获取一个curl连接资源句柄的信息，curl_getinfo()函数有两个参数，第一个参数是curl的资源句柄，第二个参数是下面一些常量： $ch = curl_init(“http://www.baidu.com/&quot;); print_r(curl_getinfo($ch)); 可选的常量包括： CURLINFO_EFFECTIVE_URL 最后一个有效的url地址 CURLINFO_HTTP_CODE 最后一个收到的HTTP代码 CURLINFO_FILETIME 远程获取文档的时间，如果无法获取，则返回值为“-1” CURLINFO_TOTAL_TIME 最后一次传输所消耗的时间 CURLINFO_NAMELOOKUP_TIME 名称解析所消耗的时间 CURLINFO_CONNECT_TIME 建立连接所消耗的时间 CURLINFO_PRETRANSFER_TIME 从建立连接到准备传输所使用的时间 CURLINFO_STARTTRANSFER_TIME 从建立连接到传输开始所使用的时间 CURLINFO_REDIRECT_TIME 在事务传输开始前重定向所使用的时间 CURLINFO_SIZE_UPLOAD 上传数据量的总值 CURLINFO_SIZE_DOWNLOAD下载数据量的总值 CURLINFO_SPEED_DOWNLOAD平均下载速度 CURLINFO_SPEED_UPLOAD平均上传速度 CURLINFO_HEADER_SIZE header部分的大小 CURLINFO_HEADER_OUT发送请求的字符串 CURLINFO_REQUEST_SIZE在HTTP请求中有问题的请求的大小 CURLINFO_SSL_VERIFYRESULT Result of SSL certification verification requested by setting CURLOPT_SSL_VERIFYPEER CURLINFO_CONTENT_LENGTH_DOWNLOAD 从Content-Length: field中读取的下载内容长度 CURLINFO_CONTENT_LENGTH_UPLOAD上传内容大小的说明 CURLINFO_CONTENT_TYPE 下载内容的“Content-type”值，NULL表示服务器没有发送有效的“Content-Type: header” curl_setopt()函数的作用是为一个curl设置会话参数。curl_setopt_array()函数的作用是以数组的形式为一个curl设置会话参数。 $ch = curl_init(); $fp = fopen(“example_homepage.txt”, “w”); curl_setopt($ch, CURLOPT_FILE, $fp); $options = array( CURLOPT_URL =&gt; ‘http://www.baidu.com/’, CURLOPT_HEADER =&gt; false ); curl_setopt_array($ch, $options); curl_exec($ch); curl_close($ch); fclose($fp); 可设置的参数有： CURLOPT_AUTOREFERER 自动设置header中的referer信息 CURLOPT_BINARYTRANSFER 在启用CURLOPT_RETURNTRANSFER时候将获取数据返回 CURLOPT_COOKIESESSION 启用时curl会仅仅传递一个session cookie，忽略其他的cookie，默认状况下curl会将所有的cookie返回给服务端。session cookie是指那些用来判断服务器端的session是否有效而存在的cookie。 CURLOPT_CRLF 启用时将Unix的换行符转换成回车换行符。 CURLOPT_DNS_USE_GLOBAL_CACHE 启用时会启用一个全局的DNS缓存，此项为线程安全的，并且默认为true。 CURLOPT_FAILONERROR 显示HTTP状态码，默认行为是忽略编号小于等于400的HTTP信息 CURLOPT_FILETIME 启用时会尝试修改远程文档中的信息。结果信息会通过curl_getinfo()函数的CURLINFO_FILETIME选项返回。 CURLOPT_FOLLOWLOCATION（无法curl获取数据时，试试这个参数，参数值设为true；） 启用时会将服务器服务器返回的“Location:”放在header中递归的返回给服务器，使用CURLOPT_MAXREDIRS可以限定递归返回的数量。 CURLOPT_FORBID_REUSE 在完成交互以后强迫断开连接，不能重用。 CURLOPT_FRESH_CONNECT 强制获取一个新的连接，替代缓存中的连接。 CURLOPT_FTP_USE_EPRT TRUE to use EPRT (and LPRT) when doing active FTP downloads. Use FALSE to disable EPRT and LPRT and use PORT only. Added in PHP 5.0.0. CURLOPT_FTP_USE_EPSV TRUE to first try an EPSV command for FTP transfers before reverting back to PASV. Set to FALSE to disable EPSV. CURLOPT_FTPAPPEND TRUE to append to the remote file instead of overwriting it. CURLOPT_FTPASCII An alias of CURLOPT_TRANSFERTEXT. Use that instead. CURLOPT_FTPLISTONLY TRUE to only list the names of an FTP directory. CURLOPT_HEADER 启用时会将头文件的信息作为数据流输出。 CURLOPT_HTTPGET 启用时会设置HTTP的method为GET，因为GET是默认是，所以只在被修改的情况下使用。 CURLOPT_HTTPPROXYTUNNEL 启用时会通过HTTP代理来传输。 CURLOPT_MUTE 讲curl函数中所有修改过的参数恢复默认值。 CURLOPT_NETRC 在连接建立以后，访问/.netrc文件获取用户名和密码信息连接远程站点。 CURLOPT_NOBODY 启用时将不对HTML中的body部分进行输出。 CURLOPT_NOPROGRESS 启用时关闭curl传输的进度条，此项的默认设置为true CURLOPT_NOSIGNAL 启用时忽略所有的curl传递给php进行的信号。在SAPI多线程传输时此项被默认打开。 CURLOPT_POST 启用时会发送一个常规的POST请求，类型为：application/x-www-form-urlencoded，就像表单提交的一样。 CURLOPT_PUT 启用时允许HTTP发送文件，必须同时设置CURLOPT_INFILE和CURLOPT_INFILESIZE CURLOPT_RETURNTRANSFER 讲curl_exec()获取的信息以文件流的形式返回，而不是直接输出。 CURLOPT_SSL_VERIFYPEER FALSE to stop cURL from verifying the peer’s certificate. Alternate certificates to verify against can be specified with the CURLOPT_CAINFO option or a certificate directory can be specified with the CURLOPT_CAPATH option. CURLOPT_SSL_VERIFYHOST may also need to be TRUE or FALSE if CURLOPT_SSL_VERIFYPEER is disabled (it defaults to 2). TRUE by default as of cURL 7.10. Default bundle installed as of cURL 7.10. CURLOPT_TRANSFERTEXT TRUE to use ASCII mode for FTP transfers. For LDAP, it retrieves data in plain text instead of HTML. On Windows systems, it will not set STDOUT to binary mode. CURLOPT_UNRESTRICTED_AUTH 在使用CURLOPT_FOLLOWLOCATION产生的header中的多个locations中持续追加用户名和密码信息，即使域名已发生改变。 CURLOPT_UPLOAD 启用时允许文件传输 CURLOPT_VERBOSE 启用时会汇报所有的信息，存放在STDERR或指定的CURLOPT_STDERR中 CURLOPT_BUFFERSIZE 每次获取的数据中读入缓存的大小，这个值每次都会被填满。 CURLOPT_CLOSEPOLICY 不是CURLCLOSEPOLICY_LEAST_RECENTLY_USED就是CURLCLOSEPOLICY_OLDEST，还存在另外三个，但是curl暂时还不支持。. CURLOPT_CONNECTTIMEOUT 在发起连接前等待的时间，如果设置为0，则不等待。 CURLOPT_DNS_CACHE_TIMEOUT 设置在内存中保存DNS信息的时间，默认为120秒。 CURLOPT_FTPSSLAUTH The FTP authentication method (when is activated): CURLFTPAUTH_SSL (try SSL first), CURLFTPAUTH_TLS (try TLS first), or CURLFTPAUTH_DEFAULT (let cURL decide). CURLOPT_HTTP_VERSION 设置curl使用的HTTP协议，CURL_HTTP_VERSION_NONE（让curl自己判断），CURL_HTTP_VERSION_1_0（HTTP/1.0），CURL_HTTP_VERSION_1_1（HTTP/1.1） CURLOPT_HTTPAUTH 使用的HTTP验证方法，可选的值 有：CURLAUTH_BASIC，CURLAUTH_DIGEST，CURLAUTH_GSSNEGOTIATE，CURLAUTH_NTLM，CURLAUTH_ANY，CURLAUTH_ANYSAFE， 可以使用“|”操作符分隔多个值，curl让服务器选择一个支持最好的值，CURLAUTH_ANY等价于CURLAUTH_BASIC | CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM，CURLAUTH_ANYSAFE等价于CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM CURLOPT_INFILESIZE 设定上传文件的大小 CURLOPT_LOW_SPEED_LIMIT 当传输速度小于CURLOPT_LOW_SPEED_LIMIT时，PHP会根据CURLOPT_LOW_SPEED_TIME来判断是否因太慢而取消传输。 CURLOPT_LOW_SPEED_TIME The number of seconds the transfer should be below CURLOPT_LOW_SPEED_LIMIT for PHP to consider the transfer too slow and abort. 当传输速度小于CURLOPT_LOW_SPEED_LIMIT时，PHP会根据CURLOPT_LOW_SPEED_TIME来判断是否因太慢而取消传输。 CURLOPT_MAXCONNECTS 允许的最大连接数量，超过是会通过CURLOPT_CLOSEPOLICY决定应该停止哪些连接 CURLOPT_MAXREDIRS 指定最多的HTTP重定向的数量，这个选项是和CURLOPT_FOLLOWLOCATION一起使用的。 CURLOPT_PORT 一个可选的用来指定连接端口的量 CURLOPT_PROXYAUTH The HTTP authentication method(s) to use for the proxy connection. Use the same bitmasks as described in CURLOPT_HTTPAUTH. For proxy authentication, only CURLAUTH_BASIC and CURLAUTH_NTLM are currently supported. CURLOPT_PROXYPORT The port number of the proxy to connect to. This port number can also be set in CURLOPT_PROXY. CURLOPT_PROXYTYPE Either CURLPROXY_HTTP (default) or CURLPROXY_SOCKS5. CURLOPT_RESUME_FROM 在恢复传输时传递一个字节偏移量（用来断点续传） CURLOPT_SSL_VERIFYHOST 1 to check the existence of a common name in the SSL peer certificate. 2 to check the existence of a common name and also verify that it matches the hostname provided. CURLOPT_SSLVERSION The SSL version (2 or 3) to use. By default PHP will try to determine this itself, although in some cases this must be set manually. CURLOPT_TIMECONDITION 如果在CURLOPT_TIMEVALUE指定的某个时间以后被编辑过，则使用CURL_TIMECOND_IFMODSINCE返回页面，如果没有被修 改过，并且CURLOPT_HEADER为true，则返回一个”304 Not Modified”的header，CURLOPT_HEADER为false，则使用CURL_TIMECOND_ISUNMODSINCE，默认值为 CURL_TIMECOND_IFMODSINCE CURLOPT_TIMEOUT 设置curl允许执行的最长秒数 CURLOPT_TIMEVALUE 设置一个CURLOPT_TIMECONDITION使用的时间戳，在默认状态下使用的是CURL_TIMECOND_IFMODSINCE CURLOPT_CAINFO The name of a file holding one or more certificates to verify the peer with. This only makes sense when used in combination with CURLOPT_SSL_VERIFYPEER. CURLOPT_CAPATH A directory that holds multiple CA certificates. Use this option alongside CURLOPT_SSL_VERIFYPEER. CURLOPT_COOKIE 设定HTTP请求中“Set-Cookie:”部分的内容。 CURLOPT_COOKIEFILE 包含cookie信息的文件名称，这个cookie文件可以是Netscape格式或者HTTP风格的header信息。 CURLOPT_COOKIEJAR 连接关闭以后，存放cookie信息的文件名称 CURLOPT_CUSTOMREQUEST A custom request method to use instead of “GET” or “HEAD” when doing a HTTP request. This is useful for doing “DELETE” or other, more obscure HTTP requests. Valid values are things like “GET”, “POST”, “CONNECT” and so on; i.e. Do not enter a whole HTTP request line here. For instance, entering “GET /index.html HTTP/1.0rnrn” would be incorrect. Note: Don’t do this without making sure the server supports the custom request method first. CURLOPT_EGBSOCKET Like CURLOPT_RANDOM_FILE, except a filename to an Entropy Gathering Daemon socket. CURLOPT_ENCODING header中“Accept-Encoding: ”部分的内容，支持的编码格式为：”identity”，”deflate”，”gzip”。如果设置为空字符串，则表示支持所有的编码格式 CURLOPT_FTPPORT The value which will be used to get the IP address to use for the FTP “POST” instruction. The “POST” instruction tells the remote server to connect to our specified IP address. The string may be a plain IP address, a hostname, a network interface name (under Unix), or just a plain ‘-’ to use the systems default IP address. CURLOPT_INTERFACE 在外部网络接口中使用的名称，可以是一个接口名，IP或者主机名。 CURLOPT_KRB4LEVEL KRB4(Kerberos 4)安全级别的设置，可以是一下几个值之一：”clear”，”safe”，”confidential”，”private”。默认的值 为”private”，设置为null的时候表示禁用KRB4，现在KRB4安全仅能在FTP传输中使用。 CURLOPT_POSTFIELDS 在HTTP中的“POST”操作。如果要传送一个文件，需要一个@开头的文件名 CURLOPT_PROXY 设置通过的HTTP代理服务器 CURLOPT_PROXYUSERPWD 连接到代理服务器的，格式为“[username]:[password]”的用户名和密码。 CURLOPT_RANDOM_FILE 设定存放SSL用到的随机数种子的文件名称 CURLOPT_RANGE 设置HTTP传输范围，可以用“X-Y”的形式设置一个传输区间，如果有多个HTTP传输，则使用逗号分隔多个值，形如：”X-Y,N-M”。 CURLOPT_REFERER 设置header中”Referer: ” 部分的值。 CURLOPT_SSL_CIPHER_LIST A list of ciphers to use for SSL. For example, RC4-SHA and TLSv1 are valid cipher lists. CURLOPT_SSLCERT 传递一个包含PEM格式证书的字符串。 CURLOPT_SSLCERTPASSWD 传递一个包含使用CURLOPT_SSLCERT证书必需的密码。 CURLOPT_SSLCERTTYPE The format of the certificate. Supported formats are “PEM” (default), “DER”, and “ENG”. CURLOPT_SSLENGINE The identifier for the crypto engine of the private SSL key specified in CURLOPT_SSLKEY. CURLOPT_SSLENGINE_DEFAULT The identifier for the crypto engine used for asymmetric crypto operations. CURLOPT_SSLKEY The name of a file containing a private SSL key. CURLOPT_SSLKEYPASSWD The secret password needed to use the private SSL key specified in CURLOPT_SSLKEY. Note: Since this option contains a sensitive password, remember to keep the PHP script it is contained within safe. CURLOPT_SSLKEYTYPE The key type of the private SSL key specified in CURLOPT_SSLKEY. Supported key types are “PEM” (default), “DER”, and “ENG”. CURLOPT_URL 需要获取的URL地址，也可以在PHP的curl_init()函数中设置。 CURLOPT_USERAGENT 在HTTP请求中包含一个”user-agent”头的字符串。 CURLOPT_USERPWD 传递一个连接中需要的用户名和密码，格式为：“[username]:[password]”。 CURLOPT_HTTP200ALIASES 设置不再以error的形式来处理HTTP 200的响应，格式为一个数组。 CURLOPT_HTTPHEADER 设置一个header中传输内容的数组。 CURLOPT_POSTQUOTE An array of FTP commands to execute on the server after the FTP request has been performed. CURLOPT_QUOTE An array of FTP commands to execute on the server prior to the FTP request. CURLOPT_FILE 设置输出文件的位置，值是一个资源类型，默认为STDOUT (浏览器)。 CURLOPT_INFILE 在上传文件的时候需要读取的文件地址，值是一个资源类型。 CURLOPT_STDERR 设置一个错误输出地址，值是一个资源类型，取代默认的STDERR。 CURLOPT_WRITEHEADER 设置header部分内容的写入的文件地址，值是一个资源类型。 CURLOPT_HEADERFUNCTION 设置一个回调函数，这个函数有两个参数，第一个是curl的资源句柄，第二个是输出的header数据。header数据的输出必须依赖这个函数，返回已写入的数据大小。 CURLOPT_PASSWDFUNCTION 设置一个回调函数，有三个参数，第一个是curl的资源句柄，第二个是一个密码提示符，第三个参数是密码长度允许的最大值。返回密码的值。 CURLOPT_READFUNCTION 设置一个回调函数，有两个参数，第一个是curl的资源句柄，第二个是读取到的数据。数据读取必须依赖这个函数。返回读取数据的大小，比如0或者EOF。 CURLOPT_WRITEFUNCTION 设置一个回调函数，有两个参数，第一个是curl的资源句柄，第二个是写入的数据。数据写入必须依赖这个函数。返回精确的已写入数据的大小 curl_copy_handle()函数的作用是拷贝一个curl连接资源的所有内容和参数 $ch = curl_init(“http://www.baidu.com/”); $another = curl_copy_handle($ch); curl_exec($another); curl_close($another); curl_error()函数的作用是返回一个包含当前会话错误信息的字符串。 curl_errno()函数的作用是返回一个包含当前会话错误信息的数字编号。 curl_multi_init()函数的作用是初始化一个curl批处理句柄资源。 curl_multi_add_handle()函数的作用是向curl批处理会话中添加单独的curl句柄资源。curl_multi_add_handle()函数有两个参数，第一个参数表示一个curl批处理句柄资源，第二个参数表示一个单独的curl句柄资源。 curl_multi_exec()函数的作用是解析一个curl批处理句柄，curl_multi_exec()函数有两个参数，第一个参数表示一个批处理句柄资源，第二个参数是一个引用值的参数，表示剩余需要处理的单个的curl句柄资源数量。 curl_multi_remove_handle()函数表示移除curl批处理句柄资源中的某个句柄资源，curl_multi_remove_handle()函数有两个参数，第一个参数表示一个curl批处理句柄资源，第二个参数表示一个单独的curl句柄资源。 curl_multi_close()函数的作用是关闭一个批处理句柄资源。 $ch1 = curl_init(); $ch2 = curl_init(); curl_setopt($ch1, CURLOPT_URL, “http://www.baidu.com/”); curl_setopt($ch1, CURLOPT_HEADER, 0); curl_setopt($ch2, CURLOPT_URL, “http://www.google.com/”); curl_setopt($ch2, CURLOPT_HEADER, 0); $mh = curl_multi_init(); curl_multi_add_handle($mh,$ch1); curl_multi_add_handle($mh,$ch2); do { curl_multi_exec($mh,$flag); } while ($flag &gt; 0); curl_multi_remove_handle($mh,$ch1); curl_multi_remove_handle($mh,$ch2); curl_multi_close($mh); curl_multi_getcontent()函数的作用是在设置了CURLOPT_RETURNTRANSFER的情况下，返回获取的输出的文本流。 curl_multi_info_read()函数的作用是获取当前解析的curl的相关传输信息。 curl_multi_select() Get all the sockets associated with the cURL extension, which can then be “selected” source url:http://www.hebaodans.com/2009/07/p-h-p-c-u-r-l-yong-fa/ HTTP request method PUT //a.php [php] view plaincopy bar ) echo json_encode($requestData); // Do something with data… } //curl.php [php] view plaincopy 1,’b’=&gt;2); function doPut($url, $fields) { $fields = (is_array($fields)) ? http_build_query($fields) : $fields; if($ch = curl_init($url)) { curl_setopt($ch, CURLOPT_CUSTOMREQUEST, ‘PUT’); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_HTTPHEADER, array(‘Content-Length: ‘ . strlen($fields))); curl_setopt($ch, CURLOPT_POSTFIELDS, $fields); $rs=curl_exec($ch); $status = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch); return $rs; } else { return false; } } echo doPut(‘http://127.1/a.php&#39;,$array); 若是DELETE方法，则只需把PUT改为DELETE方法即可。 php curl class: [php] view plaincopy * $c = new curl; * // enable cache * $c = new curl(array(‘cache’=&gt;true)); * // enable cookie * $c = new curl(array(‘cookie’=&gt;true)); * // enable proxy * $c = new curl(array(‘proxy’=&gt;true)); * * // HTTP GET Method * $html = $c-&gt;get(‘http://example.com&#39;); * // HTTP POST Method * $html = $c-&gt;post(‘http://example.com/&#39;, array(‘q’=&gt;’words’, ‘name’=&gt;’moodle’)); * // HTTP PUT Method * $html = $c-&gt;put(‘http://example.com/&#39;, array(‘file’=&gt;’/var/www/test.txt’); * * * @author Dongsheng Cai - https://github.com/dongsheng/cURL * @license http://www.gnu.org/copyleft/gpl.html GNU Public License / class curl { /** @var bool / public $cache = false; public $proxy = false; / @var array / public $response = array(); public $header = array(); /** @var string / public $info; public $error; / @var array / private $options; /** @var string / private $proxy_host = ‘’; private $proxy_auth = ‘’; private $proxy_type = ‘’; / @var bool / private $debug = false; private $cookie = false; /** * @param array $options */ public function __construct($options = array()){ if (!function_exists(‘curl_init’)) { $this-&gt;error = ‘cURL module must be enabled!’; trigger_error($this-&gt;error, E_USER_ERROR); return false; } // the options of curl should be init here. $this-&gt;resetopt(); if (!empty($options[‘debug’])) { $this-&gt;debug = true; } if(!empty($options[‘cookie’])) { if($options[‘cookie’] === true) { $this-&gt;cookie = ‘curl_cookie.txt’; } else { $this-&gt;cookie = $options[‘cookie’]; } } if (!empty($options[‘cache’])) { if (class_exists(‘curl_cache’)) { $this-&gt;cache = new curl_cache(); } } } /** * Resets the CURL options that have already been set */ public function resetopt(){ $this-&gt;options = array(); $this-&gt;options[‘CURLOPT_USERAGENT’] = ‘MoodleBot/1.0’; // True to include the header in the output $this-&gt;options[‘CURLOPT_HEADER’] = 0; // True to Exclude the body from the output $this-&gt;options[‘CURLOPT_NOBODY’] = 0; // TRUE to follow any “Location: “ header that the server // sends as part of the HTTP header (note this is recursive, // PHP will follow as many “Location: “ headers that it is sent, // unless CURLOPT_MAXREDIRS is set). //$this-&gt;options[‘CURLOPT_FOLLOWLOCATION’] = 1; $this-&gt;options[‘CURLOPT_MAXREDIRS’] = 10; $this-&gt;options[‘CURLOPT_ENCODING’] = ‘’; // TRUE to return the transfer as a string of the return // value of curl_exec() instead of outputting it out directly. $this-&gt;options[‘CURLOPT_RETURNTRANSFER’] = 1; $this-&gt;options[‘CURLOPT_BINARYTRANSFER’] = 0; $this-&gt;options[‘CURLOPT_SSL_VERIFYPEER’] = 0; $this-&gt;options[‘CURLOPT_SSL_VERIFYHOST’] = 2; $this-&gt;options[‘CURLOPT_CONNECTTIMEOUT’] = 30; } /** * Reset Cookie */ public function resetcookie() { if (!empty($this-&gt;cookie)) { if (is_file($this-&gt;cookie)) { $fp = fopen($this-&gt;cookie, ‘w’); if (!empty($fp)) { fwrite($fp, ‘’); fclose($fp); } } } } /** * Set curl options * * @param array $options If array is null, this function will * reset the options to default value. * */ public function setopt($options = array()) { if (is_array($options)) { foreach($options as $name =&gt; $val){ if (stripos($name, ‘CURLOPT_’) === false) { $name = strtoupper(‘CURLOPT_’.$name); } $this-&gt;options[$name] = $val; } } } /** * Reset http method * / public function cleanopt(){ unset($this-&gt;options[‘CURLOPT_HTTPGET’]); unset($this-&gt;options[‘CURLOPT_POST’]); unset($this-&gt;options[‘CURLOPT_POSTFIELDS’]); unset($this-&gt;options[‘CURLOPT_PUT’]); unset($this-&gt;options[‘CURLOPT_INFILE’]); unset($this-&gt;options[‘CURLOPT_INFILESIZE’]); unset($this-&gt;options[‘CURLOPT_CUSTOMREQUEST’]); } / * Set HTTP Request Header * * @param array $headers * / public function setHeader($header) { if (is_array($header)){ foreach ($header as $v) { $this-&gt;setHeader($v); } } else { $this-&gt;header[] = $header; } } /** * Set HTTP Response Header * / public function getResponse(){ return $this-&gt;response; } / * private callback function * Formatting HTTP Response Header * * @param mixed $ch Apparently not used * @param string $header * @return int The strlen of the header / private function formatHeader($ch, $header) { $this-&gt;count++; if (strlen($header) &gt; 2) { list($key, $value) = explode(“ “, rtrim($header, “rn”), 2); $key = rtrim($key, ‘:’); if (!empty($this-&gt;response[$key])) { if (is_array($this-&gt;response[$key])){ $this-&gt;response[$key][] = $value; } else { $tmp = $this-&gt;response[$key]; $this-&gt;response[$key] = array(); $this-&gt;response[$key][] = $tmp; $this-&gt;response[$key][] = $value; } } else { $this-&gt;response[$key] = $value; } } return strlen($header); } /** * Set options for individual curl instance * * @param object $curl A curl handle * @param array $options * @return object The curl handle */ private function apply_opt($curl, $options) { // Clean up $this-&gt;cleanopt(); // set cookie if (!empty($this-&gt;cookie) || !empty($options[‘cookie’])) { $this-&gt;setopt(array(‘cookiejar’=&gt;$this-&gt;cookie, ‘cookiefile’=&gt;$this-&gt;cookie )); } // set proxy if (!empty($this-&gt;proxy) || !empty($options[‘proxy’])) { $this-&gt;setopt($this-&gt;proxy); } $this-&gt;setopt($options); // reset before set options curl_setopt($curl, CURLOPT_HEADERFUNCTION, array(&amp;$this,’formatHeader’)); // set headers if (empty($this-&gt;header)){ $this-&gt;setHeader(array( ‘User-Agent: MoodleBot/1.0’, ‘Accept-Charset: ISO-8859-1,utf-8;q=0.7,;q=0.7’, ‘Connection: keep-alive’ )); } curl_setopt($curl, CURLOPT_HTTPHEADER, $this-&gt;header); if ($this-&gt;debug){ echo ‘ Options‘; var_dump($this-&gt;options); echo ‘ Header‘; var_dump($this-&gt;header); } // set options foreach($this-&gt;options as $name =&gt; $val) { if (is_string($name)) { $name = constant(strtoupper($name)); } curl_setopt($curl, $name, $val); } return $curl; } /** * Download multiple files in parallel * * Calls {@link multi()} with specific download headers * * * $c = new curl; * $c-&gt;download(array( * array(&#39;url&#39;=&gt;&#39;http://localhost/&#39;, &#39;file&#39;=&gt;fopen(&#39;a&#39;, &#39;wb&#39;)), * array(&#39;url&#39;=&gt;&#39;http://localhost/20/&#39;, &#39;file&#39;=&gt;fopen(&#39;b&#39;, &#39;wb&#39;)) * )); * * * @param array $requests An array of files to request * @param array $options An array of options to set * @return array An array of results / public function download($requests, $options = array()) { $options[‘CURLOPT_BINARYTRANSFER’] = 1; $options[‘RETURNTRANSFER’] = false; return $this-&gt;multi($requests, $options); } / * Mulit HTTP Requests * This function could run multi-requests in parallel. * * @param array $requests An array of files to request * @param array $options An array of options to set * @return array An array of results */ protected function multi($requests, $options = array()) { $count = count($requests); $handles = array(); $results = array(); $main = curl_multi_init(); for ($i = 0; $i &lt; $count; $i++) { $url = $requests[$i]; foreach($url as $n=&gt;$v){ $options[$n] = $url[$n]; } $handles[$i] = curl_init($url[‘url’]); $this-&gt;apply_opt($handles[$i], $options); curl_multi_add_handle($main, $handles[$i]); } $running = 0; do { curl_multi_exec($main, $running); } while($running &gt; 0); for ($i = 0; $i &lt; $count; $i++) { if (!empty($options[‘CURLOPT_RETURNTRANSFER’])) { $results[] = true; } else { $results[] = curl_multi_getcontent($handles[$i]); } curl_multi_remove_handle($main, $handles[$i]); } curl_multi_close($main); return $results; } /** * Single HTTP Request * * @param string $url The URL to request * @param array $options * @return bool */ protected function request($url, $options = array()){ // create curl instance $curl = curl_init($url); $options[‘url’] = $url; $this-&gt;apply_opt($curl, $options); if ($this-&gt;cache &amp;&amp; $ret = $this-&gt;cache-&gt;get($this-&gt;options)) { return $ret; } else { $ret = curl_exec($curl); if ($this-&gt;cache) { $this-&gt;cache-&gt;set($this-&gt;options, $ret); } } $this-&gt;info = curl_getinfo($curl); $this-&gt;error = curl_error($curl); if ($this-&gt;debug){ echo ‘ Return Data‘; var_dump($ret); echo ‘ Info‘; var_dump($this-&gt;info); echo ‘ Error‘; var_dump($this-&gt;error); } curl_close($curl); if (empty($this-&gt;error)){ return $ret; } else { return $this-&gt;error; // exception is not ajax friendly //throw new moodle_exception($this-&gt;error, ‘curl’); } } /** * HTTP HEAD method * * @see request() * * @param string $url * @param array $options * @return bool / public function head($url, $options = array()){ $options[‘CURLOPT_HTTPGET’] = 0; $options[‘CURLOPT_HEADER’] = 1; $options[‘CURLOPT_NOBODY’] = 1; return $this-&gt;request($url, $options); } /** * Recursive function formating an array in POST parameter * @param array $arraydata - the array that we are going to format and add into &amp;$data array * @param string $currentdata - a row of the final postdata array at instant T * when finish, it’s assign to $data under this format: name[keyname][][]…[]=’value’ * @param array $data - the final data array containing all POST parameters : 1 row = 1 parameter */ function format_array_postdata_for_curlcall($arraydata, $currentdata, &amp;$data) { foreach ($arraydata as $k=&gt;$v) { $newcurrentdata = $currentdata; if (is_object($v)) { $v = (array) $v; } if (is_array($v)) { //the value is an array, call the function recursively $newcurrentdata = $newcurrentdata.’[‘.urlencode($k).’]‘; $this-&gt;format_array_postdata_for_curlcall($v, $newcurrentdata, $data); } else { //add the POST parameter to the $data array $data[] = $newcurrentdata.’[‘.urlencode($k).’]=’.urlencode($v); } } } /** * Transform a PHP array into POST parameter * (see the recursive function format_array_postdata_for_curlcall) * @param array $postdata * @return array containing all POST parameters (1 row = 1 POST parameter) / function format_postdata_for_curlcall($postdata) { if (is_object($postdata)) { $postdata = (array) $postdata; } $data = array(); foreach ($postdata as $k=&gt;$v) { if (is_object($v)) { $v = (array) $v; } if (is_array($v)) { $currentdata = urlencode($k); $this-&gt;format_array_postdata_for_curlcall($v, $currentdata, $data); } else { $data[] = urlencode($k).’=’.urlencode($v); } } $convertedpostdata = implode(‘&amp;’, $data); return $convertedpostdata; } / * HTTP POST method * * @param string $url * @param array|string $params * @param array $options * @return bool / public function post($url, $params = ‘’, $options = array()){ $options[‘CURLOPT_POST’] = 1; if (is_array($params)) { $params = $this-&gt;format_postdata_for_curlcall($params); } $options[‘CURLOPT_POSTFIELDS’] = $params; return $this-&gt;request($url, $options); } /** * HTTP GET method * * @param string $url * @param array $params * @param array $options * @return bool / public function get($url, $params = array(), $options = array()){ $options[‘CURLOPT_HTTPGET’] = 1; if (!empty($params)){ $url .= (stripos($url, ‘?’) !== false) ? ‘&amp;’ : ‘?’; $url .= http_build_query($params, ‘’, ‘&amp;’); } return $this-&gt;request($url, $options); } / * HTTP PUT method * * @param string $url * @param array $params * @param array $options * @return bool / public function put($url, $params = array(), $options = array()){ $file = $params[‘file’]; if (!is_file($file)){ return null; } $fp = fopen($file, ‘r’); $size = filesize($file); $options[‘CURLOPT_PUT’] = 1; $options[‘CURLOPT_INFILESIZE’] = $size; $options[‘CURLOPT_INFILE’] = $fp; if (!isset($this-&gt;options[‘CURLOPT_USERPWD’])){ $this-&gt;setopt(array(‘CURLOPT_USERPWD’=&gt;’anonymous: &#x6e;&#111;&#114;&#x65;&#112;&#108;&#121;&#x40;&#109;&#x6f;&#x6f;&#x64;&#108;&#101;&#x2e;&#x6f;&#x72;&#x67;‘)); } $ret = $this-&gt;request($url, $options); fclose($fp); return $ret; } /** * HTTP DELETE method * * @param string $url * @param array $params * @param array $options * @return bool / public function delete($url, $param = array(), $options = array()){ $options[‘CURLOPT_CUSTOMREQUEST’] = ‘DELETE’; if (!isset($options[‘CURLOPT_USERPWD’])) { $options[‘CURLOPT_USERPWD’] = ‘anonymous: &#110;&#x6f;&#x72;&#x65;&#x70;&#108;&#121;&#64;&#x6d;&#x6f;&#x6f;&#100;&#x6c;&#101;&#x2e;&#x6f;&#x72;&#x67;‘; } $ret = $this-&gt;request($url, $options); return $ret; } / * HTTP TRACE method * * @param string $url * @param array $options * @return bool / public function trace($url, $options = array()){ $options[‘CURLOPT_CUSTOMREQUEST’] = ‘TRACE’; $ret = $this-&gt;request($url, $options); return $ret; } /** * HTTP OPTIONS method * * @param string $url * @param array $options * @return bool */ public function options($url, $options = array()){ $options[‘CURLOPT_CUSTOMREQUEST’] = ‘OPTIONS’; $ret = $this-&gt;request($url, $options); return $ret; } public function get_info() { return $this-&gt;info; } } /** * This class is used by cURL class, use case: * * * * $c = new curl(array(&#39;cache&#39;=&gt;true), &#39;module_cache&#39;=&gt;&#39;repository&#39;); * $ret = $c-&gt;get(&#39;http://www.google.com&#39;); * * \\ @package core * @subpackage file * @copyright 1999 onwards Martin Dougiamas {@link http://moodle.com} * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later / class curl_cache { /** @var string / public $dir = ‘’; / * * @param string @module which module is using curl_cache * / function __construct() { $this-&gt;dir = ‘/tmp/‘; if (!file_exists($this-&gt;dir)) { mkdir($this-&gt;dir, 0700, true); } $this-&gt;ttl = 1200; } /** * Get cached value * * @param mixed $param * @return bool|string / public function get($param){ $this-&gt;cleanup($this-&gt;ttl); $filename = ‘u_’.md5(serialize($param)); if(file_exists($this-&gt;dir.$filename)) { $lasttime = filemtime($this-&gt;dir.$filename); if(time()-$lasttime &gt; $this-&gt;ttl) { return false; } else { $fp = fopen($this-&gt;dir.$filename, ‘r’); $size = filesize($this-&gt;dir.$filename); $content = fread($fp, $size); return unserialize($content); } } return false; } / * Set cache value * * @param mixed $param * @param mixed $val */ public function set($param, $val){ $filename = ‘u_‘.md5(serialize($param)); $fp = fopen($this-&gt;dir.$filename, ‘w’); fwrite($fp, serialize($val)); fclose($fp); } /** * Remove cache files * * @param int $expire The number os seconds before expiry */ public function cleanup($expire){ if($dir = opendir($this-&gt;dir)){ while (false !== ($file = readdir($dir))) { if(!is_dir($file) &amp;&amp; $file != ‘.’ &amp;&amp; $file != ‘..’) { $lasttime = @filemtime($this-&gt;dir.$file); if(time() - $lasttime &gt; $expire){ @unlink($this-&gt;dir.$file); } } } } } /** * delete current user’s cache file * */ public function refresh(){ if($dir = opendir($this-&gt;dir)){ while (false !== ($file = readdir($dir))) { if(!is_dir($file) &amp;&amp; $file != ‘.’ &amp;&amp; $file != ‘..’) { if(strpos($file, ‘u_’)!==false){ @unlink($this-&gt;dir.$file); } } } } } } CURL是一个超强的命令行工具，其功能非常强大，有Linux/Unix版本的，也有Windows版本的，我平时就经常在Windows下面使用curl做一些测试，非常方便，有时用curl做测试比用浏览器做测试要快得多，方便得多。 1.curl命令帮助选项 C:&gt;curl –help Usage: curl [options…] Options: (H) means HTTP/HTTPS only, (F) means FTP only -a/–append Append to target file when uploading (F) -A/–user-agent User-Agent to send to server (H) –anyauth Tell curl to choose authentication method (H) -b/–cookie Cookie string or file to read cookies from (H) –basic Enable HTTP Basic Authentication (H) -B/–use-ascii Use ASCII/text transfer -c/–cookie-jar Write cookies to this file after operation (H) -C/–continue-at Resumed transfer offset -d/–data HTTP POST data (H) –data-ascii HTTP POST ASCII data (H) –data-binary HTTP POST binary data (H) –negotiate Enable HTTP Negotiate Authentication (H) –digest Enable HTTP Digest Authentication (H) –disable-eprt Prevent curl from using EPRT or LPRT (F) –disable-epsv Prevent curl from using EPSV (F) -D/–dump-header Write the headers to this file –egd-file EGD socket path for random data (SSL) –tcp-nodelay Set the TCP_NODELAY option -e/–referer Referer URL (H) -E/–cert Client certificate file and password (SSL) –cert-type Certificate file type (DER/PEM/ENG) (SSL) –key Private key file name (SSL) –key-type Private key file type (DER/PEM/ENG) (SSL) –pass Pass phrase for the private key (SSL) –engine Crypto engine to use (SSL). “–engine list” for list –cacert CA certificate to verify peer against (SSL) –capath CA directory (made using c_rehash) to verify peer against (SSL) –ciphers SSL ciphers to use (SSL) –compressed Request compressed response (using deflate or gzip) –connect-timeout Maximum time allowed for connection –create-dirs Create necessary local directory hierarchy –crlf Convert LF to CRLF in upload -f/–fail Fail silently (no output at all) on errors (H) –ftp-create-dirs Create the remote dirs if not present (F) –ftp-pasv Use PASV instead of PORT (F) –ftp-ssl Enable SSL/TLS for the ftp transfer (F) -F/–form Specify HTTP multipart POST data (H) –form-string Specify HTTP multipart POST data (H) -g/–globoff Disable URL sequences and ranges using {} and [] -G/–get Send the -d data with a HTTP GET (H) -h/–help This help text -H/–header Custom header to pass to server (H) -i/–include Include protocol headers in the output (H/F) -I/–head Show document info only -j/–junk-session-cookies Ignore session cookies read from file (H) –interface Specify network interface to use –krb4 Enable krb4 with specified security level (F) -k/–insecure Allow curl to connect to SSL sites without certs (H) -K/–config Specify which config file to read -l/–list-only List only names of an FTP directory (F) –limit-rate Limit transfer speed to this rate -L/–location Follow Location: hints (H) –location-trusted Follow Location: and send authentication even to other hostnames (H) -m/–max-time Maximum time allowed for the transfer –max-redirs Maximum number of redirects allowed (H) –max-filesize Maximum file size to download (H/F) -M/–manual Display the full manual -n/–netrc Must read .netrc for user name and password –netrc-optional Use either .netrc or URL; overrides -n –ntlm Enable HTTP NTLM authentication (H) -N/–no-buffer Disable buffering of the output stream -o/–output Write output to instead of stdout -O/–remote-name Write output to a file named as the remote file -p/–proxytunnel Operate through a HTTP proxy tunnel (using CONNECT) –proxy-anyauth Let curl pick proxy authentication method (H) –proxy-basic Enable Basic authentication on the proxy (H) –proxy-digest Enable Digest authentication on the proxy (H) –proxy-ntlm Enable NTLM authentication on the proxy (H) -P/–ftp-port Use PORT with address instead of PASV (F) -q If used as the first parameter disables .curlrc -Q/–quote Send command(s) to server before file transfer (F) -r/–range Retrieve a byte range from a HTTP/1.1 or FTP server –random-file File for reading random data from (SSL) -R/–remote-time Set the remote file’s time on the local output –retry Retry request times if transient problems occur –retry-delay When retrying, wait this many seconds between each –retry-max-time Retry only within this period -s/–silent Silent mode. Don’t output anything -S/–show-error Show error. With -s, make curl show errors when they occur –socks Use SOCKS5 proxy on given host + port –stderr Where to redirect stderr. - means stdout -t/–telnet-option Set telnet option –trace Write a debug trace to the given file –trace-ascii Like –trace but without the hex output -T/–upload-file Transfer to remote site –url Spet URL to work with -u/–user Set server user and password -U/–proxy-user Set proxy user and password -v/–verbose Make the operation more talkative -V/–version Show version number and quit -w/–write-out [format] What to output after completion -x/–proxy Use HTTP proxy on given port -X/–request Specify request command to use -y/–speed-time Time needed to trig speed-limit abort. Defaults to 30 -Y/–speed-limit Stop transfer if below speed-limit for ‘speed-time’ secs -z/–time-cond Transfer based on a time condition -0/–http1.0 Use HTTP 1.0 (H) -1/–tlsv1 Use TLSv1 (SSL) -2/–sslv2 Use SSLv2 (SSL) -3/–sslv3 Use SSLv3 (SSL) –3p-quote like -Q for the source URL for 3rd party transfer (F) –3p-url source URL to activate 3rd party transfer (F) –3p-user user and password for source 3rd party transfer (F) -4/–ipv4 Resolve name to IPv4 address -6/–ipv6 Resolve name to IPv6 address -#/–progress-bar Display transfer progress as a progress bar 2.查找页面源代码中的指定内容 例如查找京东商城首页含有js的代码 C:&gt;curl www.360buy.com | find “js” % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 19 158k 19 31744 0 0 53531 0 0:00:03 –:–:– 0:00:03 65947 76 158k 76 121k 0 0 10763 0 0:00:15 0:00:11 0:00:04 7574 宿迁 99 158k 99 158k [南通](http://www.360buy.com/hel p/ziti/jiangsu.aspx#jsnt) 100 158k 100 158k 0 0 12557 0 0:00:12 0:00:12 –:–:– 18859 &lt;/scrip t&gt; document.write(unescape(“%3Cscript src=’” + gaJsHost + “google-analytics.com/ga. js’ type=’text/javascript’%3E%3C/script%3E”)); 2.发送POST请求 a.传递一个参加时可以不用双引号 C:&gt;curl -d action=get_basic_info http://localhost/1616.net/apps/contact/www/mobile.php [{“contact_id”:”3”,”last_update_time”:”1285832338”,”md5”:”7b682e0c3ed3b3bddb3219 a533477224”},{“contact_id”:”2”,”last_update_time”:”1286529929”,”md5”:”49ac542f51 19512682b72f1d44e6fe81”},{“contact_id”:”1”,”last_update_time”:”1285830870”,”md5” :”3926cb3b0320327c46430c6539d58e5e”}] b.传递多个参加时必须用双引号，否则会报错 C:&gt;curl -d “action=edit&amp;contact_id=2&amp;name=testurl” http://localhost/1616.net/apps/contact/www/mobile.php 1 3.下载文件 比如下载百度首页的内容为baidu.html C:&gt;curl -o baidu.html www.baidu.com % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 6218 100 6218 0 0 61564 0 –:–:– –:–:– –:–:– 173k 4.将网站产生的cookie内容写入到文件中 用curl -c cookie.txt www.baidu.com 产生的文件cookie.txt的内容如下： # Netscape HTTP Cookie File # http://www.netscape.com/newsref/std/cookie\\_spec.html # This file was generated by libcurl! Edit at your own risk. .baidu.com TRUE / FALSE 2147483647 BAIDUID 3EC2799E83C7187A26CBBA67CCB71822:FG=1 5.测试域名绑定 输入命令 C:&gt;curl -H “Host:www.baidu.com&quot; http://202.108.22.5/ ip地址202.108.22.5是ping域名www.baidu.com以后返回的ip地址。 则返回百度首页所有的内容 如果随便输入一个域名www.abc.com，而ip地址不改变，则返回内容是空的，因为域名与ip地址不匹配了，这样就可以测试域名绑定是否正确了。 C:&gt;curl -H “Host:www.abc.com&quot; http://202.108.22.5/ curl: (52) Empty reply from server 查看更多http://www.blogkid.net/archives/2668.html 6.查看网站头信息 C:&gt;curl -I www.baidu.com HTTP/1.1 200 OK Date: Fri, 08 Oct 2010 15:32:06 GMT Server: BWS/1.0 Content-Length: 6218 Content-Type: text/html;charset=gb2312 Cache-Control: private Expires: Fri, 08 Oct 2010 15:32:06 GMT Set-Cookie: BAIDUID=6E8167DF4E04A22A0659BBA1BE2905E7:FG=1; expires=Fri, 08-Oct-4 0 15:32:06 GMT; path=/; domain=.baidu.com P3P: CP=” OTI DSP COR IVA OUR IND COM “ Connection: Keep-Alive 7.查看URL跳转 C:&gt;curl -L -I www.google.com HTTP/1.1 302 Found Location: http://www.google.com.hk/url?sa=p&amp;hl=zh-CN&amp;cki=PREF%3DID%3Dd0fa5e644a9 f891c:FF%3D2:LD%3Dzh-CN:NW%3D1:TM%3D1286551973:LM%3D1286551973:S%3DPQB5WhVsd17Bq 38k&amp;q=http://www.google.com.hk/&amp;ust=1286552003174649&amp;usg=AFQjCNEwGJlI-YF0TG-6BiW ILw7U2qsr5Q Cache-Control: private Content-Type: text/html; charset=UTF-8 Set-Cookie: PREF=ID=d0fa5e644a9f891c:NW=1:TM=1286551973:LM=1286551973:S=oAe_1PXO MrFd73Jy; expires=Sun, 07-Oct-2012 15:32:53 GMT; path=/; domain=.google.com Set-Cookie: NID=39=C_aIB4kMtsJnMR5kwJKF9XAhB9_sEKTp5Qe-Y6Zcu7nNVrrBmKrr-687Zhf_r -wVNniv4kbb8BRCBR52EN2HdxaL2lGCBxUlEWjkGdZctAqdjyzZbwTb2Hh05UgYMTIO; expires=Sat , 09-Apr-2011 15:32:53 GMT; path=/; domain=.google.com; HttpOnly Date: Fri, 08 Oct 2010 15:32:53 GMT Server: gws Content-Length: 458 X-XSS-Protection: 1; mode=block HTTP/1.1 302 Found Location: http://www.google.com.hk/ Cache-Control: private Content-Type: text/html; charset=UTF-8 Set-Cookie: PREF=ID=d0fa5e644a9f891c:FF=2:LD=zh-CN:NW=1:TM=1286551973:LM=1286551 973:S=PQB5WhVsd17Bq38k; expires=Sun, 07-Oct-2012 15:32:53 GMT; path=/; domain=.g oogle.com.hk Date: Fri, 08 Oct 2010 15:32:53 GMT Server: gws Content-Length: 222 X-XSS-Protection: 1; mode=block HTTP/1.1 200 OK Date: Fri, 08 Oct 2010 15:32:53 GMT Expires: -1 Cache-Control: private, max-age=0 Content-Type: text/html; charset=Big5 Set-Cookie: PREF=ID=3f9f2340941ea76f:NW=1:TM=1286551973:LM=1286551973:S=m9wrFWJe Jbk4aFK2; expires=Sun, 07-Oct-2012 15:32:53 GMT; path=/; domain=.google.com.hk Set-Cookie: NID=39=Mlebw-qjMEK1ABTu-W1YWoQ-Tk27–cOtwLLrDWhmU8y0fqwgeyNz06XBZsYG 9yNwSCO_Ryzzt7q1GUXHgrM2jijr9vmLsW9ZXT2k6pve8f-IrdMyLJok4lRImiskdLR; expires=Sat , 09-Apr-2011 15:32:53 GMT; path=/; domain=.google.com.hk; HttpOnly Server: gws X-XSS-Protection: 1; mode=block Transfer-Encoding: chunked curl: (18) transfer closed with outstanding read data remaining 延伸阅读： http://blog.chinaunix.net/u/5591/showart.php?id=1957520 http://www.blogkid.net/archives/2668.html http://www.baidu.com/s?wd=curl http://www.google.com/search?hl=en&amp;source=hp&amp;q=curl http://blog.s135.com/post/389/ ============================================== 补充知识： 可以看作命令行浏览器 1、开启gzip请求 curl -I http://www.sina.com.cn/ -H Accept-Encoding:gzip,defalte 2、监控网页的响应时间 curl -o /dev/null -s -w “time_connect: %{time_connect}ntime_starttransfer: %{time_starttransfer}ntime_total: %{time_total}n” “http://www.kklinux.com&quot; 3. 监控站点可用性 curl -o /dev/null -s -w %{http_code} “http://www.kklinux.com&quot; 4、以http1.0协议请求（默认为http1.1） curl -0 ………….. 1）读取网页 $ curl linuxidc.com”&gt;http://www.linuxidc.com 2）保存网页 $ curl http://www.linuxidc.com &gt; page.html $ curl -o page.html http://www.linuxidc.com 3）使用的proxy服务器及其端口：-x $ curl -x 123.45.67.89：1080 -o page.html http://www.linuxidc.com 4）使用cookie来记录session信息 $ curl -x 123.45.67.89：1080 -o page.html -D cookie0001.txt http://www.linuxidc.com option： -D 是把http的response里面的cookie信息存到一个特别的文件中去，这样，当页面被存到page.html的同时，cookie信息也被存到了cookie0001.txt里面了 5）那么，下一次访问的时候，如何继续使用上次留下的cookie信息呢？ 使用option来把上次的cookie信息追加到http request里面去：-b $ curl -x 123.45.67.89：1080 -o page1.html -D cookie0002.txt -b cookie0001.txt http://www.linuxidc.com 6）浏览器信息~~~~ 随意指定自己这次访问所宣称的自己的浏览器信息： -A curl -A “Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)” -x 123.45.67.89:1080 -o page.html -D cookie0001.txt http://www.yahoo.com 这样，服务器端接到访问的要求，会认为你是一个运行在Windows 2000上的IE6.0，嘿嘿嘿，其实也许你用的是苹果机呢！ 而”Mozilla/4.73 [en] (X11; U; Linux 2.2; 15 i686”则可以告诉对方你是一台PC上跑着的Linux，用的是Netscape 4.73，呵呵呵 7） 另外一个服务器端常用的限制方法，就是检查http访问的referer。比如你先访问首页，再访问里面所指定的下载页，这第二次访问的referer地址就是第一次访问成功后的页面地 址。这样，服务器端只要发现对下载页面某次访问的referer地址不 是首页的地址，就可以断定那是个盗连了~~~~~ 讨厌讨厌~~~我就是要盗连~~~~~！！ 幸好curl给我们提供了设定referer的option： -e curl -A “Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)” -x 123.45.67.89:1080 -e “mail.yahoo.com” -o page.html -D cookie0001.txt http://www.yahoo.com 这样，就可以骗对方的服务器，你是从mail.yahoo.com点击某个链接过来的了，呵呵呵 8）curl 下载文件 刚才讲过了，下载页面到一个文件里，可以使用 -o ，下载文件也是一样。 比如， curl -o 1.jpg http://cgi2.tky.3web.ne.jp/~zzh/screen1.JPG 这里教大家一个新的option： -O 大写的O，这么用： curl -O http://cgi2.tky.3web.ne.jp/~zzh/screen1.JPG 这样，就可以按照服务器上的文件名，自动存在本地了！ 再来一个更好用的。 如果screen1.JPG以外还有screen2.JPG、screen3.JPG、….、screen10.JPG需要下载，难不成还要让我们写一个script来完成这些操作？ 不干！ 在curl里面，这么写就可以了： curl -O http://cgi2.tky.3web.ne.jp/~zzh/screen\\[1-10\\].JPG 呵呵呵，厉害吧？！~~~ 9） 再来，我们继续讲解下载！ curl -O http://cgi2.tky.3web.ne.jp/~{zzh,nick}/\\[001-201\\].JPG 这样产生的下载，就是 zzh/001.JPG ~zzh/002.JPG … ~zzh/201.JPG ~nick/001.JPG ~nick/002.JPG … ~nick/201.JPG 够方便的了吧？哈哈哈 咦？高兴得太早了。 由于zzh/nick下的文件名都是001，002…，201，下载下来的文件重名，后面的把前面的文件都给覆盖掉了~~~ 没关系，我们还有更狠的！ curl -o #2_#1.jpg http://cgi2.tky.3web.ne.jp/{zzh,nick}/[001-201].JPG –这是…..自定义文件名的下载？ –对头，呵呵！ #1是变量，指的是{zzh,nick}这部分，第一次取值zzh，第二次取值nick #2代表的变量，则是第二段可变部分—[001-201]，取值从001逐一加到201 这样，自定义出来下载下来的文件名，就变成了这样： 原来： zzh/001.JPG —&gt; 下载后： 001-zzh.JPG 原来： ~nick/001.JPG —&gt; 下载后： 001-nick.JPG 这样一来，就不怕文件重名啦，呵呵 9） 继续讲下载 我们平时在windows平台上，flashget这样的工具可以帮我们分块并行下载，还可以断线续传。 curl在这些方面也不输给谁，嘿嘿 比如我们下载screen1.JPG中，突然掉线了，我们就可以这样开始续传 curl -c -O http://cgi2.tky.3wb.ne.jp/zzh/screen1.JPG 当然，你不要拿个flashget下载了一半的文件来糊弄我~~~~别的下载软件的半截文件可不一定能用哦~~~ 分块下载，我们使用这个option就可以了： -r 举例说明 比如我们有一个http://cgi2.tky.3web.ne.jp/~zzh/zhao1.mp3 要下载（赵老师的电话朗诵 :D ） 我们就可以用这样的命令： curl -r 0-10240 -o “zhao.part1” http:/cgi2.tky.3web.ne.jp/zzh/zhao1.mp3 &amp; curl -r 10241-20480 -o “zhao.part1” http:/cgi2.tky.3web.ne.jp/zzh/zhao1.mp3 &amp; curl -r 20481-40960 -o “zhao.part1” http:/cgi2.tky.3web.ne.jp/zzh/zhao1.mp3 &amp; curl -r 40961- -o “zhao.part1” http:/cgi2.tky.3web.ne.jp/zzh/zhao1.mp3 这样就可以分块下载啦。 不过你需要自己把这些破碎的文件合并起来 如果你用UNIX或苹果，用 cat zhao.part* &gt; zhao.mp3就可以 如果用的是Windows，用copy /b 来解决吧，呵呵 上面讲的都是http协议的下载，其实ftp也一样可以用。 用法嘛， curl -u name:passwd ftp://ip:port/path/file 或者大家熟悉的 curl ftp://name:passwd@ip:port/path/file 10)上传的option是 -T 比如我们向ftp传一个文件： curl -T localfile -u name:passwd ftp://upload\\_site:port/path/ 当然，向http服务器上传文件也可以 比如 curl -T localfile http://cgi2.tky.3web.ne.jp/~zzh/abc.cgi 注意，这时候，使用的协议是HTTP的PUT method 刚才说到PUT，嘿嘿，自然让老服想起来了其他几种methos还没讲呢！ GET和POST都不能忘哦。 http提交一个表单，比较常用的是POST模式和GET模式 GET模式什么option都不用，只需要把变量写在url里面就可以了 比如： curl http://www.yahoo.com/login.cgi?user=nickwolfe&amp;password=12345 而POST模式的option则是 -d 比如，curl -d “user=nickwolfe&amp;password=12345” http://www.yahoo.com/login.cgi 就相当于向这个站点发出一次登陆申请~~~~~ 到底该用GET模式还是POST模式，要看对面服务器的程序设定。 一点需要注意的是，POST模式下的文件上的文件上传，比如 这样一个HTTP表单，我们要用curl进行模拟，就该是这样的语法： curl -F upload=@localfile -F nick=go http://cgi2.tky.3web.ne.jp/~zzh/up\\_file.cgi 罗罗嗦嗦讲了这么多，其实curl还有很多很多技巧和用法 比如 https的时候使用本地证书，就可以这样 curl -E localcert.pem https://remote\\_server 再比如，你还可以用curl通过dict协议去查字典~~~~~ curl dict://dict.org/d:computer 今天为了检查所有刺猬主机上所有域名是否有备案．在使用wget不爽的情况下，找到了curl这个命令行流量器命令．发现其对post的调用还是蛮好的．特别有利于对提交信息及变 更参数进行较验．对于我想将几十万域名到miibeian.gov.cn进行验证是否有备案信息非常有用．发现这篇文章很不错，特为转贴． 我的目标： curl -d “cxfs=1&amp;ym=xieyy.cn” http://www.miibeian.gov.cn/baxx\\_cx\\_servlet 在出来的信息中进行过滤，提取备案号信息，并设置一个标识位．将域名，备案号及标识位入库 用curl命令，post提交带空格的数据 今天偶然遇到一个情况，我想用curl登入一个网页，无意间发现要post的数据里带空格。比如用户名为”abcdef”，密码为”abc def”，其中有一个空格，按照我以前的方式提交： curl -D cookie -d “username=abcdef&amp;password=abc def” http://login.xxx.com/提示登入失败。 于是查看curl手册man curl。找到： d/–data (HTTP) Sends the speci?ed data in a POST request to the HTTP server, in a way that can emulate as if a user has ?lled in a HTML form and pressed the submit button. Note that the data is sent exactly as speci?ed with no extra processing (with all newlines cut off). The data is expected to be “url-encoded”. This will cause curl to pass the data to the server using the content-type application/x-www-form-urlencoded. Compare to -F/–form. If this option is used more than once on the same command line, the data pieces speci?ed will be merged together with a separating &amp;-letter. Thus, using ’-d name=daniel -d skill=lousy’ would generate a post chunk that looks like ’name=daniel&amp;skill=lousy’. 于是改用： curl -D cookie -d “username=abcdef” -d “password=abc efg” http://login.xxx.com/这样就能成功登入了。 (责任编辑：飘飞的夜) Curl是Linux下一个很强大的http命令行工具，其功能十分强大。 1) 二话不说，先从这里开始吧！ $ curl http://www.linuxidc.com 回车之后，www.linuxidc.com 的html就稀里哗啦地显示在屏幕上了 ~ 2) 嗯，要想把读过来页面存下来，是不是要这样呢？ $ curl http://www.linuxidc.com &gt; page.html 当然可以，但不用这么麻烦的！ 用curl的内置option就好，存下http的结果，用这个option: -o $ curl -o page.html http://www.linuxidc.com 这样，你就可以看到屏幕上出现一个下载页面进度指示。等进展到100%，自然就 OK咯 3) 什么什么？！访问不到？肯定是你的proxy没有设定了。 使用curl的时候，用这个option可以指定http访问所使用的proxy服务器及其端口： -x $ curl -x 123.45.67.89:1080 -o page.html http://www.linuxidc.com 4) 访问有些网站的时候比较讨厌，他使用cookie来记录session信息。 像IE/NN这样的浏览器，当然可以轻易处理cookie信息，但我们的curl呢？….. 我们来学习这个option: -D &lt;— 这个是把http的response里面的cookie信息存到一个特别的文件中去 $ curl -x 123.45.67.89:1080 -o page.html -D cookie0001.txt http://www.linuxidc.com 这样，当页面被存到page.html的同时，cookie信息也被存到了cookie0001.txt里面了 5）那么，下一次访问的时候，如何继续使用上次留下的cookie信息呢？要知道，很多网站都是靠监视你的cookie信息，来判断你是不是不按规矩访问他们的网站的。 这次我们使用这个option来把上次的cookie信息追加到http request里面去： -b $ curl -x 123.45.67.89:1080 -o page1.html -D cookie0002.txt -b cookie0001.txt http://www.linuxidc.com 这样，我们就可以几乎模拟所有的IE操作，去访问网页了！ 6）稍微等等 我好像忘记什么了 ~ 对了！是浏览器信息 有些讨厌的网站总要我们使用某些特定的浏览器去访问他们，有时候更过分的是，还要使用某些特定的版本 NND，哪里有时间为了它去找这些怪异的浏览器呢！？ 好在curl给我们提供了一个有用的option，可以让我们随意指定自己这次访问所宣称的自己的浏览器信息： -A $ curl -A “Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)” -x 123.45.67.89:1080 -o page.html -D cookie0001.txt http://www.linuxidc.com 这样，服务器端接到访问的要求，会认为你是一个运行在Windows 2000上的 IE6.0，嘿嘿嘿，其实也许你用的是苹果机呢！ 而”Mozilla/4.73 [en] (X11; U; Linux 2.2; 15 i686”则可以告诉对方你是一台 PC上跑着的Linux，用的是Netscape 4.73，呵呵呵 7）另外一个服务器端常用的限制方法，就是检查http访问的referer。比如你先访问首页，再访问里面所指定的下载页，这第二次访问的 referer地址就是第一次访问成功后的页面地址。这样，服务器端只要发现对下载页面某次访问的referer地址不是首页的地址，就可以断定那是个盗 连了 ~ 讨厌讨厌 ~我就是要盗连 ~！！ 幸好curl给我们提供了设定referer的option： -e $ curl -A “Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)” -x 123.45.67.89:1080 -e “mail.linuxidc.com” -o page.html -D cookie0001.txt http://www.linuxidc.com 这样，就可以骗对方的服务器，你是从mail.linuxidc.com点击某个链接过来的了，呵呵呵 8）写着写着发现漏掉什么重要的东西了！——- 利用curl 下载文件 刚才讲过了，下载页面到一个文件里，可以使用 -o ，下载文件也是一样。比如， $ curl -o 1.jpg http://cgi2.tky.3web.ne.jp/zzh/screen1.JPG 这里教大家一个新的option： -O 大写的O，这么用： $ curl -O http://cgi2.tky.3web.ne.jp/~zzh/screen1.JPG 这样，就可以按照服务器上的文件名，自动存在本地了！ 再来一个更好用的。 如果screen1.JPG以外还有screen2.JPG、screen3.JPG、….、screen10.JPG需要下载，难不成还要让我们写一个script来完成这些操作？ 不干！ 在curl里面，这么写就可以了： $ curl -O http://cgi2.tky.3web.ne.jp/~zzh/screen\\[1-10\\].JPG 呵呵呵，厉害吧？！ ~ 9）再来，我们继续讲解下载！ $ curl -O http://cgi2.tky.3web.ne.jp/~{zzh,nick}/\\[001-201\\].JPG 这样产生的下载，就是 zzh/001.JPG ~zzh/002.JPG … ~zzh/201.JPG ~nick/001.JPG ~nick/002.JPG … ~nick/201.JPG 够方便的了吧？哈哈哈 咦？高兴得太早了。 由于zzh/nick下的文件名都是001，002…，201，下载下来的文件重名，后面的把前面的文件都给覆盖掉了 ~ 没关系，我们还有更狠的！ $ curl -o #2_#1.jpg http://cgi2.tky.3web.ne.jp/{zzh,nick}/[001-201].JPG —这是…..自定义文件名的下载？ —对头，呵呵！ 这样，自定义出来下载下来的文件名，就变成了这样：原来： ~zzh/001.JPG —-&gt; 下载后： 001-zzh.JPG 原来： ~nick/001.JPG —-&gt; 下载后： 001-nick.JPG 这样一来，就不怕文件重名啦，呵呵 ======================== function vpost($url, $data) { // 模拟提交数据函数 $curl = curl_init(); // 启动一个CURL会话 curl_setopt($curl, CURLOPT_URL, $url); // 要访问的地址 //curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0); // 对认证证书来源的检查 //curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 1); // 从证书中检查SSL加密算法是否存在 //curl_setopt($curl, CURLOPT_USERAGENT, $_SERVER[‘HTTP_USER_AGENT’]); // 模拟用户使用的浏览器 //curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1); // 使用自动跳转 //curl_setopt($curl, CURLOPT_AUTOREFERER, 1); // 自动设置Referer curl_setopt($curl, CURLOPT_POST, 1); // 发送一个常规的Post请求 curl_setopt($curl, CURLOPT_POSTFIELDS, $data); // Post提交的数据包 //curl_setopt($curl, CURLOPT_COOKIEFILE, $GLOBALS[‘cookie_file’]); // 读取上面所储存的Cookie信息 //curl_setopt($curl, CURLOPT_TIMEOUT, 30); // 设置超时限制防止死循环 //curl_setopt($curl, CURLOPT_HEADER, 0); // 显示返回的Header区域内容 //curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1); // 获取的信息以文件流的形式返回 $tmpInfo = curl_exec($curl); // 执行操作 if (curl_errno($curl)) { echo ‘Errno’ . curl_error($curl); } curl_close($curl); // 关键CURL会话 return $tmpInfo; // 返回数据 } //method=%E6%9F%A5%E8%AF%A2&amp;jc=%E7%B2%A4&amp;hphm=ahx843&amp;hpzl=02&amp;lxdh=8681&amp;randcode2=9898 $url = “http://www@@@@@gdgajj@@@@@gov@@@@@cn/cx/wzss/wzss.do&quot;; $fields_string = array ( “method” =&gt; “%E6%9F%A5%E8%AF%A2”, “jc” =&gt; “%E7%B2%A4”, “hphm” =&gt; “ahx843”, “hpzl”=&gt;”02”, “lxdh”=&gt;”8681”, “randcode2”=&gt;”9898” );//应该改为”name=zhangsan&amp;action=234234&amp;age=20” echo $table = vpost($url, $fields_string);","tags":[{"name":"PHP","slug":"PHP","permalink":"http://www.jiliuke.com/tags/PHP/"},{"name":"curl","slug":"curl","permalink":"http://www.jiliuke.com/tags/curl/"}]},{"title":"完美解决failed to open stream: HTTP request failed!","date":"2014-04-14T01:20:51.000Z","path":"2014/04/14/e5-ae-8c-e7-be-8e-e8-a7-a3-e5-86-b3failed-to-open-stream-http-request-failed/","text":"当使用php5自带的file_get_contents方法来获取远程文件的时候，有时候会出现file_get_contents(): failed to open stream: HTTP request failed!这个警告信息。 google或者baidu一下，好多这样的问题，解决的方法都是修改php.ini，把allow_url_fopen给启用，改成 allow_url_fopen = On 这样做可以解决某些人的问题，有人说在php.ini中，有这样两个选项:allow_url_fopen =on(表示可以通过url打开远程文件)，user_agent=”PHP”（表示通过哪种脚本访问网络，默认前面有个 “ ; “ 去掉即可。）重启服务器。 但是有些还是会有这个警告信息，想用完美的解决还差一步，还得设置php.ini里面的user_agent，php默认的user_agent是PHP，我们把它改成Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)来模拟浏览器就可以了 user_agent=”Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)” 在工作中遇到这个问题，后完美解决，故分享给大家。 我批量抓取chemblink的结构式发现循环后有部分图片无法显示，而远程文件是存在的。 抓取远程文件的时候出现类似Warning: readfile(http://www.php100.com/logo.gif) [function.readfile]: failed to open stream: HTTP request failed! 这样的警告信息，我使用的是 ob_start(); readfile(“http://www.php100.com/logo.gif&quot;); $img = ob_get_contents(); ob_end_clean(); 这样在运行中会时不时的出现上述错误，我也换过file_get_contents等其他函数都没用用，在网上查阅后发现用CURL方法抓取不会出错 $url = “http://www.php100.com/logo.gif&quot;; $ch = curl_init(); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT,10); $img = curl_exec($ch);","tags":[]},{"title":"php安全配置","date":"2014-04-14T01:19:58.000Z","path":"2014/04/14/php-e5-ae-89-e5-85-a8-e9-85-8d-e7-bd-ae/","text":"1.隐藏版本信息 php.ini expose_php On 改成 expose_php Off","tags":[]},{"title":"CentOS6.2samba服务器搭建","date":"2014-04-09T01:46:39.000Z","path":"2014/04/09/centos6-2samba-e6-9c-8d-e5-8a-a1-e5-99-a8-e6-90-ad-e5-bb-ba/","text":"匿名访问 1. yum -y install samba samba-common 2. cd /etc/samba vim smb.conf # 1). 先设定好服务器整体环境方面的参数 [global] # 与主机名有关的设定信息 workgroup = vbirdhouse netbios name = vbirdserver server string = This is vbird’s samba server # 与语系方面有关的设定项目喔，为何如此设定请参考前面的说明 unix charset = utf8 display charset = utf8 dos charset = cp950 # 与登录文件有关的设定项目，注意变量 (%m) log file = /var/log/samba/log.%m max log size = 50 # 这里才是与密码有关的设定项目哩！ security = share # 修改一下打印机的加载方式，不要加载啦！ load printers = no # 2). 分享的资源设定方面：主要得将旧的批注，新的加入！ # 先取消 [homes], [printers] 的项目，然后针对 /tmp 的设定，可浏览且可写入喔 [temp] &lt;==分享资源名称 comment = Temporary file space &lt;==简单的解释此资源 path = /tmp &lt;==实际 Linux 分享的目录 writable = yes &lt;==是否可写入？在此例为是的 browseable = yes &lt;==能不能被浏览到资源名称 guest ok = yes &lt;==单纯分享时，让用户随意登入的设定值 3. service smb start service smb start","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"samba","slug":"samba","permalink":"http://www.jiliuke.com/tags/samba/"}]},{"title":"解决samba和SELINUX 冲突","date":"2014-04-08T01:28:17.000Z","path":"2014/04/08/e8-a7-a3-e5-86-b3samba-e5-92-8cselinux-e5-86-b2-e7-aa-81/","text":"在使用Samba进行建立Window与Linux共享时，要是不能访问,出现“您可能没有权限使用网络资源”， 那就是SELinux在作怪了 要是想让共享目录能访问，可以使用命令 #setenforce 0 暂时停掉SELinux 使用 #setenforce 1 启用SELinux 有关SELinux 在系统中的作用就不讲了，另外一种方法可以不用关闭SELinux.以下命令将允许这个权限： setsebool -P samba_enable_home_dirs=1 若SElinux啟用中，在Windows檔案總管無法連到 Samba 所分享出來的目錄時， 在Linux 中，可執行下列指令： setsebool -P samba_enable_home_dirs on 參考文件： /etc/samba/smb.conf #————— # SELINUX NOTES: # 分享群組 # If you want to use the useradd/groupadd family of binaries please run: # setsebool -P samba_domain_controller on # # 分享home目錄 # If you want to share home directories via samba please run: # setsebool -P samba_enable_home_dirs on # # If you create a new directory you want to share you should mark it as # “samba-share_t” so that selinux will let you write into it. # Make sure not to do that on system directories as they may already have # been marked with othe SELinux labels. # # Use ls -ldZ /path to see which context a directory has # # Set labels only on directories you created! # To set a label use the following: chcon -t samba_share_t /path # # If you need to share a system created directory you can use one of the # following (read-only/read-write): # setsebool -P samba_export_all_ro on # or # setsebool -P samba_export_all_rw on # # If you want to run scripts (preexec/root prexec/print command/…) please # put them into the /var/lib/samba/scripts directory so that smbd will be # allowed to run them. # Make sure you COPY them and not MOVE them so that the right SELinux context # is applied, to check all is ok use restorecon -R -v /var/lib/samba/scripts # #————– #","tags":[{"name":"samba","slug":"samba","permalink":"http://www.jiliuke.com/tags/samba/"},{"name":"SELINUX","slug":"SELINUX","permalink":"http://www.jiliuke.com/tags/SELINUX/"}]},{"title":"清除windows共享登录的用户名和密码","date":"2014-04-08T01:26:49.000Z","path":"2014/04/08/e6-b8-85-e9-99-a4windows-e5-85-b1-e4-ba-ab-e7-99-bb-e5-bd-95-e7-9a-84-e7-94-a8-e6-88-b7-e5-90-8d-e5-92-8c-e5-af-86-e7-a0-81/","text":"net use * /del","tags":[{"name":"samba","slug":"samba","permalink":"http://www.jiliuke.com/tags/samba/"}]},{"title":"vsftp配置","date":"2014-04-04T06:55:59.000Z","path":"2014/04/04/vsftp-e9-85-8d-e7-bd-ae/","text":"接着就是修改etc/vsftpd/vsftpd.conf里面的参数了。 anonymous_enable=YES/NO是否允许匿名访问 1、限制所有的本地用户在自家目录 chroot_local_user=YES 限制部分本地用户在自家目录 chroot_local_user=NO chroot_list_enable=YES chroot_list_file=/etc/vsftpd.chroot_list 在/etc/vsftpd.chroot_list文件中加入要限制的本地用户名。注意一个用户名一行。 有时候要限制某些IP访问服务器,只允许某些IP访问,例如只允许192.168.0.33访问这个FTP,同样修改配置文件: listen_address=192.168.0.33 端口修改：/etc/services,修改，比如改FTP21端口改2121，只要在这里修改，然后在vsftpd.conf配置文件里加一条 listet_port=2121 最主要的是防火墙里的SELinux要允许，不然是不能读取写入的 还有一种就是pasv被动传输模式，可以如下设置 pasv_enable=yes （Default: YES ） 设置是否允许pasv模式 pasv_promiscuous=no （Default: NO ） 是否屏蔽对pasv进行安全检查，（当有安全隧道时可禁用） pasv_min_port=1024（Default: 0 (use any port) ） pasv使用的最大端口 pasv_max_port=10240 （Default: 0 (use any port) ） pasv使用的最小端口 然后在添加防火墙的时候可以加一条 iptables -A INPUT -p tcp –dport 1024:10240 -j ACCEPT(表示1024-10240这些端口通过) iptables -A OUTPUT -p tcp –spotr 1024:10240 -j ACCEPT 最后，如何让vsftpd自动启动 在/etc/rc.local 文件里面添加一句 vsftpd &amp; 这样就可以开机就自动启动了！","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"vsftp","slug":"vsftp","permalink":"http://www.jiliuke.com/tags/vsftp/"}]},{"title":"Linux中搭建vsftpd不能正常访问–vsftpd防火墙设置","date":"2014-04-03T01:26:14.000Z","path":"2014/04/03/linux-e4-b8-ad-e6-90-ad-e5-bb-bavsftpd-e4-b8-8d-e8-83-bd-e6-ad-a3-e5-b8-b8-e8-ae-bf-e9-97-ae-vsftpd-e9-98-b2-e7-81-ab-e5-a2-99-e8-ae-be-e7-bd-ae/","text":"一.权限导致vsftpd不能正常访问 安装vsftpd软件后，ftp默认的家目录为/var/ftp, 就是这个/var/ftp的权限设置错误导致的，这个目录的权限是不能打开所有权限的；是您运行了chmod 777 /var/ftp所致。 如下FTP用户的家目录是不能针对所有用户、用户组、其它用户组完全开放； [root@localhost ~]# ls -ld /var/ftp drwxrwxrwx 3 root root 4096 2009-03-23 /var/ftp 修正这个错误，应该用下面的办法； [root@localhost ~]# chown root:root /var/ftp [root@localhost ~]# chmod 755 /var/ftp 二.开启LINUX服务器防火墙后，不能正常登录。 常规设置在防火墙配置文件中添加21端口，还是不能正常访问到FTP服务器。 首先要了解概念； FTP支持两种模式，一种方式叫做Standard (也就是 PORT方式，主动方式)，一种是 Passive (也就是PASV，被动方式)。 Standard模式 FTP的客户端发送 PORT 命令到FTP服务器。Passive模式FTP的客户端发送 PASV命令到 FTP Server。 PORT 和 PASV的简单区别如下： Port模式FTP 客户端首先和FTP服务器的TCP 21端口建立连接，通过这个通道发送命令，客户端需要接收数据的时候在这个通道上发送PORT命令。 PORT命令包含了客户端用什么端口接收数据。在传送数据的时候，服务器端通过自己的TCP 20端口连接至客户端的指定端口发送数据。 FTP server必须和客户端建立一个新的连接用来传送数据。 Passive模式在建立控制通道的时候和Standard模式类似，但建立连接后发送的不是Port命令，而是Pasv命令。FTP服务器收到 Pasv命令后，随机打开一个高端端口（端口号大于1024）并且通知客户端在这个端口上传送数据的请求，客户端连接FTP服务器此端口，然后FTP服务器将通过这个端口进行数据的传送，这个时候FTP server不再需要建立一个新的和客户端之间的连接。 因为IE浏览器默认使用的是Passive（被动）模式，所以要连接Linux服务器大于1024端口，而防火墙并没有开发1024以上的端口，导致登录ftp服务器被防火墙阻止。 解决方法：1.客户端设置 去掉 前面的复选框，让IE浏览器使用port（主动）模式，但是要对每个客户端进行设置比较麻烦。 2.服务器端设置(以CentOS为例) 修改vsftpd.conf配置文件让它支持Passive（被动）模式 #vim /etc/vsftpd/vsftpd.conf 在最后一行添加如下内容： pasv_min_port=3000 （设置被动模式的端口范围） pasv_max_port=3010 （设置被动模式的端口范围） 在防火墙配置文件iptables中添加端口 #vim /etc/sysconfig/iptables -A RH-Firewall-1-INPUT -m state –state NEW -m tcp -p tcp –dport 3000:3010 -j ACCEPT 重启服务使其生效 #service vsftpd rstart #service iptables restart","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"vsftp","slug":"vsftp","permalink":"http://www.jiliuke.com/tags/vsftp/"}]},{"title":"MYSQL自增主键重新排列","date":"2014-04-01T03:21:22.000Z","path":"2014/04/01/mysql-e8-87-aa-e5-a2-9e-e4-b8-bb-e9-94-ae-e9-87-8d-e6-96-b0-e6-8e-92-e5-88-97/","text":"Mysql数据库表的自增主键ID号乱了，需要重新排列。 原理：删除原有的自增ID，重新建立新的自增ID。 1，删除原有主键： ALTER TABLE `table_name` DROP `id`; 2，添加新主键字段： ALTER TABLE `table_name` ADD `id` MEDIUMINT( 8 ) NOT NULL FIRST; 3，设置新主键： ALTER TABLE `table_name` MODIFY COLUMN `id` MEDIUMINT( 8 ) NOT NULL AUTO_INCREMENT,ADD PRIMARY KEY(id);","tags":[{"name":"MYSQL","slug":"MYSQL","permalink":"http://www.jiliuke.com/tags/MYSQL/"},{"name":"主键","slug":"主键","permalink":"http://www.jiliuke.com/tags/%E4%B8%BB%E9%94%AE/"}]},{"title":"msql问题集中营","date":"2014-03-28T01:18:25.000Z","path":"2014/03/28/msql-e9-97-ae-e9-a2-98-e9-9b-86-e4-b8-ad-e8-90-a5/","text":"1、如果遇到mysqld无法启动，提示MySQL Daemon failed to start. 首先使用 #/usr/local/mysql/bin/mysqld_safe &amp; 启动mysqld_safe,再启动mysqld服务试试 2、如果一部机器中有多个数据库，先查看数据库目录，然后再停止 mysql:show variables “%datadir%” cmd:mysqladmin -u root shutdown 3、当遇到mysql locked， 方法1可以使用kill 进程号， 方法2可以使用 mysql&gt; select * from information_schema.processlist order by time ; 查看占用时间多的sql语句进行优化操作。 方法3可以更换存储引擎试试","tags":[{"name":"msql","slug":"msql","permalink":"http://www.jiliuke.com/tags/msql/"},{"name":"problem","slug":"problem","permalink":"http://www.jiliuke.com/tags/problem/"}]},{"title":"MYSQL 主从服务器配置","date":"2014-03-27T05:06:47.000Z","path":"2014/03/27/mysql-e4-b8-bb-e4-bb-8e-e6-9c-8d-e5-8a-a1-e5-99-a8-e9-85-8d-e7-bd-ae/","text":"mysql服务器的主从配置，本来是一件很简单的事情，无奈不是从零开始，总是在别人已经安装好的mysql服务器之上 ，这就会牵扯到，mysql的版本，启动文件，等一些问题。 不过没关系，先问清楚两点 1、mysql配置文件my.cnf的位置 2、如何启动、停止mysql，找好启动文件 假设有两台机器，已经安装好了mysql（尽量同版本，且两台机器同一网络，可以ping通） 有朋友说：“从服务器，不能低于主服务器的版本”，不过我是低于的，没有出现问题。 主机A: 192.168.1.100 从机B:192.168.1.101 可以有多台从机 1、先登录主机 A mysql&gt;GRANT REPLICATION SLAVE ON . TO ‘backup’@’192.168.1.101‘ IDENTIFIED BY ‘123456’; 赋予从机权限，有多台丛机，就执行多次 2、 打开主机A的my.cnf，输入 server-id = 1 #主机标示，整数 log_bin = /var/log/mysql/mysql-bin.log #确保此文件可写 read-only =0 #主机，读写都可以 binlog-do-db =test #需要备份数据，多个写多行 binlog-ignore-db=mysql #不需要备份的数据库，多个写多行 3、打开从机B的my.cnf，输入 server-id = 2 log_bin = /var/log/mysql/mysql-bin.log master-host =192.168.1.100 master-user =backup master-pass =123456 master-port =3306 master-connect-retry=60 #如果从服务器发现主服务器断掉，重新连接的时间差(秒) replicate-do-db =test #只复制某个库 replicate-ignore-db=mysql #不复制某个库 4、同步数据库 有多种方法，我说最笨的一种，先mysqldump导出主机A的数据test为 test.sql 然后在，从机B上建立数据库test，mysql导入 test.sql到test库中 5、先重启主机A的mysql，再重启从机B的mysql 6、验证 在主机A中，mysql&gt;show master statusG; 在从机B中，mysql&gt;show slave statusG; 能看到大致这些内容 File: mysql-bin.000001 Position: 1374 Binlog_Do_DB: test Binlog_Ignore_DB: mysql 可以在主机A中，做一些INSERT, UPDATE, DELETE 操作，看看主机B中，是否已经被修改 以下是一些其他朋友写的，我也做了参考 http://www.ningoo.net/html/2007/mysql\\_replication\\_configuration.html http://leftleg.hzpub.com/post/645/ http://blog.zhangjianfeng.com/article/705","tags":[{"name":"MYSQL","slug":"MYSQL","permalink":"http://www.jiliuke.com/tags/MYSQL/"},{"name":"主从配置","slug":"主从配置","permalink":"http://www.jiliuke.com/tags/%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/"}]},{"title":"转：MySQL集群安装与配置","date":"2014-03-20T05:06:57.000Z","path":"2014/03/20/e8-bd-ac-ef-bc-9amysql-e9-9b-86-e7-be-a4-e5-ae-89-e8-a3-85-e4-b8-8e-e9-85-8d-e7-bd-ae/","text":"MySQL Cluster 是 MySQL 适合于分布式计算环境的高实用、高冗余版本。它采用了NDB Cluster 存储引擎，允许在1个 Cluster 中运行多个MySQL服务器。MySQL Cluster 能够使用多种故障切换和负载平衡选项配置NDB存储引擎，但在 Cluster 级别上的存储引擎上做这个最简单。下面我们简单介绍MySQL Cluster如何安装与配置。 基本设定 管理(MGM)节点:192.168.0.111 MySQL服务器(SQL)节点:192.168.0.110 数据(NDBD)节点”A”:192.168.0.112 数据(NDBD)节点”B”:192.168.0.113 一、mysql集群安装 mysql的集群安装可以有三种方式，一是直接下载二进制使用，二是使用rpm安装，三是源码编译。我们这里使用第一种安装。 1、每个节点做相同的操作 cd /tmp wget http://cdn.mysql.com/Downloads/MySQL-Cluster-7.2/mysql-cluster-gpl-7.2.8-linux2.6-i686.tar.gz tar xzf mysql-cluster-gpl-7.2.8-linux2.6-i686.tar.gz mv mysql-cluster-gpl-7.2.8-linux2.6-i686 /usr/local/mysql 注意：这里下载的是32位的二进制包，如果你的系统是64位，需要下载64位的包。 2、存储节点和SQL节点安装 groupadd mysql useradd -g mysql mysql /usr/local/mysql/scripts/mysql_install_db –basedir=/usr/local/mysql –datadir=/usr/local/mysql/data –user=mysql chown -R root /usr/local/mysql chown -R mysql /usr/local/mysql/data chgrp -R mysql /usr/local/mysql cp /usr/local/mysql/support-files/my-medium.cnf /etc/my.cnf 二、节点配置 1、配置存储节点和SQL节点 vi /etc/my.cnf 类似于： # Options for mysqld process: [MYSQLD] ndbcluster # run NDB engine ndb-connectstring=198.168.0.111 # location of MGM node # Options for ndbd process: [MYSQL_CLUSTER] ndb-connectstring=198.168.0.111 # location of MGM node 2、配置管理节点 mkdir /var/lib/mysql-cluster cd /var/lib/mysql-cluster vi config.ini config.ini文件应类似于： # Options affecting ndbd processes on all data nodes: [NDBD DEFAULT] NoOfReplicas=2 # Number of replicas DataMemory=80M # How much memory to allocate for data storage IndexMemory=18M # How much memory to allocate for index storage # For DataMemory and IndexMemory, we have used the # default values. Since the “world” database takes up # only about 500KB, this should be more than enough for # this example Cluster setup. # TCP/IP options: [TCP DEFAULT] portnumber=2202 # This the default; however, you can use any # port that is free for all the hosts in cluster # Note: It is recommended beginning with MySQL 5.0 that # you do not specify the portnumber at all and simply allow # the default value to be used instead # Management process options: [NDB_MGMD] hostname=198.168.0.111 # Hostname or IP address of MGM node datadir=/var/lib/mysql-cluster # Directory for MGM node logfiles # Options for data node “A”: [NDBD] # (one [NDBD] section per data node) hostname=198.168.0.112 # Hostname or IP address datadir=/usr/local/mysql/data # Directory for this data node’s datafiles # Options for data node “B”: [NDBD] hostname=198.168.0.113 # Hostname or IP address datadir=/usr/local/mysql/data # Directory for this data node’s datafiles # SQL node options: [MYSQLD] hostname=198.168.0.110 # Hostname or IP address # (additional mysqld connections can be # specified for this node for various # purposes such as running ndb_restore) 三、首次启动节点 1、启动管理节点 /usr/local/mysql/bin/ndb_mgmd –configdir=/var/lib/mysql-cluster -f /var/lib/mysql-cluster/config.ini 2、启动数据节点 首次启动需要–initial参数初始化，下一次启动就不需要了。 /usr/local/mysql/bin/ndbd –initial 3、启动SQL节点 /usr/local/mysql/bin/mysqld_safe &amp; 4、检查状态 如果一切正常，执行命令 /usr/local/mysql/bin/ndb_mgm -e show应该会输出类似信息： [root@localhost mysql-cluster]# /usr/local/mysql/bin/ndb_mgm -e show Connected to Management Server at: localhost:1186 Cluster Configuration ——————— [ndbd(NDB)] 2 node(s) id=2 @192.168.0.112 (mysql-5.5.27 ndb-7.2.8, Nodegroup: 0, Master) id=3 @192.168.0.113 (mysql-5.5.27 ndb-7.2.8, Nodegroup: 0) [ndb_mgmd(MGM)] 1 node(s) id=1 @192.168.0.111 (mysql-5.5.27 ndb-7.2.8) [mysqld(API)] 1 node(s) id=4 @192.168.0.110 (mysql-5.5.27 ndb-7.2.8) 四、测试服务是否正常 在SQL节点上执行如下数据库操作： /usr/local/mysql/bin/mysql -uroot -p mysql&gt; create database clusterdb;use clusterdb; mysql&gt; create table simples (id int not null primary key) engine=ndb; mysql&gt; insert into simples values (1),(2),(3),(4); mysql&gt; select * from simples; 如果出现： +—-+ | id | +—-+ | 1 | | 2 | | 4 | | 3 | +—-+ 则表示工作正常。 五、安全关闭和重启 1、关闭mysql集群，可在管理节点在执行如下命令： /usr/local/mysql/bin/ndb_mgm -e shutdown 2、重启管理节点 /usr/local/mysql/bin/ndb_mgmd –configdir=/var/lib/mysql-cluster -f /var/lib/mysql-cluster/config.ini 3、重启数据节点 /usr/local/mysql/bin/ndbd 参考：http://dev.mysql.com/doc/refman/5.1/zh/ndbcluster.html","tags":[{"name":"MYSQL","slug":"MYSQL","permalink":"http://www.jiliuke.com/tags/MYSQL/"},{"name":"集群","slug":"集群","permalink":"http://www.jiliuke.com/tags/%E9%9B%86%E7%BE%A4/"}]},{"title":"mysql日志设置优化","date":"2014-03-19T03:07:09.000Z","path":"2014/03/19/mysql-e6-97-a5-e5-bf-97-e8-ae-be-e7-bd-ae-e4-bc-98-e5-8c-96/","text":"前言 在安装完MySQL之后，肯定是需要对MySQL的各种参数选项进行一些优化调整的。虽然MySQL系统的伸缩性很强，既可以在有很充足的硬件资源环境下高效的运行，也可以在极少资源环境下很好的运行，但不管怎样，尽可能充足的硬件资源对MySQL的性能提升总是有帮助的。在这一节我们主要分析一下MySQL的日志（主要是Binlog）对系统性能的影响，并根据日志的相关特性得出相应的优化思路。 日志产生的性能影响 由于日志的记录带来的直接性能损耗就是数据库系统中最为昂贵的IO资源。 在之前介绍MySQL物理架构的章节中，我们已经了解到了MySQL的日志包括错误日志（ErrorLog），更新日志（UpdateLog），二进制日志（Binlog），查询日志（QueryLog），慢查询日志（SlowQueryLog）等。当然，更新日志是老版本的MySQL才有的，目前已经被二进制日志替代。 在默认情况下，系统仅仅打开错误日志，关闭了其他所有日志，以达到尽可能减少IO损耗提高系统性能的目的。但是在一般稍微重要一点的实际应用场景中，都至少需要打开二进制日志，因为这是MySQL很多存储引擎进行增量备份的基础，也是MySQL实现复制的基本条件。有时候为了进一步的性能优化，定位执行较慢的SQL语句，很多系统也会打开慢查询日志来记录执行时间超过特定数值（由我们自行设置）的SQL语句。 一般情况下，在生产系统中很少有系统会打开查询日志。因为查询日志打开之后会将MySQL中执行的每一条Query都记录到日志中，会该系统带来比较大的IO负担，而带来的实际效益却并不是非常大。一般只有在开发测试环境中，为了定位某些功能具体使用了哪些SQL语句的时候，才会在短时间段内打开该日志来做相应的分析。所以，在MySQL系统中，会对性能产生影响的MySQL日志（不包括各存储引擎自己的日志）主要就是Binlog了。 Binlog 相关参数及优化策略 我们首先看看Binlog的相关参数，通过执行如下命令可以获得关于Binlog的相关参数。当然，其中也显示出了“innodb_locks_unsafe_for_binlog”这个Innodb存储引擎特有的与Binlog相关的参数： mysql&gt; show variables like ‘%binlog%’; +——————————–+————+ | Variable_name | Value | +——————————–+————+ | binlog_cache_size | 1048576 | | innodb_locks_unsafe_for_binlog | OFF | | max_binlog_cache_size| 4294967295 | | max_binlog_size| 1073741824 | | sync_binlog| 0| +——————————–+————+ “binlog_cache_size”：在事务过程中容纳二进制日志SQL语句的缓存大小。二进制日志缓存是服务器支持事务存储引擎并且服务器启用了二进制日志(—log-bin选项)的前提下为每个客户端分配的内存，注意，是每个Client都可以分配设置大小的binlogcache空间。如果读者朋友的系统中经常会出现多语句事务的华，可以尝试增加该值的大小，以获得更有的性能。当然，我们可以通过MySQL的以下两个状态变量来判断当前的binlog_cache_size的状况：Binlog_cache_use和Binlog_cache_disk_use。 “max_binlog_cache_size”：和”binlog_cache_size”相对应，但是所代表的是binlog能够使用的最大cache内存大小。当我们执行多语句事务的时候，max_binlog_cache_size如果不够大的话，系统可能会报出“Multi-statementtransactionrequiredmorethan’max_binlog_cache_size’bytesofstorage”的错误。 “max_binlog_size”：Binlog日志最大值，一般来说设置为512M或者1G，但不能超过1G。该大小并不能非常严格控制Binlog大小，尤其是当到达Binlog比较靠近尾部而又遇到一个较大事务的时候，系统为了保证事务的完整性，不可能做切换日志的动作，只能将该事务的所有SQL都记录进入当前日志，直到该事务结束。这一点和Oracle的Redo日志有点不一样，因为Oracle的Redo日志所记录的是数据文件的物理位置的变化，而且里面同时记录了Redo和Undo相关的信息，所以同一个事务是否在一个日志中对Oracle来说并不关键。而MySQL在Binlog中所记录的是数据库逻辑变化信息，MySQL称之为Event，实际上就是带来数据库变化的DML之类的Query语句。 “sync_binlog”：这个参数是对于MySQL系统来说是至关重要的，他不仅影响到Binlog对MySQL所带来的性能损耗，而且还影响到MySQL中数据的完整性。对于“sync_binlog”参数的各种设置的说明如下： sync_binlog=0，当事务提交之后，MySQL不做fsync之类的磁盘同步指令刷新binlog_cache中的信息到磁盘，而让Filesystem自行决定什么时候来做同步，或者cache满了之后才同步到磁盘。 sync_binlog=n，当每进行n次事务提交之后，MySQL将进行一次fsync之类的磁盘同步指令来将binlog_cache中的数据强制写入磁盘。 在MySQL中系统默认的设置是sync_binlog=0，也就是不做任何强制性的磁盘刷新指令，这时候的性能是最好的，但是风险也是最大的。因为一旦系统Crash，在binlog_cache中的所有binlog信息都会被丢失。而当设置为“1”的时候，是最安全但是性能损耗最大的设置。因为当设置为1的时候，即使系统Crash，也最多丢失binlog_cache中未完成的一个事务，对实际数据没有任何实质性影响。从以往经验和相关测试来看，对于高并发事务的系统来说，“sync_binlog”设置为0和设置为1的系统写入性能差距可能高达5倍甚至更多。 大家都知道，MySQL的复制（Replication），实际上就是通过将Master端的Binlog通过利用IO线程通过网络复制到Slave端，然后再通过SQL线程解析Binlog中的日志再应用到数据库中来实现的。所以，Binlog量的大小对IO线程以及Msater和Slave端之间的网络都会产生直接的影响。 MySQL中Binlog的产生量是没办法改变的，只要我们的Query改变了数据库中的数据，那么就必须将该Query所对应的Event记录到Binlog中。那我们是不是就没有办法优化复制了呢？当然不是，在MySQL复制环境中，实际上是是有8个参数可以让我们控制需要复制或者需要忽略而不进行复制的DB或者Table的，分别为： Binlog_Do_DB：设定哪些数据库（Schema）需要记录Binlog； Binlog_Ignore_DB：设定哪些数据库（Schema）不要记录Binlog； Replicate_Do_DB：设定需要复制的数据库（Schema），多个DB用逗号（“,”）分隔； Replicate_Ignore_DB：设定可以忽略的数据库（Schema）； Replicate_Do_Table：设定需要复制的Table； Replicate_Ignore_Table：设定可以忽略的Table； Replicate_Wild_Do_Table：功能同Replicate_Do_Table，但可以带通配符来进行设置； Replicate_Wild_Ignore_Table：功能同Replicate_Ignore_Table，可带通配符设置； 通过上面这八个参数，我们就可以非常方便按照实际需求，控制从Master端到Slave端的Binlog量尽可能的少，从而减小Master端到Slave端的网络流量，减少IO线程的IO量，还能减少SQL线程的解析与应用SQL的数量，最终达到改善Slave上的数据延时问题。 实际上，上面这八个参数中的前面两个是设置在Master端的，而后面六个参数则是设置在Slave端的。虽然前面两个参数和后面六个参数在功能上并没有非常直接的关系，但是对于优化MySQL的Replication来说都可以启到相似的功能。当然也有一定的区别，其主要区别如下： 如果在Master端设置前面两个参数，不仅仅会让Master端的Binlog记录所带来的IO量减少，还会让Master端的IO线程就可以减少Binlog的读取量，传递给Slave端的IO线程的Binlog量自然就会较少。这样做的好处是可以减少网络IO，减少Slave端IO线程的IO量，减少Slave端的SQL线程的工作量，从而最大幅度的优化复制性能。当然，在Master端设置也存在一定的弊端，因为MySQL的判断是否需要复制某个Event不是根据产生该Event的Query所更改的数据 所在的DB，而是根据执行Query时刻所在的默认Schema，也就是我们登录时候指定的DB或者运行“USEDATABASE”中所指定的DB。只有当前默认DB和配置中所设定的DB完全吻合的时候IO线程才会将该Event读取给Slave的IO线程。所以如果在系统中出现在默认DB和设定需要复制的DB不一样的情况下改变了需要复制的DB中某个Table的数据的时候，该Event是不会被复制到Slave中去的，这样就会造成Slave端的数据和Master的数据不一致的情况出现。同样，如果在默认Schema下更改了不需要复制的Schema中的数据，则会被复制到Slave端，当Slave端并没有该Schema的时候，则会造成复制出错而停止。 而如果是在Slave端设置后面的六个参数，在性能优化方面可能比在Master端要稍微逊色一点，因为不管是需要还是不需要复制的Event都被会被IO线程读取到Slave端，这样不仅仅增加了网络IO量，也给Slave端的IO线程增加了RelayLog的写入量。但是仍然可以减少Slave的SQL线程在Slave端的日志应用量。虽然性能方面稍有逊色，但是在Slave端设置复制过滤机制，可以保证不会出现因为默认Schema的问题而造成Slave和Master数据不一致或者复制出错的问题。 Slow Query Log 相关参数及使用建议 再来看看SlowQueryLog的相关参数配置。有些时候，我们为了定位系统中效率比较地下的Query语句，则需要打开慢查询日志，也就是SlowQueryLog。我们可以如下查看系统慢查询日志的相关设置： mysql&gt; show variables like ‘log_slow%’; +——————+——-+ | Variable_name | Value | +——————+——-+ | log_slow_queries | ON | +——————+——-+ 1 row in set (0.00 sec) mysql&gt; show variables like ‘long_query%’; +—————–+——-+ | Variable_name | Value | +—————–+——-+ | long_query_time | 1 | +—————–+——-+ 1 row in set (0.01 sec) “log_slow_queries”参数显示了系统是否已经打开SlowQueryLog功能，而“long_query_time”参数则告诉我们当前系统设置的SlowQuery记录执行时间超过多长的Query。在MySQLAB发行的MySQL版本中SlowQueryLog可以设置的最短慢查询时间为1秒，这在有些时候可能没办法完全满足我们的要求，如果希望能够进一步缩短慢查询的时间限制，可以使用Percona提供的microslow-patch（件成为mslPatch）来突破该限制。mslpatch不仅仅能将慢查询时间减小到毫秒级别，同时还能通过一些特定的规则来过滤记录的SQL，如仅记录涉及到某个表的SlowQuery等等附加功能。考虑到篇幅问题，这里就不介绍mslpatch给我们带来的更为详细的功能和使用，大家请参考官方介绍（http://www.mysqlperformanceblog.com/2008/04/20/updated-msl-microslow-patch-installation-walk-through/） 打开SlowQueryLog功能对系统性能的整体影响没有Binlog那么大，毕竟SlowQueryLog的数据量比较小，带来的IO损耗也就较小，但是，系统需要计算每一条Query的执行时间，所以消耗总是会有一些的，主要是CPU方面的消耗。如果大家的系统在CPU资源足够丰富的时候，可以不必在乎这一点点损耗，毕竟他可能会给我们带来更大性能优化的收获。但如果我们的CPU资源也比较紧张的时候，也完全可以在大部分时候关闭该功能，而只需要间断性的打开SlowQueryLog功能来定位可能存在的慢查询。 MySQL的其他日志由于使用很少（QueryLog）或者性能影响很少，我们就不在此过多分析了，至于各个存储引擎相关的日志，我们留在后面“常用存储引擎优化”部分再做相应的分析。","tags":[{"name":"myql","slug":"myql","permalink":"http://www.jiliuke.com/tags/myql/"},{"name":"优化","slug":"优化","permalink":"http://www.jiliuke.com/tags/%E4%BC%98%E5%8C%96/"},{"name":"日志","slug":"日志","permalink":"http://www.jiliuke.com/tags/%E6%97%A5%E5%BF%97/"}]},{"title":"CentOs下提示mysqld未识别错误的时候","date":"2014-03-18T01:29:32.000Z","path":"2014/03/18/centos-e4-b8-8b-e6-8f-90-e7-a4-bamysqld-e6-9c-aa-e8-af-86-e5-88-ab-e9-94-99-e8-af-af-e7-9a-84-e6-97-b6-e5-80-99/","text":"CentOs下mysqld未识别错误的时候应该是mysql-server没有安装， yum -y install mysql-server就可以了","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"mysqld","slug":"mysqld","permalink":"http://www.jiliuke.com/tags/mysqld/"}]},{"title":"CentOS系统MySQL优化详解 ","date":"2014-03-17T05:08:20.000Z","path":"2014/03/17/centos-e7-b3-bb-e7-bb-9fmysql-e4-bc-98-e5-8c-96-e8-af-a6-e8-a7-a3/","text":"CentOS系统的确很好用，但是还是很多地方需要我们进行正确的设置，进行优化的。在Apache, PHP, MySQL的体系架构中,MySQL对于性能的影响最大,也是关键的核心部分。对于Discuz!论坛程序也是如此,MySQL的设置是否合理优化,直接影响到论坛的速度和承载量!同时,MySQL也是优化难度最大的一个部分,不但需要理解一些MySQL专业知识,同时还需要长时间的观察统计并且根据经验进行判断,然后设置合理的参数。下面我们就来对CentOS系统MySQL优化进行详细解析、 下面我们了解一下MySQL优化的一些基础,MySQL的优化我分为两个部分,一是服务器物理硬件的优化;二是MySQL自身(my.cnf)的优化。 (1) 服务器硬件对MySQL性能的影响 a) 磁盘寻道能力(磁盘I/O),以目前高转速SCSI硬盘(7200转/秒)为例,这种硬盘理论上每秒寻道7200次,这是物理特性决定的,没有办法改变。 MySQL每秒钟都在进行大量、复杂的查询操作,对磁盘的读写量可想而知。所以,通常认为磁盘I/O是制约MySQL性能的最大因素之一,对于日均访问量在100万PV以上的Discuz!论坛,由于磁盘I/O的制约,MySQL的性能会非常低下!在CentOS系统中解决这一制约因素可以考虑以下几种解决方案:使用RAID-0+1磁盘阵列,注意不要尝试使用RAID-5,MySQL在RAID-5磁盘阵列上的效率不会像你期待的那样快; 抛弃传统的硬盘,使用速度更快的闪存式存储设备。经过Discuz!公司技术工程的测试,使用闪存式存储设备可比传统硬盘速度高出6-10倍左右。 b) CPU 对于MySQL应用,推荐使用S.M.P.架构的多路对称CPU,例如:可以使用两颗Intel Xeon 3.6GHz的CPU。 c) 物理内存对于一台使用MySQL的Database Server来说,服务器内存建议不要小于2GB,推荐使用4GB以上的物理内存。 (2) MySQL自身因素当解决了上述服务器硬件制约因素后,让我们看看MySQL自身的优化是如何操作的。对MySQL自身的优化主要是对其配置文件 my.cnf中的各项参数进行优化调整。下面我们介绍一些对性能影响较大的参数。 由于my.cnf文件的优化设置是与服务器硬件配置息息相关的,因而我们指定一个假想的服务器硬件环境: CPU: 2颗Intel Xeon 2.4GHz 内存: 4GB DDR 硬盘: SCSI 73GB 下面,我们根据以上硬件配置结合一份已经优化好的my.cnf进行说明:# vi /etc/my.cnf 以下只列出my.cnf文件中[mysqld]段落中的内容,其他段落内容对MySQL运行性能影响甚微,因而姑且忽略。 [mysqld] port = 3306 serverid = 1 socket = /tmp/mysql.sock skip-locking 避免MySQL的外部锁定,减少出错几率增强稳定性。 skip-name-resolve 禁止MySQL对外部连接进行DNS解析,使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意,如果开启该选项,则所有远程主机连接授权都要使用IP地址方式,否则MySQL 将无法正常处理连接请求! back_log = 384 指定MySQL可能的连接数量。当MySQL主线程在很短的时间内接收到非常多的连接请求,该参数生效,主线程花费很短的时间检查连接并且启动一个新线程。back_log 参数的值指出在MySQL暂时停止响应新请求之前的短时间内多少个请求可以被存在堆栈中。如果CentOS系统在一个短时间内有很多连接,则需要增大该参数的值,该参数值指定到来的TCP/IP连接的侦听队列的大小。不同的操作系统在这个队列大小上有它自己的限制。试图设定back_log高于你的CentOS系统的限制将是无效的。默认值为50。对于Linux系统推荐设置为小于512的整数。 key_buffer_size = 256M key_buffer_size指定用于索引的缓冲区大小,增加它可得到更好的索引处理性能。对于内存在4GB左右的服务器该参数可设置为256M或384M。注意:该参数值设置的过大反而会是服务器整体效率降低! max_allowed_packet = 4M thread_stack = 256K table_cache = 128K sort_buffer_size = 6M 查询排序时所能使用的缓冲区大小。注意:该参数对应的分配内存是每连接独占!如果有100个连接,那么实际分配的总共排序缓冲区大小为100 × 6 = 600MB。所以,对于内存在4GB左右的服务器推荐设置为6-8M。 read_buffer_size = 4M 读查询操作所能使用的缓冲区大小。和sort_buffer_size一样,该参数对应的分配内存也是每连接独享! join_buffer_size = 8M 联合查询操作所能使用的缓冲区大小,和sort_buffer_size一样,该参数对应的分配内存也是每连接独享! myisam_sort_buffer_size = 64M table_cache = 512 thread_cache_size = 64 query_cache_size = 64M 指定CentOS系统MySQL查询缓冲区的大小。可以通过在MySQL控制台执行以下命令观察: &gt; SHOW VARIABLES LIKE ‘%query_cache%’; &gt; SHOW STATUS LIKE ‘Qcache%’; 如果Qcache_lowmem_prunes的值非常大,则表明经常出现缓冲不够的情况; 如果Qcache_hits的值非常大,则表明查询缓冲使用非常频繁,如果该值较小反而会影响效率,那么可以考虑不用查询缓冲;Qcache_free_blocks,如果该值非常大,则表明缓冲区中碎片很多。 tmp_table_size = 256M max_connections = 768 指定MySQL允许的最大连接进程数。如果在访问论坛时经常出现Too Many Connections的错误提示,则需要增大该参数值。 max_connect_errors = 10000000 wait_timeout = 10 指定一个请求的最大连接时间,对于4GB左右内存的服务器可以设置为5-10。 thread_concurrency = 8 该参数取值为服务器逻辑CPU数量×2,在本例中,服务器有2颗物理CPU,而每颗物理CPU又支持H.T超线程,所以实际取值为4 × 2 = 8skip-networking 开启该选项可以彻底关闭MySQL的TCP/IP连接方式,如果CentOS系统WEB服务器是以远程连接的方式访问MySQL数据库服务器则不要开启该选项!否则将无法正常连接! 以上,我们对一份my.cnf做了简单的说明,MySQL的优化是一项需要长期观察,长期积累经验,长期试验的工作。有兴趣的用户可以边查阅文档资料边做试验,在实际应用中获得更多的经验的收获。 在所有优化操作完成后,需要重新启动CentOS系统MySQL服务.这样，登陆后，我们会发现有很大的变化。","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"mysql优化","slug":"mysql优化","permalink":"http://www.jiliuke.com/tags/mysql%E4%BC%98%E5%8C%96/"}]},{"title":"CentOS ftp服务器架设","date":"2014-03-14T07:14:29.000Z","path":"2014/03/14/centos-ftp-e6-9c-8d-e5-8a-a1-e5-99-a8-e6-9e-b6-e8-ae-be/","text":"yum install vsftpd 2.启动/重启/关闭vsftpd服务器 [root@localhost ftp]# /sbin/service vsftpd restart Shutting down vsftpd: [ OK ] Starting vsftpd for vsftpd: [ OK ] OK表示重启成功了. 启动和关闭分别把restart改为start/stop即可. 如果是源码安装的,到安装文件夹下找到start.sh和shutdown.sh文件,执行它们就可以了. 3.与vsftpd服务器有关的文件和文件夹 vsftpd服务器的配置文件的是: /etc/vsftpd/vsftpd.conf vsftpd服务器的根目录,即FTP服务器的主目录: 在/var/ftp处pub处 如果你想修改服务器目录的路径,那么你只要修改/var/ftp到别处就行了 4.添加FTP本地用户 有的FTP服务器需要用户名和密码才能登录,就是因为设置了FTP用户和权限. FTP用户一般是不能登录系统的,只能进入FTP服务器自己的目录中,这是为了安全.这样的用户就叫做虚拟用户了.实际上并不是真正的虚拟用户,只是不能登录SHELL了而已,没能力登录系统. /usr/sbin/adduser -d /opt/test_ftp -g ftp -s /sbin/nologin test 这个命令的意思是: 使用命令(adduser)添加test用户,不能登录系统(-s /sbin/nologin),自己的文件夹在(-d /opt/test_ftp)),属于组ftp(-g ftp) 然后你需要为它设置密码 passwd test vsftpd.conf中设置匿名登录为NO anonymous_enable=NO 加上以下这句话可以进行上传了（selinux允许上传） setsebool allow_ftpd_full_access on 要求用户访问：VSFTPD的时候使用2121这个端口来访问在Linux下来实现 先说解决方法： 直接更改配置文件：[root@liunuxserver1 ~]# vi /etc/vsftpd.conf #chroot_list_enable=YES # (default follows) #chroot_list_file=/etc/vsftpd.chroot_list 改为： chroot_list_enable=YES # (default follows) chroot_list_file=/etc/vsftpd.chroot_list 添加添加如下设置： listen_port=2121 更改监听端口 pasv_min_port=9981 被动模式最低端口 pasv_max_port=9990 被动模式最高端口 然后设置防火墙： 我的防火墙的设置如下表： iptables -A INPUT -p tcp -m multiport –dport 2121,9981:9990 -j ACCEPT 开放2121端口和9981-9990端口 这样就添加了一个FTP用户了.下面的示例可以帮助你进入FTP服务器了. [root@localhost ftp]# ftp ftp&gt; open 192.168.0.33 Connected to 192.168.0.33 (192.168.0.33). 220 (vsFTPd 2.0.5) Name (192.168.0.33:gxl): test 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp&gt; quit 221 Goodbye. 在windows中,只要在浏览器中输入 ftp://192.168.0.33 进入FTP服务器,然后 右键 登录,输入用户名和密码就可以登录自己的目录了. 当然你要保证自己能读写自己的目录,就要在配置文件vsftpd.conf里设置一下就可以读写了. local_enable=yes write_enable=yes local_umask=022 5.匿名上传下载 修改配置文件即可vsftpd.conf,确定有以下几行,没有自己添加进去就可以了. anonymous_enable=yes anon_upload_enable=yes anon_mkdir_write_enable=yes anon_umask=022 然后你可以新建一个文件夹,修改它的权限为完全开放,任何用户就可以登录这个文件夹,并上传下载文件: mkdir /var/ftp/guest chmod 777 /var/ftp/guest 6.定制进入FTP服务器的欢迎信息 在vsftpd.conf文件中设置: dirmessage_enable=yes 然后进入用户目录建立一个.message文件,输入欢迎信息即可(我这里写入的是Welcome to gxlinux’s FTP!): [root@localhost test_ftp]# ftp 192.168.0.33 Connected to 192.168.0.33 (192.168.0.33). 220 (vsFTPd 2.0.5) Name (192.168.0.33:gxl): test 331 Please specify the password. Password: 230-Welcome to gxlinux’s FTP! 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. 7.实现虚拟路径 将某个目录挂载到FTP服务器下供用户使用,这就叫做虚拟路径. 比如将gxl用户的目录挂载到FTP服务器中,供FTP服务器的用户使用,使用如下命令即可: [root@localhost opt]# mount –bind /home/gxl /var/ftp/pub #使用挂载命令 [root@localhost opt]# ls /var/ftp/pub LumaQQ Screenshot.png 桌面 8.打开vsFTPd的日志功能 添加下面一行到vsftpd.conf文件中,一般情况下该文件中有这一行,只要把前面的注释符号#去掉即可,没有的话就添加,或者修改: xferlog_file=/var/log/vsftpd.log 9.限制链接数,以及每个IP最大的链接数 修改配置文件中,例如vsftp最大支持链接数100个,每个IP能支持5个链接: max_client=100 max_per=5 10.限制传输速度 修改配置文件中,例如让匿名用户和vsftd上的用户(即虚拟用户)都以80KB=1024*80=81920的速度下载 anon_max_rate=81920 local_max_rate=81920 11.将用户(一般指虚拟用户)限制在自家目录 修改配置文件中,这样用户就只能访问自己家的目录了: chroot_local_user=yes 如果只想某些用户仅能访问自己的目录,其它用户不做这个限制,那么就需要在chroot_list文件(此文件一般是在/etc/vsftpd/中)中添加此用户. 编辑此文件,比如将test用户添加到此文件中,那么将其写入即可.一般的话,一个用户占一行. [root@localhost vsftpd]# cat chroot_list test 12.绑定某个IP到vsFTPd 有时候要限制某些IP访问服务器,只允许某些IP访问,例如只允许192.168.0.33访问这个FTP,同样修改配置文件: listen_address=192.168.0.33 配置vsftpd.conf anonymous_enable=NO #禁止匿名 local_enable=YES #允许本地登录 write_enable=YES #允许写，如需上传，则必须 local_umask=027 #将上传文件的权限设置为：777-local_umask anon_upload_enable=YES #允许虚拟用户和匿名用户上传 anon_other_write_enable=YES #允许虚拟用户和匿名用户修改文件名和删除文件 dirmessage_enable=YES xferlog_enable=YES #打开日志记录 connect_from_port_20=YES xferlog_file=/var/log/vsftpd.log #日志存放位置 xferlog_std_format=YES #标准日志格式 idle_session_timeout=600 #空闲连接超时 data_connection_timeout=120 ftpd_banner=Welcome to ChinaRise FTP service #欢迎信息 guest_enable=yes #允许虚拟用户 guest_username=vsftpdguest #虚拟用户使用的系统账号 virtual_use_local_privs=YES #虚拟用户拥有本地系统权限 chroot_local_user=NO chroot_list_enable=YES #以上两行将虚拟用户限制在其目录下，不能访问其他目录，或者直接用 chroot_local_user=YES listen=yes #监听/被动模式 listen_port=21 #监听端口 chroot_list_file=/etc/vsftpd/vsftpd.chroot_list #虚拟用户名单保存在文件/etc/vsftpd/vsftpd.chroot_list 中 user_config_dir=/etc/vsftpd/vsftpd_user_conf #每个虚拟用户名的更加详细的培植保存在/etc/vsftpd/vsftpd_user_conf 中 虚拟用户其他设置 在/etc/vsftpd/vsftpd.chroot_list 文件中写入允许登陆的虚拟用户名称，每行一个 在/etc/vsftpd/vsftpd_user_conf 文件夹中创建一个以虚拟用户用户名命名的文件， 写入：local_root = /var/FTP/子目录名 然后在/var/FTP下创建一个对应的目录即可","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"vsftp","slug":"vsftp","permalink":"http://www.jiliuke.com/tags/vsftp/"}]},{"title":"Centos下通过SMTP发送邮件失败解决","date":"2014-03-13T01:31:09.000Z","path":"2014/03/13/centos-e4-b8-8b-e9-80-9a-e8-bf-87smtp-e5-8f-91-e9-80-81-e9-82-ae-e4-bb-b6-e5-a4-b1-e8-b4-a5-e8-a7-a3-e5-86-b3/","text":"前天测试出在64位系统下不能发送激活邮件的bug 打出error_msg:为permission deny 调试搜索了半天，没有结果；网上主要说的是 fsockopen被关闭啊，用pfsockopen，或者stream_socket_client()来代替 都试过不行； 因为在window下这几个函数都没有问题，所以想到是linux的 的问题，这个东东困扰过好几次了，以后碰到问题请首先想到这个； 既然默认开启了肯定有他的好处，不能关selinux，就搜索：selinux+smtp 找到了答案，selinux果然是不允许http来连接网络的，执行如下命令： setsebool -P httpd_can_network_connect=1 即可发送邮件了，看来得好好看看selinux这个鬼东西了。 详情参考： https://www.vbulletin.com/forum/showthread.php/217997-smtp-mail-and-SElinux-in-enforcing-mode To allow PHP/Apache to connect to port 25 issue the following commands as root: setsebool -P httpd_can_network_connect=1 To allow PHP mail() to work issue the following command as root: setsebool -P httpd_can_sendmail=1 今天2012-04-19 又碰到服务器不能发送邮件的问题了，服务器部署到电信机房后。 SMTP Error: Could not connect to SMTP host. 找了半天没有发现问题所在，重启了httpd，就好了，实在太诡异了， 按理昨天关闭服务器在机房才开的机，httpd也算是重启了的。 先记住，重启httpd可不是神马好方法","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"SMTP","slug":"SMTP","permalink":"http://www.jiliuke.com/tags/SMTP/"}]},{"title":"chcon命令详解(SELinux命令详解)chcon命令详解(SELinux命令详解)","date":"2014-03-10T09:05:25.000Z","path":"2014/03/10/chcon-e5-91-bd-e4-bb-a4-e8-af-a6-e8-a7-a3selinux-e5-91-bd-e4-bb-a4-e8-af-a6-e8-a7-a3chcon-e5-91-bd-e4-bb-a4-e8-af-a6-e8-a7-a3selinux-e5-91-bd-e4-bb-a4-e8-af-a6-e8-a7-a3/","text":"chcon命令：修改对象（文件）的安全上下文。比如：用户：角色：类型：安全级别。 命令格式： Chcon [OPTIONS…] CONTEXT FILES….. Chcon [OPTIONS…] –reference=PEF_FILES FILES… 说明： CONTEXT 为要设置的安全上下文 FILES 对象（文件） –reference 参照的对象 PEF_FILES 参照文件上下文 FILES 应用参照文件上下文为我的上下文。 OPTIONS 如下： -f 强迫执行 -R 递归地修改对象的安全上下文 -r ROLE 修改安全上下文角色的配置 -t TYPE 修改安全上下文类型的配置 -u USER 修改安全上下文用户的配置 -v 显示冗长的信息 -l, –range=RANGE 修改安全上下文中的安全级别 范例： 1、ftp //If you want to share files anonymously &lt;如果你想把这个共享给匿名的话，需要开启以下&gt; chcon -R -t public_content_t /var/ftp //If you want to setup a directory where you can upload files ＜如果你想让你设置的FTP目录可以上传文件的话，SELINUX需要设置＞ chcon -t public_content_rw_t /var/ftp/incoming //You must also turn on the boolean allow_ftpd_anon_write &lt;允许匿名用户写入权限＞ setsebool -P allow_ftpd_anon_write=1 //If you are setting up this machine as a ftpd server and wish to allow users to access their home directorories&lt;如果你希望你的FTP用户可以访问自己的家目录的话，需要开启&gt; setsebool -P ftp_home_dir 1 //If you want to run ftpd as a daemon&lt;如果你希望将vsftpd以daemon的方式运行的话，需要开启&gt; setsebool -P ftpd_is_daemon 1 //You can disable SELinux protection for the ftpd daemon&lt;你可以让SElinux停止保护vsftpd的daemon方式动行&gt; setsebool -P ftpd_disable_trans 1 2、httpd //If you want a particular domain to write to the public_content_rw_t domain &lt;如果希望具体个doman具有可写权限的话，需要设置&gt; setsebool -P allow_httpd_anon_write=1 or setsebool -P allow_httpd_sys__anon_write=1 //httpd can be setup to allow cgi s to be executed setsebool -P httpd_enable_cgi 1 //If you want to allow access to users home directories&lt;允许用户HHTP访问其家目录，该设定限仅于用户的家目录主页&gt; setsebool -P httpd_enable_homedirs 1 chcon -R -t httpd_sys_content_t ~user/public_html //httpd is allowed access to the controling terminal&lt;允许httpd访问终端＞ setsebool -P httpd_tty_comm 1 //such that one httpd service can not interfere with another setsebool -P httpd_unified 0 //loadable modules run under the same context as httpd setsebool -P httpd_builtin_ing 0 //httpd s are allowed to connect out to the network setsebool -P httpd_can_network_connect 1 // You can disable suexec transition setsebool -P httpd_suexec_disable_trans 1 //You can disable SELinux protection for the httpd daemon by executing &lt;关闭Selinux的关于httpd进程守护的保护&gt; setsebool -P httpd_disable_trans 1 service httpd restart 3、named //If you want to have named update the master zone files &lt;关于named,master更新selinux设定&gt; setsebool -P named_write_master_zones 1 //You can disable SELinux protection for the named daemon by executing &lt;关闭named的进程守护保护&gt; setsebool -P named_disable_trans 1 service named restart 4、nfs //If you want to setup this machine to share nfs partitions read only setsebool -P nfs_export_all_ro 1 //If you want to share files read/write setsebool -P nfs_export_all_rw 1 //If you want to use a remote NFS server for the home directories on this machine ＜如果你想要将远程NFS的家目录共享到本机，需要开启&gt; setsebool -P use_nfs_home_dirs 1 5、samba //If you want to share files other than home directorie &lt;如果你希望将目录共享给其他用户，你需要设置&gt; chcon -t samba_share_t /directory //If you want to share files with multiple domains 如果samba服务器共享目录给多个域，则需要： setsebool -P allow_smbd_anon_write=1 //If you are setting up this machine as a Samba server and wish to share the home directories samba服务器要共享家目录时： setsebool -P samba_enable_home_dirs 1 //If you want to use a remote Samba server for the home directories on this machine 如果你需在本机上使用远程samba服务器的家目录 setsebool -P use_samba_home_dirs 1 //You can disable SELinux protection for the samba daemon by executing 关闭selinux关于samba的进程守护的保护 setsebool -P smbd_disable_trans 1 service smb restart 6、rsync //If you want to share files using the rsync daemon 共享rsync目录时： chcon -t public_content_t /directories //If you want to share files with multiple domains 允许其他用户写入时 setsebool -P allow_rsync_anon_write=1 //You can disable SELinux protection for the rsync daemon by executing 停止rsync的进程保护 setsebool -P rsync_disable_trans 1 7、kerberos //allow your system to work properly in a Kerberos environment 允许系统使用kerberos setsebool -P allow_kerberos 1 //If you are running Kerberos daemons kadmind or krb5kdc setsebool -P krb5kdc_disable_trans 1 service krb5kdc restart setsebool -P kadmind_disable_trans 1 service kadmind restart 8、nis Allow your system to work properly in a NIS environment 系统工作在nis环境时 setsebool -P allow_ypbind 1","tags":[{"name":"chcon","slug":"chcon","permalink":"http://www.jiliuke.com/tags/chcon/"},{"name":"SELINUX","slug":"SELINUX","permalink":"http://www.jiliuke.com/tags/SELINUX/"}]},{"title":"linux下删除某目录下所有.svn","date":"2014-03-07T01:53:46.000Z","path":"2014/03/07/linux-e4-b8-8b-e5-88-a0-e9-99-a4-e6-9f-90-e7-9b-ae-e5-bd-95-e4-b8-8b-e6-89-80-e6-9c-89-svn/","text":"find -type d -name “.svn”|xargs rm -rf;","tags":[]},{"title":"Crond执行预定任务","date":"2014-03-06T05:34:22.000Z","path":"2014/03/06/crond-e6-89-a7-e8-a1-8c-e9-a2-84-e5-ae-9a-e4-bb-bb-e5-8a-a1/","text":"安装crontab: yum install crontabs 说明： /sbin/service crond start //启动服务 /sbin/service crond stop //关闭服务 /sbin/service crond restart //重启服务 /sbin/service crond reload //重新载入配置 查看crontab服务状态：service crond status 手动启动crontab服务：service crond start 查看crontab服务是否已设置为开机启动，执行命令：ntsysv 加入开机自动启动: chkconfig –level 35 crond on 1，crontab命令 功能说明：设置计时器。 语 法：crontab [-u &lt;用户名称&gt;][配置文件] 或crontab [-u &lt;用户名称&gt;][-elr] 补充说明：cron是一个常驻服务，它提供计时器的功能，让用户在特定的时间得以执行预设的指令或程序。只要用户会编辑计时器的配置文件，就可以使 用计时器的功能。其配置文件格式如下： Minute Hour Day Month DayOFWeek Command 参 数： -e 编辑该用户的计时器设置。 -l 列出该用户的计时器设置。 -r 删除该用户的计时器设置。 -u&lt;用户名称&gt; 指定要设定计时器的用户名称。 2，crontab 格式 基本格式: * * * * * command 分 时 日 月 周 命令 第1列表示分钟1～59 每分钟用或者/1表示 第2列表示小时1～23（0表示0点） 第3列表示日期1～31 第4列 表示月份1～12 第5列标识号星期0～6（0表示星期天） 第6列要运行的命令 # Use the hash sign to prefix a comment # +—————- minute (0 – 59) # | +————- hour (0 – 23) # | | +———- day of month (1 – 31) # | | | +——- month (1 – 12) # | | | | +—- day of week (0 – 7) (Sunday=0 or 7) # | | | | | # * * * * * command to be executed crontab文件的一些例子： 30 21 * * * /etc/init.d/nginx restart 每晚的21:30重启nginx。 45 4 1,10,22 * * /etc/init.d/nginx restart 每月1、10、22日的4 : 45重启nginx。 10 1 * * 6,0 /etc/init.d/nginx restart 每周六、周日的1 : 10重启nginx。 0,30 18-23 * * * /etc/init.d/nginx restart 每天18 : 00至23 : 00之间每隔30分钟重启nginx。 0 23 * * 6 /etc/init.d/nginx restart 每星期六的11 : 00 pm重启nginx。 * */1 * * * /etc/init.d/nginx restart 每一小时重启nginx * 23-7/1 * * * /etc/init.d/nginx restart 晚上11点到早上7点之间，每 隔一小时重启nginx 0 11 4 * mon-wed /etc/init.d/nginx restart 每月的4号与每周一到周三 的11点重启nginx 0 4 1 jan * /etc/init.d/nginx restart 一月一号的4点重启nginx */30 * * * * /usr/sbin/ntpdate 210.72.145.20 每半小时同步一下时间","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"Crond","slug":"Crond","permalink":"http://www.jiliuke.com/tags/Crond/"}]},{"title":"米米乐商城优惠券领取中心（不定期更新）","date":"2014-03-03T02:54:37.000Z","path":"2014/03/03/e7-b1-b3-e7-b1-b3-e4-b9-90-e5-95-86-e5-9f-8e-e4-bc-98-e6-83-a0-e5-88-b8-e9-a2-86-e5-8f-96-e4-b8-ad-e5-bf-83-ef-bc-88-e4-b8-8d-e5-ae-9a-e6-9c-9f-e6-9b-b4-e6-96-b0-ef-bc-89/","text":"使用方法： 注册会员（会员才能使用米券），购买商品，进入购物车，点击立即结算，下边会出现输入优惠券码，输入即可使用 米米乐商城21元米券满500使用（2014年3月31日前有效） 米券码：1850143008 米券码：1850764249 米券码：1850618653 米券码：1850515784 米券码：1849357355 米券码：1849956739 米券码：1849752200 米券码：1849386209 米米乐商城20元米券满100使用（2014年8月1日前有效） 米券码：2014185646 米券码：2014185650 米券码：2014185652 米券码：2014185655 米券码：2014185726 米券码：2014185727 米券码：2014185741 米券码：2014185750 米券码：2014185776 米券码：2014185778 米券码：2014185818","tags":[]},{"title":"linux命令执行网页","date":"2014-03-03T02:30:52.000Z","path":"2014/03/03/linux-e5-91-bd-e4-bb-a4-e6-89-a7-e8-a1-8c-e7-bd-91-e9-a1-b5/","text":"curl http://localhost/api/baidu.php?act=FullIndex","tags":[{"name":"linux","slug":"linux","permalink":"http://www.jiliuke.com/tags/linux/"},{"name":"执行","slug":"执行","permalink":"http://www.jiliuke.com/tags/%E6%89%A7%E8%A1%8C/"},{"name":"网页","slug":"网页","permalink":"http://www.jiliuke.com/tags/%E7%BD%91%E9%A1%B5/"}]},{"title":"linux在命令行下打开各种类型文件","date":"2014-02-28T02:42:44.000Z","path":"2014/02/28/linux-e5-9c-a8-e5-91-bd-e4-bb-a4-e8-a1-8c-e4-b8-8b-e6-89-93-e5-bc-80-e5-90-84-e7-a7-8d-e7-b1-bb-e5-9e-8b-e6-96-87-e4-bb-b6/","text":"如何能在命令行下通过指令打开2.xls，随之系统会调用默认的打开程序就好了。 方法： xdg-open filename format: xdg-open { file | URL } 通过命令格式可以看出可以打开文件及url地址。 example: xdg-open http://www.baidu.com #打开网址 xdg-open ~/Downloads/2.xls #打开文件 xdg-open ~ #打开用户主目录","tags":[{"name":"linux","slug":"linux","permalink":"http://www.jiliuke.com/tags/linux/"},{"name":"类型文件","slug":"类型文件","permalink":"http://www.jiliuke.com/tags/%E7%B1%BB%E5%9E%8B%E6%96%87%E4%BB%B6/"}]},{"title":"Centos 查看系统硬件信息","date":"2014-02-27T01:44:38.000Z","path":"2014/02/27/centos-e6-9f-a5-e7-9c-8b-e7-b3-bb-e7-bb-9f-e7-a1-ac-e4-bb-b6-e4-bf-a1-e6-81-af/","text":"Centos 查看系统硬件信息 [root@yongsen ~] # uname -a # 查看内核/操作系统/CPU信息的linux系统信息命令 [root@yongsen ~] # head -n 1 /etc/issue # 查看操作系统版本，是数字1不是字母L [root@yongsen ~] # cat /proc/cpuinfo # 查看CPU信息的linux系统信息命令 [root@yongsen ~] # hostname # 查看计算机名的linux系统信息命令 [root@yongsen ~] # lspci -tv # 列出所有PCI设备 [root@yongsen ~] # lsusb -tv # 列出所有USB设备的linux系统信息命令 [root@yongsen ~] # lsmod # 列出加载的内核模块 [root@yongsen ~] # env # 查看环境变量资源 [root@yongsen ~] # free -m # 查看内存使用量和交换区使用量 [root@yongsen ~] # df -h # 查看各分区使用情况 [root@yongsen ~] # du -sh # 查看指定目录的大小 [root@yongsen ~] # grep MemTotal /proc/meminfo # 查看内存总量 [root@yongsen ~] # grep MemFree /proc/meminfo # 查看空闲内存量 [root@yongsen ~] # uptime # 查看系统运行时间、用户数、负载 [root@yongsen ~] # cat /proc/loadavg # 查看系统负载磁盘和分区 [root@yongsen ~] # mount | column -t # 查看挂接的分区状态 [root@yongsen ~] # fdisk -l # 查看所有分区 [root@yongsen ~] # swapon -s # 查看所有交换分区 [root@yongsen ~] # hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备) [root@yongsen ~] # dmesg | grep IDE # 查看启动时IDE设备检测状况网络 [root@yongsen ~] # ifconfig # 查看所有网络接口的属性 [root@yongsen ~] # iptables -L # 查看防火墙设置 [root@yongsen ~] # route -n # 查看路由表 [root@yongsen ~] # netstat -lntp # 查看所有监听端口 [root@yongsen ~] # netstat -antp # 查看所有已经建立的连接 [root@yongsen ~] # netstat -s # 查看网络统计信息进程 [root@yongsen ~] # ps -ef # 查看所有进程 [root@yongsen ~] # top # 实时显示进程状态用户 [root@yongsen ~] # w # 查看活动用户 [root@yongsen ~] # id # 查看指定用户信息 [root@yongsen ~] # last # 查看用户登录日志 [root@yongsen ~] # cut -d: -f1 /etc/passwd # 查看系统所有用户 [root@yongsen ~] # cut -d: -f1 /etc/group # 查看系统所有组 [root@yongsen ~] # crontab -l # 查看当前用户的计划任务服务 [root@yongsen ~] # chkconfig –list # 列出所有系统服务 [root@yongsen ~] # chkconfig –list | grep on # 列出所有启动的系统服务程序 [root@yongsen ~] # rpm -qa # 查看所有安装的软件包 [root@yongsen ~] # cat /proc/cpuinfo # 查看CPU相关参数的linux系统命令 [root@yongsen ~] # cat /proc/partitions # 查看linux硬盘和分区信息的系统信息命令 [root@yongsen ~] # cat /proc/meminfo # 查看linux系统内存信息的linux系统命令 [root@yongsen ~] # cat /proc/version # 查看版本，类似uname -r [root@yongsen ~] # cat /proc/ioports # 查看设备io端口 [root@yongsen ~] # cat /proc/interrupts # 查看中断 [root@yongsen ~] # cat /proc/pci # 查看pci设备的信息 [root@yongsen ~] # cat /proc/swaps # 查看所有swap分区的信息 以上命令如果说没有，那么在RHEL6的系统上，你可以用 yum provides “*/lspci”这样类似的命令来查询，然后安装相应的软件包就可以了。","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"硬件","slug":"硬件","permalink":"http://www.jiliuke.com/tags/%E7%A1%AC%E4%BB%B6/"}]},{"title":"Centos 下查看服务器的CPU的信息","date":"2014-02-26T09:10:37.000Z","path":"2014/02/26/centos-e4-b8-8b-e6-9f-a5-e7-9c-8b-e6-9c-8d-e5-8a-a1-e5-99-a8-e7-9a-84cpu-e7-9a-84-e4-bf-a1-e6-81-af/","text":"实时查看CPU每核的线程利用率 top 后按 1，如下图所示，我们可以看到有8个CPU，每行显示的就是该CPU的使用率： 查看当前操作系统内核信息 # uname -a Linux db1.xxx.com 2.6.18-194.el5xen #1 SMP Fri Apr 2 15:34:40 EDT 2010 x86_64 x86_64 x86_64 GNU/Linux 依次是 操作系统名称： Linux uname -s 可以单独看到这个信息 计算机名： db1.xxx.com uname -n 可以单独看到这个信息 操作系统发行编号： 2.6.18-194.el5xen uname -r 可以单独看到这个信息 操作系统发行时间： #1 SMP Fri Apr 2 15:34:40 EDT 2010 uname -v 可以单独看到这个信息 计算机类型，进程类型，硬件平台：x86_64 uname –m,uname –p,uname -i 可以单独看到这个信息 操作系统信息：GNU/Linux uname -o 可以单独看到这个信息 参数说明： -a或—all 显示全部的信息。 -m或—machine 显示电脑类型。 -n或-nodename 显示在网络上的主机名称。 -r或—release 显示操作系统的发行编号。 -s或—sysname 显示操作系统名称。 -v 显示操作系统的版本。 –help 显示帮助。 –version 显示版本信息。 参看：http://www.lx138.com/page.php?ID=100 查看当前操作系统发行版信息 # lsb_release -a LSB Version: :core-3.1-amd64:core-3.1-ia32:core-3.1-noarch:graphics-3.1-amd64:graphics-3.1-ia32:graphics-3.1-noarch Distributor ID: CentOS Description: CentOS release 5.5 (Final) Release: 5.5 Codename: Final 查看有几个逻辑CPU，以及CPU型号 # cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c 8 Intel(R) Xeon(R) CPU E5620 @ 2.40GHz 上面可以看到有8个逻辑CPU。 型号是 Intel(R) Xeon(R) CPU的 E5620 ，主频是 2.40GHz 实际是有几个CPU # cat /proc/cpuinfo | grep physical | uniq -c 1 physical id : 0 1 address sizes : 40 bits physical, 48 bits virtual 1 physical id : 1 1 address sizes : 40 bits physical, 48 bits virtual 1 physical id : 2 1 address sizes : 40 bits physical, 48 bits virtual 1 physical id : 3 1 address sizes : 40 bits physical, 48 bits virtual 1 physical id : 4 1 address sizes : 40 bits physical, 48 bits virtual 1 physical id : 5 1 address sizes : 40 bits physical, 48 bits virtual 1 physical id : 6 1 address sizes : 40 bits physical, 48 bits virtual 1 physical id : 7 1 address sizes : 40 bits physical, 48 bits virtual 说明实际上是8颗1核的CPU，因为是多核CPU，所以这里有这个显示。其实这台机子是 1个Xeon 四核 E5620处理器 参看： 超线程技术的介绍 http://wenwen.soso.com/z/q168813991.htm # more /proc/cpuinfo | grep “model name” model name : Intel(R) Xeon(R) CPU E5620 @ 2.40GHz model name : Intel(R) Xeon(R) CPU E5620 @ 2.40GHz model name : Intel(R) Xeon(R) CPU E5620 @ 2.40GHz model name : Intel(R) Xeon(R) CPU E5620 @ 2.40GHz model name : Intel(R) Xeon(R) CPU E5620 @ 2.40GHz model name : Intel(R) Xeon(R) CPU E5620 @ 2.40GHz model name : Intel(R) Xeon(R) CPU E5620 @ 2.40GHz model name : Intel(R) Xeon(R) CPU E5620 @ 2.40GHz # grep “model name” /proc/cpuinfo model name : Intel(R) Xeon(R) CPU E5620 @ 2.40GHz model name : Intel(R) Xeon(R) CPU E5620 @ 2.40GHz model name : Intel(R) Xeon(R) CPU E5620 @ 2.40GHz model name : Intel(R) Xeon(R) CPU E5620 @ 2.40GHz model name : Intel(R) Xeon(R) CPU E5620 @ 2.40GHz model name : Intel(R) Xeon(R) CPU E5620 @ 2.40GHz model name : Intel(R) Xeon(R) CPU E5620 @ 2.40GHz model name : Intel(R) Xeon(R) CPU E5620 @ 2.40GHz # grep “model name” /proc/cpuinfo | cut -f2 -d: Intel(R) Xeon(R) CPU E5620 @ 2.40GHz Intel(R) Xeon(R) CPU E5620 @ 2.40GHz Intel(R) Xeon(R) CPU E5620 @ 2.40GHz Intel(R) Xeon(R) CPU E5620 @ 2.40GHz Intel(R) Xeon(R) CPU E5620 @ 2.40GHz Intel(R) Xeon(R) CPU E5620 @ 2.40GHz Intel(R) Xeon(R) CPU E5620 @ 2.40GHz Intel(R) Xeon(R) CPU E5620 @ 2.40GHz 当前是32位还是64位工作模式 # getconf LONG_BIT 64 是否支持64bit计算 结果大于0, 说明支持64bit计算. lm指long mode, 支持lm则是64bit # cat /proc/cpuinfo | grep flags | grep ‘ lm ‘ | wc -l 8 参考资料 Linux下如何查看CPU信息, 包括位数和多核信息 http://hi.baidu.com/go_status/blog/item/4a095937ce3aa745251f1431.html CentOS系统如何查看cpu http://os.51cto.com/art/201004/192592.htm centos下如何查看cpu是多少核，及每核的线程 http://zhidao.baidu.com/question/165109144","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"CPU","slug":"CPU","permalink":"http://www.jiliuke.com/tags/CPU/"}]},{"title":"centos下安装最新firefox","date":"2014-02-24T05:43:06.000Z","path":"2014/02/24/centos-e4-b8-8b-e5-ae-89-e8-a3-85-e6-9c-80-e6-96-b0firefox/","text":"1.install EPEL repository #wget Uvh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm #rpm -Uvh epel-release-6-8.noarch.rpm 2.install Remi repository #wget http://rpms.famillecollet.com/enterprise/remi-release-6.rpm #rpm -Uvh remi-release-6.rpm 3.check Availabilty of Firefox 24 #yum –enablerepo=remi list firefox 4.install firefox #yum –enablerepo=remi install firefox 5.Starting Firefox 24 #firefox","tags":[]},{"title":"Subversion windows迁移到linux服务器的步骤","date":"2014-02-21T05:24:30.000Z","path":"2014/02/21/subversion-windows-e8-bf-81-e7-a7-bb-e5-88-b0linux-e6-9c-8d-e5-8a-a1-e5-99-a8-e7-9a-84-e6-ad-a5-e9-aa-a4/","text":"首先在Windows上，使用svnadmin dump resp_path &gt;dumpfile将一个仓库导出成一个文件，这时候可以看到一个版本一个版本的导出过程。然后把这个dumpfile复制到Linux的机器上，使用svnadmin load resp_path amis.dump 2、ftp上传到linux下如/project 3、linux下/project$svnadmin create amis 4、/project$svnadmin load amis &lt; amis.dump. 注意导出用&gt;，导入用&lt; 注意：linux的profile下要使用utf-8的编码；securecrt的字符编码也要用utf-8。","tags":[{"name":"linux","slug":"linux","permalink":"http://www.jiliuke.com/tags/linux/"},{"name":"Subversion","slug":"Subversion","permalink":"http://www.jiliuke.com/tags/Subversion/"},{"name":"迁移","slug":"迁移","permalink":"http://www.jiliuke.com/tags/%E8%BF%81%E7%A7%BB/"}]},{"title":"centos 安装samba服务器","date":"2014-02-20T01:43:47.000Z","path":"2014/02/20/centos-e5-ae-89-e8-a3-85samba-e6-9c-8d-e5-8a-a1-e5-99-a8/","text":"1.yum -y install samba//下载samba包，并自动安装 2.service smb start//开启samba服务 3.netstat -anpl|grep smb//查看samba端口号(一般是139和445) 4.vi /etc/sysconfig/iptables//添加端口到防火墙 5.samba配置，配置文件在：vi /etc/samba/smb.conf 主要配置global setting，share definitions 74行：workgroup = WORKGROUP//和windows工作组一致 75行：服务器版本信息，可不改 77行：微软中显示的信息，可不改 79行：监听的物理网卡，前有分号不解析的，用的时候配置 80行：监听的ip地址，可以写域名段，前有分号不解析的，用的时候配置 101行：加密方式：user表示用户加密，share表示不加密，设置成share后就能登ip访问了 6.添加samba用户之前需要添加为系统用户， pdbedit –a username：新建Samba账户。 pdbedit –x username：删除Samba账户。 pdbedit –L：列出Samba用户列表，读取passdb.tdb数据库文件。 pdbedit –Lv：列出Samba用户列表的详细信息。 pdbedit –c “[D]” –u username：暂停该Samba用户的账号。 pdbedit –c “[]” –u username：恢复该Samba用户的账号。 以下是命令: useradd daiyunlong passwd daiyunlong 123456 123456 pdbedit -a daiyunlong 123456 123456 7.关闭SELinux setenforce 1 开启 setenforce 0 关闭 到此，已经可以向linux复制东西了","tags":[{"name":"centos","slug":"centos","permalink":"http://www.jiliuke.com/tags/centos/"},{"name":"samba","slug":"samba","permalink":"http://www.jiliuke.com/tags/samba/"}]},{"title":"CentOS 6.0 下 VNC 配置方法","date":"2014-02-19T06:33:48.000Z","path":"2014/02/19/centos-6-0-e4-b8-8b-vnc-e9-85-8d-e7-bd-ae-e6-96-b9-e6-b3-95/","text":"CentOS 6.0 下 VNC 配置方法作者：匿名 来源：Chinaz源码报导 浏览：6695次 2011-9-3 19:20:07 字号：大 中 小 [摘要]VNC是一款优秀的远程控制工具软件，由著名的AT&amp;T的欧洲研究实验室开发的。VNC是在基于UNIX和Linux操作系统的免费的开放源码软件，远程控制能力强大，高效实用，其性能可以和Windows和MAC中的任何远程控制软件媲美。 VNC是一款优秀的远程控制工具软件，由著名的AT&amp;T的欧洲研究实验室开发的。VNC是在基于UNIX和Linux操作系统的免费的开放源码软件，远程控制能力强大，高效实用，其性能可以和Windows和MAC中的任何远程控制软件媲美。 首先是安装了 CentOS 6.0 的 64 位版。本文讲解的是一种方法。VNC 配置网上搜了有很多，但是貌似写的都不够基础，这里仔细按步骤记录一下。 一、安装 VNC首先检查一下本机是否安装了 VNC，默认情况下，CentOS 6.0 是没有安装的。 检查是否安装，输入： [root@localhost ~]# rpm -q vnc vnc-server 得到： package vnc is not installed package vnc-server is not installed 提示没有安装，那么就开始安装，输入： [root@localhost ~]# yum install vnc vnc-server 注：如果是 Ubuntu 则输入： [root@localhost ~]# apt-get install vnc vnc-server 在一串指令提示后，会让你确认一些选项，输入两次 “Y” 并确认，稍作等待，提示 “Complete!” 即完成安装。 二、设置 VNC 密码启动 VNC，输入： [root@localhost ~]# vncserver 此时会提示你输入密码，因为是第一次配置。重复输入两次即可。 三、配置桌面类型设置一下远程桌面使用那个类型的桌面，分辨率多少等等。输入： [root@localhost ~]# vi ~/.vnc/xstartup 得到： #!/bin/sh vncconfig -iconic &amp;unset SESSION_MANAGERunset DBUS_SESSION_BUS_ADDRESSOS=`uname -s`if[ $OS =‘Linux’]; then case“$WINDOWMANAGER”in *gnome*) if[ -e /etc/SuSE-release ]; then PATH=$PATH:/opt/gnome/bin export PATH fi ;; esacfiif[ -x /etc/X11/xinit/xinitrc ]; then exec /etc/X11/xinit/xinitrcfiif[ -f /etc/X11/xinit/xinitrc ]; then exec sh /etc/X11/xinit/xinitrcfi[ -r $HOME/.Xresources ] &amp;&amp; xrdb $HOME/.Xresourcesxsetroot -solid greyxterm -geometry 80x24+10+10 -ls -title“$VNCDESKTOP Desktop”&amp;twm &amp; 一般情况下，我们使用的 Linux 桌面都是 “Gnome” 桌面，故配置成这个桌面比较习惯。 按 “i” 键进入编辑状态，主要修改最后两行。改为： # xterm -geometry 80x24+10+10 -ls -title “$VNCDESKTOP Desktop” &amp;# twm &amp;gnome-session &amp; 一看便知，将配置文件的最后两行注释掉，并且加入了一行代码，表明使用的是 “Gnome” 桌面。 输入完毕，按 “ESC” 键退出编辑状态，再输入： :wq “w” 表示写，即保存配置，”q” 表示退出。 四、配置登录帐号、桌面分辨率、连接方式输入： [root@localhost ~]# vi /etc/sysconfig/vncservers 出现如下提示： # The VNCSERVERS variable is a list of display:user pairs.## Uncomment the lines below to start a VNC server on display :2# as my ‘myusername’ (adjust this to your own). You will also# need to set a VNC password; run ‘man vncpasswd’ to see how# to do that.## DO NOT RUN THIS SERVICE if your local area network is# untrusted! For a secure way of using VNC, see this URL:# http://kbase.redhat.com/faq/docs/DOC-7028# Use “-nolisten tcp” to prevent X connections to your VNC server via TCP.# Use “-localhost” to prevent remote VNC clients connecting except when# doing so through a secure tunnel. See the “-via” option in the# `man vncviewer’ manual page. # VNCSERVERS=”2:myusername”# VNCSERVERARGS[2]=”-geometry 800x600 -nolisten tcp -localhost” 重点编辑最后两行，将这两行注释去掉，得到： VNCSERVERS=”1:root”VNCSERVERARGS[1]=”-geometry 1024x768” 这里是只有一个帐号登录，设置分辨率为1024*768，如果你有多个帐号，则按照下面格式配置。 VNCSERVERS=”1:user1 2:user2 3:user3”VNCSERVERARGS[1]=”-geometry 1024×768”VNCSERVERARGS[2]=”-geometry 1024×768”VNCSERVERARGS[3]=”-geometry 800×600 -depth 24 -nolisten tcp -nohttpd -localhost” 解释一下这个文件： VNCSERVERS 这一行是配置在系统启动时启动几个 VNC server，上面的例子里运行了三个 VNC server，其中 user1 在 display :1，user2 在 display :2，user3 在 display :3。 VNCSERVERARGS 这三行，分别为 VNC server 1, 2, 3 配置启动参数，上面的例子里对 user1 和 user2 使用屏幕分辨率 1024×768，对 user3 使用 800×600,24 色，不支持 tcp，不支持 http 连接，只能在本地测试访问。 注释：在启动 VNCserver 时，你也可以为 server 指定一个 display 参数。你可以把 display 理解为一个桌面，每个用户都可以有自己的桌面。VNC 客户端在连接时，可以指定连接到哪个桌面上。在系统中，display 号不能重复，也就是说，如果有用户已经建立了名为 “:1” 的 display，另外一个用户就不能再使用 “:1” 了，他可以使用 “:2”。 指定 display 号码的启动 VNC server 的命令是: vncserver:1 五、配置防火墙，允许 VNC 连接VNC server 监听的端口从 5900 开始，display:1 的监听 5901，display:2 监听 5902，以此类推。CentOS 的防火墙缺省是不允许连接这些端口的，所以需要使用下面的步骤打开防火墙（需要 root 权限)： 输入编辑： [root@localhost ~]# vi /etc/sysconfig/iptables 得到： # Firewall configuration written by system-config-firewall# Manual customization of this file is not recommended.*filter:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]-A INPUT -m state –state ESTABLISHED,RELATED -j ACCEPT-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -m state –state NEW -m tcp -p tcp –dport 22 -j ACCEPT-A INPUT -j REJECT –reject-with icmp-host-prohibited-A FORWARD -j REJECT –reject-with icmp-host-prohibitedCOMMIT 上面我们只添加了一个 root 帐号和桌面 1，所以这里按照上面的规则，添加一个 “5901” 端口号即可。 # Firewall configuration written by system-config-firewall# Manual customization of this file is not recommended.*filter:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]:wq-A INPUT -m state –state ESTABLISHED,RELATED -j ACCEPT-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j roblox unlimited pro Sims Freeplay Cheats ACCEPT-A INPUT -m state –state NEW -m tcp -p tcp –dport 22 -j ACCEPT-A INPUT -m state –state NEW -m tcp -p tcp –dport 5901 -j ACCEPT-A INPUT -j REJECT –reject-with icmp-host-prohibited-A FORWARD -j REJECT –reject-with icmp-host-prohibitedCOMMIT 即添加了上述代码的第 11 行。 六、重启防火墙配置就算完毕了，需要重启一下防火墙才能使最后那个端口号的配置正常。 [root@localhost ~]# /sbin/service iptables restartiptables：清除防火墙规则：[确定]iptables：将链设置为政策 ACCEPT：filter [确定]iptables：正在卸载模块：[确定]iptables：应用防火墙规则：[确定] 现在重启防火墙完毕后，你就可以使用 VNC 客户端连接了，连接时候必须注意主机 IP 地址后面必须加桌面号，例如这样连接： 192.168.1.2:1 跟输入端口号是一样的，但是这里是桌面号，记住。 七、设置 VNC 自动启动虽然上面配置是可以使用了，但是你一旦重启服务器后，VNC 的服务又会停止，得手动来启，不方便，虽说服务器不能老是启动，但是重启的时候还是有的，为了方便，你需要将 VNC 服务设置为自动自动。 方法很多，你可以在图形化的界面下打开服务窗口，然后将 VNC 服务设为自动。既然这里都是在用终端下的命令行形式，就继续沿用这个方式吧。 [root@localhost ~]# chkconfig vncserver on 好了，所有配置完毕，各位可以享用 VNC 带来的远程控制功能了。","tags":[{"name":"VNC","slug":"VNC","permalink":"http://www.jiliuke.com/tags/VNC/"}]}]